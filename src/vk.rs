#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(improper_ctypes)]
#![allow(dead_code)]
type void = std::ffi::c_void;
pub const LOD_CLAMP_NONE : f32 = 1000.;					
pub const REMAINING_MIP_LEVELS : u32 = !0;				
pub const REMAINING_ARRAY_LAYERS : u32 = !0;			
pub const WHOLE_SIZE : u64 = !0u64;						
pub const ATTACHMENT_UNUSED : u32 = !0;					
pub const TRUE : u32 = 1;								
pub const FALSE : u32 = 0;								
pub const QUEUE_FAMILY_IGNORED : u32 = !0;				
pub const SUBPASS_EXTERNAL : u32 = !0;					
pub const MAX_PHYSICAL_DEVICE_NAME_SIZE : usize = 256;	
pub const UUID_SIZE : usize = 16;							
pub const MAX_MEMORY_TYPES : usize = 32;					
pub const MAX_MEMORY_HEAPS : usize = 16;					
pub const MAX_EXTENSION_NAME_SIZE : usize = 256;			
pub const MAX_DESCRIPTION_SIZE : usize = 256;				
pub const MAX_DEVICE_GROUP_SIZE  : usize = 32;
pub const LUID_SIZE              : usize = 8;
pub const QUEUE_FAMILY_EXTERNAL  : u32 = !0 - 1;
pub const MAX_DRIVER_NAME_SIZE : usize = 256; 
pub const MAX_DRIVER_INFO_SIZE : usize = 256; 
pub type Flags = i32;
pub type Bool32 = u32;
pub type DeviceSize = u64;
pub type SampleMask = u32;
pub type Instance = u64;
pub type PhysicalDevice = u64;
pub type Device = u64;
pub type Queue = u64;
pub type Semaphore = u64;
pub type CommandBuffer = u64;
pub type Fence = u64;
pub type DeviceMemory = u64;
pub type Buffer = u64;
pub type Image = u64;
pub type Event = u64;
pub type QueryPool = u64;
pub type BufferView = u64;
pub type ImageView = u64;
pub type ShaderModule = u64;
pub type PipelineCache = u64;
pub type PipelineLayout = u64;
pub type RenderPass = u64;
pub type Pipeline = u64;
pub type DescriptorSetLayout = u64;
pub type Sampler = u64;
pub type DescriptorPool = u64;
pub type DescriptorSet = u64;
pub type Framebuffer = u64;
pub type CommandPool = u64;

pub const fn make_version(major : u32, minor : u32, patch : u32) -> u32
{
	(major << 22) | (minor << 12) | patch //>>
}

pub type PipelineCacheHeaderVersion = i32;
pub const PIPELINE_CACHE_HEADER_VERSION_ONE : i32 = 1;
pub const PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM : i32 = 0x7FFFFFF;
pub type VkResult = i32;
pub const SUCCESS : i32 = 0;
pub const NOT_READY : i32 = 1;
pub const TIMEOUT : i32 = 2;
pub const EVENT_SET : i32 = 3;
pub const EVENT_RESET : i32 = 4;
pub const INCOMPLETE : i32 = 5;
pub const ERROR_OUT_OF_HOST_MEMORY : i32 = -1;
pub const ERROR_OUT_OF_DEVICE_MEMORY : i32 = -2;
pub const ERROR_INITIALIZATION_FAILED : i32 = -3;
pub const ERROR_DEVICE_LOST : i32 = -4;
pub const ERROR_MEMORY_MAP_FAILED : i32 = -5;
pub const ERROR_LAYER_NOT_PRESENT : i32 = -6;
pub const ERROR_EXTENSION_NOT_PRESENT : i32 = -7;
pub const ERROR_FEATURE_NOT_PRESENT : i32 = -8;
pub const ERROR_INCOMPATIBLE_DRIVER : i32 = -9;
pub const ERROR_TOO_MANY_OBJECTS : i32 = -10;
pub const ERROR_FORMAT_NOT_SUPPORTED : i32 = -11;
pub const ERROR_FRAGMENTED_POOL : i32 = -12;
pub const ERROR_UNKNOWN : i32 = -13;
pub const ERROR_OUT_OF_POOL_MEMORY : i32 = -1000069000;
pub const ERROR_INVALID_EXTERNAL_HANDLE : i32 = -1000072003;
pub const ERROR_FRAGMENTATION : i32 = -1000161000;
pub const ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS : i32 = -1000257000;
pub const ERROR_SURFACE_LOST_KHR : i32 = -1000000000;
pub const ERROR_NATIVE_WINDOW_IN_USE_KHR : i32 = -1000000001;
pub const SUBOPTIMAL_KHR : i32 = 1000001003;
pub const ERROR_OUT_OF_DATE_KHR : i32 = -1000001004;
pub const ERROR_INCOMPATIBLE_DISPLAY_KHR : i32 = -1000003001;
pub const ERROR_VALIDATION_FAILED_EXT : i32 = -1000011001;
pub const ERROR_INVALID_SHADER_NV : i32 = -1000012000;
pub const ERROR_INCOMPATIBLE_VERSION_KHR : i32 = -1000150000;
pub const ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT : i32 = -1000158000;
pub const ERROR_NOT_PERMITTED_EXT : i32 = -1000174001;
pub const ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT : i32 = -1000255000;
pub const THREAD_IDLE_KHR : i32 = 1000268000;
pub const THREAD_DONE_KHR : i32 = 1000268001;
pub const OPERATION_DEFERRED_KHR : i32 = 1000268002;
pub const OPERATION_NOT_DEFERRED_KHR : i32 = 1000268003;
pub const PIPELINE_COMPILE_REQUIRED_EXT : i32 = 1000297000;
pub const ERROR_OUT_OF_POOL_MEMORY_KHR : i32 = ERROR_OUT_OF_POOL_MEMORY;
pub const ERROR_INVALID_EXTERNAL_HANDLE_KHR : i32 = ERROR_INVALID_EXTERNAL_HANDLE;
pub const ERROR_FRAGMENTATION_EXT : i32 = ERROR_FRAGMENTATION;
pub const ERROR_INVALID_DEVICE_ADDRESS_EXT : i32 = ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
pub const ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR : i32 = ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
pub const ERROR_PIPELINE_COMPILE_REQUIRED_EXT : i32 = PIPELINE_COMPILE_REQUIRED_EXT;
pub const RESULT_MAX_ENUM : i32 = 0x7FFFFFF;
pub type StructureType = i32;
pub const STRUCTURE_TYPE_APPLICATION_INFO : i32 = 0;
pub const STRUCTURE_TYPE_INSTANCE_CREATE_INFO : i32 = 1;
pub const STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO : i32 = 2;
pub const STRUCTURE_TYPE_DEVICE_CREATE_INFO : i32 = 3;
pub const STRUCTURE_TYPE_SUBMIT_INFO : i32 = 4;
pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO : i32 = 5;
pub const STRUCTURE_TYPE_MAPPED_MEMORY_RANGE : i32 = 6;
pub const STRUCTURE_TYPE_BIND_SPARSE_INFO : i32 = 7;
pub const STRUCTURE_TYPE_FENCE_CREATE_INFO : i32 = 8;
pub const STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO : i32 = 9;
pub const STRUCTURE_TYPE_EVENT_CREATE_INFO : i32 = 10;
pub const STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO : i32 = 11;
pub const STRUCTURE_TYPE_BUFFER_CREATE_INFO : i32 = 12;
pub const STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO : i32 = 13;
pub const STRUCTURE_TYPE_IMAGE_CREATE_INFO : i32 = 14;
pub const STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO : i32 = 15;
pub const STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO : i32 = 16;
pub const STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO : i32 = 17;
pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO : i32 = 18;
pub const STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO : i32 = 19;
pub const STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO : i32 = 20;
pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO : i32 = 21;
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO : i32 = 22;
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO : i32 = 23;
pub const STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO : i32 = 24;
pub const STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO : i32 = 25;
pub const STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO : i32 = 26;
pub const STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO : i32 = 27;
pub const STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO : i32 = 28;
pub const STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO : i32 = 29;
pub const STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO : i32 = 30;
pub const STRUCTURE_TYPE_SAMPLER_CREATE_INFO : i32 = 31;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO : i32 = 32;
pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO : i32 = 33;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO : i32 = 34;
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET : i32 = 35;
pub const STRUCTURE_TYPE_COPY_DESCRIPTOR_SET : i32 = 36;
pub const STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO : i32 = 37;
pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO : i32 = 38;
pub const STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO : i32 = 39;
pub const STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO : i32 = 40;
pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO : i32 = 41;
pub const STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO : i32 = 42;
pub const STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO : i32 = 43;
pub const STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER : i32 = 44;
pub const STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER : i32 = 45;
pub const STRUCTURE_TYPE_MEMORY_BARRIER : i32 = 46;
pub const STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO : i32 = 47;
pub const STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO : i32 = 48;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES : i32 = 1000094000;
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO : i32 = 1000157000;
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO : i32 = 1000157001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES : i32 = 1000083000;
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS : i32 = 1000127000;
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO : i32 = 1000127001;
pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO : i32 = 1000060000;
pub const STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO : i32 = 1000060003;
pub const STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO : i32 = 1000060004;
pub const STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO : i32 = 1000060005;
pub const STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO : i32 = 1000060006;
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO : i32 = 1000060013;
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO : i32 = 1000060014;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES : i32 = 1000070000;
pub const STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO : i32 = 1000070001;
pub const STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 : i32 = 1000146000;
pub const STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 : i32 = 1000146001;
pub const STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 : i32 = 1000146002;
pub const STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 : i32 = 1000146003;
pub const STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 : i32 = 1000146004;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 : i32 = 1000059000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 : i32 = 1000059001;
pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_2 : i32 = 1000059002;
pub const STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 : i32 = 1000059003;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 : i32 = 1000059004;
pub const STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 : i32 = 1000059005;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 : i32 = 1000059006;
pub const STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 : i32 = 1000059007;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 : i32 = 1000059008;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES : i32 = 1000117000;
pub const STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO : i32 = 1000117001;
pub const STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO : i32 = 1000117002;
pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : i32 = 1000117003;
pub const STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO : i32 = 1000053000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES : i32 = 1000053001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES : i32 = 1000053002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES : i32 = 1000120000;
pub const STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO : i32 = 1000145000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES : i32 = 1000145001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES : i32 = 1000145002;
pub const STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 : i32 = 1000145003;
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO : i32 = 1000156000;
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO : i32 = 1000156001;
pub const STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO : i32 = 1000156002;
pub const STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO : i32 = 1000156003;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES : i32 = 1000156004;
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES : i32 = 1000156005;
pub const STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO : i32 = 1000085000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO : i32 = 1000071000;
pub const STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES : i32 = 1000071001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO : i32 = 1000071002;
pub const STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES : i32 = 1000071003;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES : i32 = 1000071004;
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO : i32 = 1000072000;
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO : i32 = 1000072001;
pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO : i32 = 1000072002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO : i32 = 1000112000;
pub const STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES : i32 = 1000112001;
pub const STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO : i32 = 1000113000;
pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO : i32 = 1000077000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO : i32 = 1000076000;
pub const STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES : i32 = 1000076001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES : i32 = 1000168000;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT : i32 = 1000168001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES : i32 = 1000063000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES : i32 = 49;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES : i32 = 50;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES : i32 = 51;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES : i32 = 52;
pub const STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO : i32 = 1000147000;
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 : i32 = 1000109000;
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 : i32 = 1000109001;
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 : i32 = 1000109002;
pub const STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 : i32 = 1000109003;
pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 : i32 = 1000109004;
pub const STRUCTURE_TYPE_SUBPASS_BEGIN_INFO : i32 = 1000109005;
pub const STRUCTURE_TYPE_SUBPASS_END_INFO : i32 = 1000109006;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES : i32 = 1000177000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES : i32 = 1000196000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES : i32 = 1000180000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES : i32 = 1000082000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES : i32 = 1000197000;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO : i32 = 1000161000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES : i32 = 1000161001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES : i32 = 1000161002;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO : i32 = 1000161003;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT : i32 = 1000161004;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES : i32 = 1000199000;
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE : i32 = 1000199001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES : i32 = 1000221000;
pub const STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO : i32 = 1000246000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES : i32 = 1000130000;
pub const STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO : i32 = 1000130001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES : i32 = 1000211000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES : i32 = 1000108000;
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO : i32 = 1000108001;
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO : i32 = 1000108002;
pub const STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO : i32 = 1000108003;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : i32 = 1000253000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : i32 = 1000175000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : i32 = 1000241000;
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT : i32 = 1000241001;
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT : i32 = 1000241002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES : i32 = 1000261000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES : i32 = 1000207000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES : i32 = 1000207001;
pub const STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO : i32 = 1000207002;
pub const STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO : i32 = 1000207003;
pub const STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO : i32 = 1000207004;
pub const STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO : i32 = 1000207005;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES : i32 = 1000257000;
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO : i32 = 1000244001;
pub const STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO : i32 = 1000257002;
pub const STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO : i32 = 1000257003;
pub const STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO : i32 = 1000257004;
pub const STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR : i32 = 1000001000;
pub const STRUCTURE_TYPE_PRESENT_INFO_KHR : i32 = 1000001001;
pub const STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR : i32 = 1000060007;
pub const STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR : i32 = 1000060008;
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR : i32 = 1000060009;
pub const STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR : i32 = 1000060010;
pub const STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR : i32 = 1000060011;
pub const STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR : i32 = 1000060012;
pub const STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR : i32 = 1000002000;
pub const STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR : i32 = 1000002001;
pub const STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR : i32 = 1000003000;
pub const STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR : i32 = 1000004000;
pub const STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR : i32 = 1000005000;
pub const STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR : i32 = 1000006000;
pub const STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR : i32 = 1000008000;
pub const STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR : i32 = 1000009000;
pub const STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT : i32 = 1000011000;
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD : i32 = 1000018000;
pub const STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT : i32 = 1000022000;
pub const STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT : i32 = 1000022001;
pub const STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT : i32 = 1000022002;
pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV : i32 = 1000026000;
pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV : i32 = 1000026001;
pub const STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV : i32 = 1000026002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT : i32 = 1000028000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT : i32 = 1000028001;
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT : i32 = 1000028002;
pub const STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX : i32 = 1000030000;
pub const STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX : i32 = 1000030001;
pub const STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD : i32 = 1000041000;
pub const STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP : i32 = 1000049000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV : i32 = 1000050000;
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV : i32 = 1000056000;
pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV : i32 = 1000056001;
pub const STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV : i32 = 1000057000;
pub const STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV : i32 = 1000057001;
pub const STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV : i32 = 1000058000;
pub const STRUCTURE_TYPE_VALIDATION_FLAGS_EXT : i32 = 1000061000;
pub const STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN : i32 = 1000062000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT : i32 = 1000066000;
pub const STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT : i32 = 1000067000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT : i32 = 1000067001;
pub const STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR : i32 = 1000073000;
pub const STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR : i32 = 1000073001;
pub const STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR : i32 = 1000073002;
pub const STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR : i32 = 1000073003;
pub const STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR : i32 = 1000074000;
pub const STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR : i32 = 1000074001;
pub const STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR : i32 = 1000074002;
pub const STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR : i32 = 1000075000;
pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR : i32 = 1000078000;
pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR : i32 = 1000078001;
pub const STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR : i32 = 1000078002;
pub const STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR : i32 = 1000078003;
pub const STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR : i32 = 1000079000;
pub const STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR : i32 = 1000079001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR : i32 = 1000080000;
pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : i32 = 1000081000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT : i32 = 1000081001;
pub const STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT : i32 = 1000081002;
pub const STRUCTURE_TYPE_PRESENT_REGIONS_KHR : i32 = 1000084000;
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV : i32 = 1000087000;
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT : i32 = 1000090000;
pub const STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT : i32 = 1000091000;
pub const STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT : i32 = 1000091001;
pub const STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT : i32 = 1000091002;
pub const STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT : i32 = 1000091003;
pub const STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE : i32 = 1000092000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : i32 = 1000097000;
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV : i32 = 1000098000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT : i32 = 1000099000;
pub const STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT : i32 = 1000099001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : i32 = 1000101000;
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : i32 = 1000101001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT : i32 = 1000102000;
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT : i32 = 1000102001;
pub const STRUCTURE_TYPE_HDR_METADATA_EXT : i32 = 1000105000;
pub const STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR : i32 = 1000111000;
pub const STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR : i32 = 1000114000;
pub const STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR : i32 = 1000114001;
pub const STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR : i32 = 1000114002;
pub const STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR : i32 = 1000115000;
pub const STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR : i32 = 1000115001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR : i32 = 1000116000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR : i32 = 1000116001;
pub const STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR : i32 = 1000116002;
pub const STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR : i32 = 1000116003;
pub const STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR : i32 = 1000116004;
pub const STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR : i32 = 1000116005;
pub const STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR : i32 = 1000116006;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR : i32 = 1000119000;
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR : i32 = 1000119001;
pub const STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR : i32 = 1000119002;
pub const STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR : i32 = 1000121000;
pub const STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR : i32 = 1000121001;
pub const STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR : i32 = 1000121002;
pub const STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR : i32 = 1000121003;
pub const STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR : i32 = 1000121004;
pub const STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK : i32 = 1000122000;
pub const STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK : i32 = 1000123000;
pub const STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT : i32 = 1000128000;
pub const STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT : i32 = 1000128001;
pub const STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT : i32 = 1000128002;
pub const STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT : i32 = 1000128003;
pub const STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT : i32 = 1000128004;
pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID : i32 = 1000129000;
pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID : i32 = 1000129001;
pub const STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID : i32 = 1000129002;
pub const STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID : i32 = 1000129003;
pub const STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID : i32 = 1000129004;
pub const STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID : i32 = 1000129005;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT : i32 = 1000138000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT : i32 = 1000138001;
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT : i32 = 1000138002;
pub const STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT : i32 = 1000138003;
pub const STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT : i32 = 1000143000;
pub const STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT : i32 = 1000143001;
pub const STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT : i32 = 1000143002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT : i32 = 1000143003;
pub const STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT : i32 = 1000143004;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : i32 = 1000148000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : i32 = 1000148001;
pub const STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT : i32 = 1000148002;
pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV : i32 = 1000149000;
pub const STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR : i32 = 1000165006;
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR : i32 = 1000165007;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR : i32 = 1000150000;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_GEOMETRY_TYPE_INFO_KHR : i32 = 1000150001;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR : i32 = 1000150002;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR : i32 = 1000150003;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR : i32 = 1000150004;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR : i32 = 1000150005;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR : i32 = 1000150006;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_KHR : i32 = 1000150008;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_KHR : i32 = 1000150009;
pub const STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR : i32 = 1000150010;
pub const STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR : i32 = 1000150011;
pub const STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR : i32 = 1000150012;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_FEATURES_KHR : i32 = 1000150013;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_KHR : i32 = 1000150014;
pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR : i32 = 1000150015;
pub const STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR : i32 = 1000150016;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR : i32 = 1000150017;
pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR : i32 = 1000150018;
pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV : i32 = 1000152000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV : i32 = 1000154000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV : i32 = 1000154001;
pub const STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT : i32 = 1000158000;
pub const STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT : i32 = 1000158001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT : i32 = 1000158002;
pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT : i32 = 1000158003;
pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT : i32 = 1000158004;
pub const STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT : i32 = 1000158005;
pub const STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT : i32 = 1000160000;
pub const STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT : i32 = 1000160001;
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : i32 = 1000164000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV : i32 = 1000164001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV : i32 = 1000164002;
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : i32 = 1000164005;
pub const STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV : i32 = 1000165000;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV : i32 = 1000165001;
pub const STRUCTURE_TYPE_GEOMETRY_NV : i32 = 1000165003;
pub const STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV : i32 = 1000165004;
pub const STRUCTURE_TYPE_GEOMETRY_AABB_NV : i32 = 1000165005;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV : i32 = 1000165008;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV : i32 = 1000165009;
pub const STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV : i32 = 1000165011;
pub const STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV : i32 = 1000165012;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : i32 = 1000166000;
pub const STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : i32 = 1000166001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT : i32 = 1000170000;
pub const STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT : i32 = 1000170001;
pub const STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT : i32 = 1000174000;
pub const STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT : i32 = 1000178000;
pub const STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT : i32 = 1000178001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT : i32 = 1000178002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR : i32 = 1000181000;
pub const STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD : i32 = 1000183000;
pub const STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT : i32 = 1000184000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD : i32 = 1000185000;
pub const STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD : i32 = 1000189000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : i32 = 1000190000;
pub const STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT : i32 = 1000190001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : i32 = 1000190002;
pub const STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP : i32 = 1000191000;
pub const STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT : i32 = 1000192000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : i32 = 1000201000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV : i32 = 1000202000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV : i32 = 1000202001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : i32 = 1000203000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV : i32 = 1000204000;
pub const STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : i32 = 1000205000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV : i32 = 1000205002;
pub const STRUCTURE_TYPE_CHECKPOINT_DATA_NV : i32 = 1000206000;
pub const STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV : i32 = 1000206001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL : i32 = 1000209000;
pub const STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL : i32 = 1000210000;
pub const STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL : i32 = 1000210001;
pub const STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL : i32 = 1000210002;
pub const STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL : i32 = 1000210003;
pub const STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL : i32 = 1000210004;
pub const STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL : i32 = 1000210005;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT : i32 = 1000212000;
pub const STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD : i32 = 1000213000;
pub const STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD : i32 = 1000213001;
pub const STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA : i32 = 1000214000;
pub const STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT : i32 = 1000217000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT : i32 = 1000218000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT : i32 = 1000218001;
pub const STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT : i32 = 1000218002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT : i32 = 1000225000;
pub const STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT : i32 = 1000225001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT : i32 = 1000225002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD : i32 = 1000227000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD : i32 = 1000229000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT : i32 = 1000237000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT : i32 = 1000238000;
pub const STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT : i32 = 1000238001;
pub const STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR : i32 = 1000239000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : i32 = 1000240000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT : i32 = 1000244000;
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT : i32 = 1000244002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT : i32 = 1000245000;
pub const STRUCTURE_TYPE_VALIDATION_FEATURES_EXT : i32 = 1000247000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV : i32 = 1000249000;
pub const STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV : i32 = 1000249001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV : i32 = 1000249002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV : i32 = 1000250000;
pub const STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV : i32 = 1000250001;
pub const STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV : i32 = 1000250002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : i32 = 1000251000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT : i32 = 1000252000;
pub const STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT : i32 = 1000255000;
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT : i32 = 1000255002;
pub const STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT : i32 = 1000255001;
pub const STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT : i32 = 1000256000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT : i32 = 1000259000;
pub const STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT : i32 = 1000259001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT : i32 = 1000259002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT : i32 = 1000265000;
pub const STRUCTURE_TYPE_DEFERRED_OPERATION_INFO_KHR : i32 = 1000268000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR : i32 = 1000269000;
pub const STRUCTURE_TYPE_PIPELINE_INFO_KHR : i32 = 1000269001;
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR : i32 = 1000269002;
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR : i32 = 1000269003;
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR : i32 = 1000269004;
pub const STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR : i32 = 1000269005;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : i32 = 1000276000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV : i32 = 1000277000;
pub const STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV : i32 = 1000277001;
pub const STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV : i32 = 1000277002;
pub const STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV : i32 = 1000277003;
pub const STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV : i32 = 1000277004;
pub const STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV : i32 = 1000277005;
pub const STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV : i32 = 1000277006;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV : i32 = 1000277007;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT : i32 = 1000281000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT : i32 = 1000281001;
pub const STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM : i32 = 1000282000;
pub const STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM : i32 = 1000282001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT : i32 = 1000286000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT : i32 = 1000286001;
pub const STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT : i32 = 1000287000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT : i32 = 1000287001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT : i32 = 1000287002;
pub const STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR : i32 = 1000290000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT : i32 = 1000295000;
pub const STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT : i32 = 1000295001;
pub const STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT : i32 = 1000295002;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT : i32 = 1000297000;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV : i32 = 1000300000;
pub const STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV : i32 = 1000300001;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
pub const STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT : i32 = STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
pub const STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
pub const STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR : i32 = STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
pub const STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR : i32 = STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
pub const STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR : i32 = STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
pub const STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR : i32 = STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
pub const STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR : i32 = STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
pub const STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR : i32 = STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
pub const STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR : i32 = STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
pub const STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR : i32 = STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
pub const STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR : i32 = STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR : i32 = STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR : i32 = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
pub const STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
pub const STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
pub const STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
pub const STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
pub const STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR : i32 = STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
pub const STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
pub const STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
pub const STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
pub const STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT : i32 = STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
pub const STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR : i32 = STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
pub const STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR : i32 = STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR : i32 = STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR : i32 = STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR : i32 = STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
pub const STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR : i32 = STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
pub const STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR : i32 = STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
pub const STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR : i32 = STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
pub const STRUCTURE_TYPE_SUBPASS_END_INFO_KHR : i32 = STRUCTURE_TYPE_SUBPASS_END_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
pub const STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
pub const STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
pub const STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
pub const STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
pub const STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR;
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR : i32 = STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
pub const STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR : i32 = STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
pub const STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT : i32 = STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
pub const STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR : i32 = STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
pub const STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR : i32 = STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
pub const STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR : i32 = STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
pub const STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR : i32 = STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
pub const STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR : i32 = STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
pub const STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR : i32 = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
pub const STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR : i32 = STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
pub const STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR : i32 = STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
pub const STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
pub const STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR : i32 = STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
pub const STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR : i32 = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT : i32 = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : i32 = STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : i32 = STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
pub const STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV : i32 = STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR;
pub const STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV : i32 = STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
pub const STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR : i32 = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
pub const STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR : i32 = STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
pub const STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
pub const STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR : i32 = STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
pub const STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR : i32 = STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
pub const STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR : i32 = STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
pub const STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL : i32 = STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
pub const STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR : i32 = STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
pub const STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR : i32 = STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT : i32 = STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
pub const STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT : i32 = STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
pub const STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR : i32 = STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
pub const STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR : i32 = STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
pub const STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR : i32 = STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
pub const STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR : i32 = STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
pub const STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT : i32 = STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
pub const STRUCTURE_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SystemAllocationScope = i32;
pub const SYSTEM_ALLOCATION_SCOPE_COMMAND : i32 = 0;
pub const SYSTEM_ALLOCATION_SCOPE_OBJECT : i32 = 1;
pub const SYSTEM_ALLOCATION_SCOPE_CACHE : i32 = 2;
pub const SYSTEM_ALLOCATION_SCOPE_DEVICE : i32 = 3;
pub const SYSTEM_ALLOCATION_SCOPE_INSTANCE : i32 = 4;
pub const SYSTEM_ALLOCATION_SCOPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type InternalAllocationType = i32;
pub const INTERNAL_ALLOCATION_TYPE_EXECUTABLE : i32 = 0;
pub const INTERNAL_ALLOCATION_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type Format = i32;
pub const FORMAT_UNDEFINED : i32 = 0;
pub const FORMAT_R4G4_UNORM_PACK8 : i32 = 1;
pub const FORMAT_R4G4B4A4_UNORM_PACK16 : i32 = 2;
pub const FORMAT_B4G4R4A4_UNORM_PACK16 : i32 = 3;
pub const FORMAT_R5G6B5_UNORM_PACK16 : i32 = 4;
pub const FORMAT_B5G6R5_UNORM_PACK16 : i32 = 5;
pub const FORMAT_R5G5B5A1_UNORM_PACK16 : i32 = 6;
pub const FORMAT_B5G5R5A1_UNORM_PACK16 : i32 = 7;
pub const FORMAT_A1R5G5B5_UNORM_PACK16 : i32 = 8;
pub const FORMAT_R8_UNORM : i32 = 9;
pub const FORMAT_R8_SNORM : i32 = 10;
pub const FORMAT_R8_USCALED : i32 = 11;
pub const FORMAT_R8_SSCALED : i32 = 12;
pub const FORMAT_R8_UINT : i32 = 13;
pub const FORMAT_R8_SINT : i32 = 14;
pub const FORMAT_R8_SRGB : i32 = 15;
pub const FORMAT_R8G8_UNORM : i32 = 16;
pub const FORMAT_R8G8_SNORM : i32 = 17;
pub const FORMAT_R8G8_USCALED : i32 = 18;
pub const FORMAT_R8G8_SSCALED : i32 = 19;
pub const FORMAT_R8G8_UINT : i32 = 20;
pub const FORMAT_R8G8_SINT : i32 = 21;
pub const FORMAT_R8G8_SRGB : i32 = 22;
pub const FORMAT_R8G8B8_UNORM : i32 = 23;
pub const FORMAT_R8G8B8_SNORM : i32 = 24;
pub const FORMAT_R8G8B8_USCALED : i32 = 25;
pub const FORMAT_R8G8B8_SSCALED : i32 = 26;
pub const FORMAT_R8G8B8_UINT : i32 = 27;
pub const FORMAT_R8G8B8_SINT : i32 = 28;
pub const FORMAT_R8G8B8_SRGB : i32 = 29;
pub const FORMAT_B8G8R8_UNORM : i32 = 30;
pub const FORMAT_B8G8R8_SNORM : i32 = 31;
pub const FORMAT_B8G8R8_USCALED : i32 = 32;
pub const FORMAT_B8G8R8_SSCALED : i32 = 33;
pub const FORMAT_B8G8R8_UINT : i32 = 34;
pub const FORMAT_B8G8R8_SINT : i32 = 35;
pub const FORMAT_B8G8R8_SRGB : i32 = 36;
pub const FORMAT_R8G8B8A8_UNORM : i32 = 37;
pub const FORMAT_R8G8B8A8_SNORM : i32 = 38;
pub const FORMAT_R8G8B8A8_USCALED : i32 = 39;
pub const FORMAT_R8G8B8A8_SSCALED : i32 = 40;
pub const FORMAT_R8G8B8A8_UINT : i32 = 41;
pub const FORMAT_R8G8B8A8_SINT : i32 = 42;
pub const FORMAT_R8G8B8A8_SRGB : i32 = 43;
pub const FORMAT_B8G8R8A8_UNORM : i32 = 44;
pub const FORMAT_B8G8R8A8_SNORM : i32 = 45;
pub const FORMAT_B8G8R8A8_USCALED : i32 = 46;
pub const FORMAT_B8G8R8A8_SSCALED : i32 = 47;
pub const FORMAT_B8G8R8A8_UINT : i32 = 48;
pub const FORMAT_B8G8R8A8_SINT : i32 = 49;
pub const FORMAT_B8G8R8A8_SRGB : i32 = 50;
pub const FORMAT_A8B8G8R8_UNORM_PACK32 : i32 = 51;
pub const FORMAT_A8B8G8R8_SNORM_PACK32 : i32 = 52;
pub const FORMAT_A8B8G8R8_USCALED_PACK32 : i32 = 53;
pub const FORMAT_A8B8G8R8_SSCALED_PACK32 : i32 = 54;
pub const FORMAT_A8B8G8R8_UINT_PACK32 : i32 = 55;
pub const FORMAT_A8B8G8R8_SINT_PACK32 : i32 = 56;
pub const FORMAT_A8B8G8R8_SRGB_PACK32 : i32 = 57;
pub const FORMAT_A2R10G10B10_UNORM_PACK32 : i32 = 58;
pub const FORMAT_A2R10G10B10_SNORM_PACK32 : i32 = 59;
pub const FORMAT_A2R10G10B10_USCALED_PACK32 : i32 = 60;
pub const FORMAT_A2R10G10B10_SSCALED_PACK32 : i32 = 61;
pub const FORMAT_A2R10G10B10_UINT_PACK32 : i32 = 62;
pub const FORMAT_A2R10G10B10_SINT_PACK32 : i32 = 63;
pub const FORMAT_A2B10G10R10_UNORM_PACK32 : i32 = 64;
pub const FORMAT_A2B10G10R10_SNORM_PACK32 : i32 = 65;
pub const FORMAT_A2B10G10R10_USCALED_PACK32 : i32 = 66;
pub const FORMAT_A2B10G10R10_SSCALED_PACK32 : i32 = 67;
pub const FORMAT_A2B10G10R10_UINT_PACK32 : i32 = 68;
pub const FORMAT_A2B10G10R10_SINT_PACK32 : i32 = 69;
pub const FORMAT_R16_UNORM : i32 = 70;
pub const FORMAT_R16_SNORM : i32 = 71;
pub const FORMAT_R16_USCALED : i32 = 72;
pub const FORMAT_R16_SSCALED : i32 = 73;
pub const FORMAT_R16_UINT : i32 = 74;
pub const FORMAT_R16_SINT : i32 = 75;
pub const FORMAT_R16_SFLOAT : i32 = 76;
pub const FORMAT_R16G16_UNORM : i32 = 77;
pub const FORMAT_R16G16_SNORM : i32 = 78;
pub const FORMAT_R16G16_USCALED : i32 = 79;
pub const FORMAT_R16G16_SSCALED : i32 = 80;
pub const FORMAT_R16G16_UINT : i32 = 81;
pub const FORMAT_R16G16_SINT : i32 = 82;
pub const FORMAT_R16G16_SFLOAT : i32 = 83;
pub const FORMAT_R16G16B16_UNORM : i32 = 84;
pub const FORMAT_R16G16B16_SNORM : i32 = 85;
pub const FORMAT_R16G16B16_USCALED : i32 = 86;
pub const FORMAT_R16G16B16_SSCALED : i32 = 87;
pub const FORMAT_R16G16B16_UINT : i32 = 88;
pub const FORMAT_R16G16B16_SINT : i32 = 89;
pub const FORMAT_R16G16B16_SFLOAT : i32 = 90;
pub const FORMAT_R16G16B16A16_UNORM : i32 = 91;
pub const FORMAT_R16G16B16A16_SNORM : i32 = 92;
pub const FORMAT_R16G16B16A16_USCALED : i32 = 93;
pub const FORMAT_R16G16B16A16_SSCALED : i32 = 94;
pub const FORMAT_R16G16B16A16_UINT : i32 = 95;
pub const FORMAT_R16G16B16A16_SINT : i32 = 96;
pub const FORMAT_R16G16B16A16_SFLOAT : i32 = 97;
pub const FORMAT_R32_UINT : i32 = 98;
pub const FORMAT_R32_SINT : i32 = 99;
pub const FORMAT_R32_SFLOAT : i32 = 100;
pub const FORMAT_R32G32_UINT : i32 = 101;
pub const FORMAT_R32G32_SINT : i32 = 102;
pub const FORMAT_R32G32_SFLOAT : i32 = 103;
pub const FORMAT_R32G32B32_UINT : i32 = 104;
pub const FORMAT_R32G32B32_SINT : i32 = 105;
pub const FORMAT_R32G32B32_SFLOAT : i32 = 106;
pub const FORMAT_R32G32B32A32_UINT : i32 = 107;
pub const FORMAT_R32G32B32A32_SINT : i32 = 108;
pub const FORMAT_R32G32B32A32_SFLOAT : i32 = 109;
pub const FORMAT_R64_UINT : i32 = 110;
pub const FORMAT_R64_SINT : i32 = 111;
pub const FORMAT_R64_SFLOAT : i32 = 112;
pub const FORMAT_R64G64_UINT : i32 = 113;
pub const FORMAT_R64G64_SINT : i32 = 114;
pub const FORMAT_R64G64_SFLOAT : i32 = 115;
pub const FORMAT_R64G64B64_UINT : i32 = 116;
pub const FORMAT_R64G64B64_SINT : i32 = 117;
pub const FORMAT_R64G64B64_SFLOAT : i32 = 118;
pub const FORMAT_R64G64B64A64_UINT : i32 = 119;
pub const FORMAT_R64G64B64A64_SINT : i32 = 120;
pub const FORMAT_R64G64B64A64_SFLOAT : i32 = 121;
pub const FORMAT_B10G11R11_UFLOAT_PACK32 : i32 = 122;
pub const FORMAT_E5B9G9R9_UFLOAT_PACK32 : i32 = 123;
pub const FORMAT_D16_UNORM : i32 = 124;
pub const FORMAT_X8_D24_UNORM_PACK32 : i32 = 125;
pub const FORMAT_D32_SFLOAT : i32 = 126;
pub const FORMAT_S8_UINT : i32 = 127;
pub const FORMAT_D16_UNORM_S8_UINT : i32 = 128;
pub const FORMAT_D24_UNORM_S8_UINT : i32 = 129;
pub const FORMAT_D32_SFLOAT_S8_UINT : i32 = 130;
pub const FORMAT_BC1_RGB_UNORM_BLOCK : i32 = 131;
pub const FORMAT_BC1_RGB_SRGB_BLOCK : i32 = 132;
pub const FORMAT_BC1_RGBA_UNORM_BLOCK : i32 = 133;
pub const FORMAT_BC1_RGBA_SRGB_BLOCK : i32 = 134;
pub const FORMAT_BC2_UNORM_BLOCK : i32 = 135;
pub const FORMAT_BC2_SRGB_BLOCK : i32 = 136;
pub const FORMAT_BC3_UNORM_BLOCK : i32 = 137;
pub const FORMAT_BC3_SRGB_BLOCK : i32 = 138;
pub const FORMAT_BC4_UNORM_BLOCK : i32 = 139;
pub const FORMAT_BC4_SNORM_BLOCK : i32 = 140;
pub const FORMAT_BC5_UNORM_BLOCK : i32 = 141;
pub const FORMAT_BC5_SNORM_BLOCK : i32 = 142;
pub const FORMAT_BC6H_UFLOAT_BLOCK : i32 = 143;
pub const FORMAT_BC6H_SFLOAT_BLOCK : i32 = 144;
pub const FORMAT_BC7_UNORM_BLOCK : i32 = 145;
pub const FORMAT_BC7_SRGB_BLOCK : i32 = 146;
pub const FORMAT_ETC2_R8G8B8_UNORM_BLOCK : i32 = 147;
pub const FORMAT_ETC2_R8G8B8_SRGB_BLOCK : i32 = 148;
pub const FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK : i32 = 149;
pub const FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK : i32 = 150;
pub const FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK : i32 = 151;
pub const FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK : i32 = 152;
pub const FORMAT_EAC_R11_UNORM_BLOCK : i32 = 153;
pub const FORMAT_EAC_R11_SNORM_BLOCK : i32 = 154;
pub const FORMAT_EAC_R11G11_UNORM_BLOCK : i32 = 155;
pub const FORMAT_EAC_R11G11_SNORM_BLOCK : i32 = 156;
pub const FORMAT_ASTC_4x4_UNORM_BLOCK : i32 = 157;
pub const FORMAT_ASTC_4x4_SRGB_BLOCK : i32 = 158;
pub const FORMAT_ASTC_5x4_UNORM_BLOCK : i32 = 159;
pub const FORMAT_ASTC_5x4_SRGB_BLOCK : i32 = 160;
pub const FORMAT_ASTC_5x5_UNORM_BLOCK : i32 = 161;
pub const FORMAT_ASTC_5x5_SRGB_BLOCK : i32 = 162;
pub const FORMAT_ASTC_6x5_UNORM_BLOCK : i32 = 163;
pub const FORMAT_ASTC_6x5_SRGB_BLOCK : i32 = 164;
pub const FORMAT_ASTC_6x6_UNORM_BLOCK : i32 = 165;
pub const FORMAT_ASTC_6x6_SRGB_BLOCK : i32 = 166;
pub const FORMAT_ASTC_8x5_UNORM_BLOCK : i32 = 167;
pub const FORMAT_ASTC_8x5_SRGB_BLOCK : i32 = 168;
pub const FORMAT_ASTC_8x6_UNORM_BLOCK : i32 = 169;
pub const FORMAT_ASTC_8x6_SRGB_BLOCK : i32 = 170;
pub const FORMAT_ASTC_8x8_UNORM_BLOCK : i32 = 171;
pub const FORMAT_ASTC_8x8_SRGB_BLOCK : i32 = 172;
pub const FORMAT_ASTC_10x5_UNORM_BLOCK : i32 = 173;
pub const FORMAT_ASTC_10x5_SRGB_BLOCK : i32 = 174;
pub const FORMAT_ASTC_10x6_UNORM_BLOCK : i32 = 175;
pub const FORMAT_ASTC_10x6_SRGB_BLOCK : i32 = 176;
pub const FORMAT_ASTC_10x8_UNORM_BLOCK : i32 = 177;
pub const FORMAT_ASTC_10x8_SRGB_BLOCK : i32 = 178;
pub const FORMAT_ASTC_10x10_UNORM_BLOCK : i32 = 179;
pub const FORMAT_ASTC_10x10_SRGB_BLOCK : i32 = 180;
pub const FORMAT_ASTC_12x10_UNORM_BLOCK : i32 = 181;
pub const FORMAT_ASTC_12x10_SRGB_BLOCK : i32 = 182;
pub const FORMAT_ASTC_12x12_UNORM_BLOCK : i32 = 183;
pub const FORMAT_ASTC_12x12_SRGB_BLOCK : i32 = 184;
pub const FORMAT_G8B8G8R8_422_UNORM : i32 = 1000156000;
pub const FORMAT_B8G8R8G8_422_UNORM : i32 = 1000156001;
pub const FORMAT_G8_B8_R8_3PLANE_420_UNORM : i32 = 1000156002;
pub const FORMAT_G8_B8R8_2PLANE_420_UNORM : i32 = 1000156003;
pub const FORMAT_G8_B8_R8_3PLANE_422_UNORM : i32 = 1000156004;
pub const FORMAT_G8_B8R8_2PLANE_422_UNORM : i32 = 1000156005;
pub const FORMAT_G8_B8_R8_3PLANE_444_UNORM : i32 = 1000156006;
pub const FORMAT_R10X6_UNORM_PACK16 : i32 = 1000156007;
pub const FORMAT_R10X6G10X6_UNORM_2PACK16 : i32 = 1000156008;
pub const FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 : i32 = 1000156009;
pub const FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 : i32 = 1000156010;
pub const FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 : i32 = 1000156011;
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 : i32 = 1000156012;
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 : i32 = 1000156013;
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 : i32 = 1000156014;
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 : i32 = 1000156015;
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 : i32 = 1000156016;
pub const FORMAT_R12X4_UNORM_PACK16 : i32 = 1000156017;
pub const FORMAT_R12X4G12X4_UNORM_2PACK16 : i32 = 1000156018;
pub const FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 : i32 = 1000156019;
pub const FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 : i32 = 1000156020;
pub const FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 : i32 = 1000156021;
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 : i32 = 1000156022;
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 : i32 = 1000156023;
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 : i32 = 1000156024;
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 : i32 = 1000156025;
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 : i32 = 1000156026;
pub const FORMAT_G16B16G16R16_422_UNORM : i32 = 1000156027;
pub const FORMAT_B16G16R16G16_422_UNORM : i32 = 1000156028;
pub const FORMAT_G16_B16_R16_3PLANE_420_UNORM : i32 = 1000156029;
pub const FORMAT_G16_B16R16_2PLANE_420_UNORM : i32 = 1000156030;
pub const FORMAT_G16_B16_R16_3PLANE_422_UNORM : i32 = 1000156031;
pub const FORMAT_G16_B16R16_2PLANE_422_UNORM : i32 = 1000156032;
pub const FORMAT_G16_B16_R16_3PLANE_444_UNORM : i32 = 1000156033;
pub const FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG : i32 = 1000054000;
pub const FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG : i32 = 1000054001;
pub const FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG : i32 = 1000054002;
pub const FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG : i32 = 1000054003;
pub const FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG : i32 = 1000054004;
pub const FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG : i32 = 1000054005;
pub const FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG : i32 = 1000054006;
pub const FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG : i32 = 1000054007;
pub const FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT : i32 = 1000066000;
pub const FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT : i32 = 1000066001;
pub const FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT : i32 = 1000066002;
pub const FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT : i32 = 1000066003;
pub const FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT : i32 = 1000066004;
pub const FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT : i32 = 1000066005;
pub const FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT : i32 = 1000066006;
pub const FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT : i32 = 1000066007;
pub const FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT : i32 = 1000066008;
pub const FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT : i32 = 1000066009;
pub const FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT : i32 = 1000066010;
pub const FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT : i32 = 1000066011;
pub const FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT : i32 = 1000066012;
pub const FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT : i32 = 1000066013;
pub const FORMAT_G8B8G8R8_422_UNORM_KHR : i32 = FORMAT_G8B8G8R8_422_UNORM;
pub const FORMAT_B8G8R8G8_422_UNORM_KHR : i32 = FORMAT_B8G8R8G8_422_UNORM;
pub const FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR : i32 = FORMAT_G8_B8_R8_3PLANE_420_UNORM;
pub const FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR : i32 = FORMAT_G8_B8R8_2PLANE_420_UNORM;
pub const FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR : i32 = FORMAT_G8_B8_R8_3PLANE_422_UNORM;
pub const FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR : i32 = FORMAT_G8_B8R8_2PLANE_422_UNORM;
pub const FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR : i32 = FORMAT_G8_B8_R8_3PLANE_444_UNORM;
pub const FORMAT_R10X6_UNORM_PACK16_KHR : i32 = FORMAT_R10X6_UNORM_PACK16;
pub const FORMAT_R10X6G10X6_UNORM_2PACK16_KHR : i32 = FORMAT_R10X6G10X6_UNORM_2PACK16;
pub const FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR : i32 = FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
pub const FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR : i32 = FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
pub const FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR : i32 = FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR : i32 = FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR : i32 = FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR : i32 = FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
pub const FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR : i32 = FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
pub const FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR : i32 = FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
pub const FORMAT_R12X4_UNORM_PACK16_KHR : i32 = FORMAT_R12X4_UNORM_PACK16;
pub const FORMAT_R12X4G12X4_UNORM_2PACK16_KHR : i32 = FORMAT_R12X4G12X4_UNORM_2PACK16;
pub const FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR : i32 = FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
pub const FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR : i32 = FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
pub const FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR : i32 = FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR : i32 = FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR : i32 = FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR : i32 = FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
pub const FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR : i32 = FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
pub const FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR : i32 = FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
pub const FORMAT_G16B16G16R16_422_UNORM_KHR : i32 = FORMAT_G16B16G16R16_422_UNORM;
pub const FORMAT_B16G16R16G16_422_UNORM_KHR : i32 = FORMAT_B16G16R16G16_422_UNORM;
pub const FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR : i32 = FORMAT_G16_B16_R16_3PLANE_420_UNORM;
pub const FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR : i32 = FORMAT_G16_B16R16_2PLANE_420_UNORM;
pub const FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR : i32 = FORMAT_G16_B16_R16_3PLANE_422_UNORM;
pub const FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR : i32 = FORMAT_G16_B16R16_2PLANE_422_UNORM;
pub const FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR : i32 = FORMAT_G16_B16_R16_3PLANE_444_UNORM;
pub const FORMAT_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageType = i32;
pub const IMAGE_TYPE_1D : i32 = 0;
pub const IMAGE_TYPE_2D : i32 = 1;
pub const IMAGE_TYPE_3D : i32 = 2;
pub const IMAGE_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageTiling = i32;
pub const IMAGE_TILING_OPTIMAL : i32 = 0;
pub const IMAGE_TILING_LINEAR : i32 = 1;
pub const IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT : i32 = 1000158000;
pub const IMAGE_TILING_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PhysicalDeviceType = i32;
pub const PHYSICAL_DEVICE_TYPE_OTHER : i32 = 0;
pub const PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU : i32 = 1;
pub const PHYSICAL_DEVICE_TYPE_DISCRETE_GPU : i32 = 2;
pub const PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU : i32 = 3;
pub const PHYSICAL_DEVICE_TYPE_CPU : i32 = 4;
pub const PHYSICAL_DEVICE_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type QueryType = i32;
pub const QUERY_TYPE_OCCLUSION : i32 = 0;
pub const QUERY_TYPE_PIPELINE_STATISTICS : i32 = 1;
pub const QUERY_TYPE_TIMESTAMP : i32 = 2;
pub const QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT : i32 = 1000028004;
pub const QUERY_TYPE_PERFORMANCE_QUERY_KHR : i32 = 1000116000;
pub const QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR : i32 = 1000165000;
pub const QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR : i32 = 1000150000;
pub const QUERY_TYPE_PERFORMANCE_QUERY_INTEL : i32 = 1000210000;
pub const QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV : i32 = QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR;
pub const QUERY_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SharingMode = i32;
pub const SHARING_MODE_EXCLUSIVE : i32 = 0;
pub const SHARING_MODE_CONCURRENT : i32 = 1;
pub const SHARING_MODE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageLayout = i32;
pub const IMAGE_LAYOUT_UNDEFINED : i32 = 0;
pub const IMAGE_LAYOUT_GENERAL : i32 = 1;
pub const IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL : i32 = 2;
pub const IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL : i32 = 3;
pub const IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL : i32 = 4;
pub const IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL : i32 = 5;
pub const IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL : i32 = 6;
pub const IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL : i32 = 7;
pub const IMAGE_LAYOUT_PREINITIALIZED : i32 = 8;
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL : i32 = 1000117000;
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL : i32 = 1000117001;
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL : i32 = 1000241000;
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL : i32 = 1000241001;
pub const IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL : i32 = 1000241002;
pub const IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL : i32 = 1000241003;
pub const IMAGE_LAYOUT_PRESENT_SRC_KHR : i32 = 1000001002;
pub const IMAGE_LAYOUT_SHARED_PRESENT_KHR : i32 = 1000111000;
pub const IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV : i32 = 1000164003;
pub const IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT : i32 = 1000218000;
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR : i32 = IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR : i32 = IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
pub const IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR : i32 = IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
pub const IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR : i32 = IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
pub const IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR : i32 = IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
pub const IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR : i32 = IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
pub const IMAGE_LAYOUT_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageViewType = i32;
pub const IMAGE_VIEW_TYPE_1D : i32 = 0;
pub const IMAGE_VIEW_TYPE_2D : i32 = 1;
pub const IMAGE_VIEW_TYPE_3D : i32 = 2;
pub const IMAGE_VIEW_TYPE_CUBE : i32 = 3;
pub const IMAGE_VIEW_TYPE_1D_ARRAY : i32 = 4;
pub const IMAGE_VIEW_TYPE_2D_ARRAY : i32 = 5;
pub const IMAGE_VIEW_TYPE_CUBE_ARRAY : i32 = 6;
pub const IMAGE_VIEW_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ComponentSwizzle = i32;
pub const COMPONENT_SWIZZLE_IDENTITY : i32 = 0;
pub const COMPONENT_SWIZZLE_ZERO : i32 = 1;
pub const COMPONENT_SWIZZLE_ONE : i32 = 2;
pub const COMPONENT_SWIZZLE_R : i32 = 3;
pub const COMPONENT_SWIZZLE_G : i32 = 4;
pub const COMPONENT_SWIZZLE_B : i32 = 5;
pub const COMPONENT_SWIZZLE_A : i32 = 6;
pub const COMPONENT_SWIZZLE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type VertexInputRate = i32;
pub const VERTEX_INPUT_RATE_VERTEX : i32 = 0;
pub const VERTEX_INPUT_RATE_INSTANCE : i32 = 1;
pub const VERTEX_INPUT_RATE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PrimitiveTopology = i32;
pub const PRIMITIVE_TOPOLOGY_POINT_LIST : i32 = 0;
pub const PRIMITIVE_TOPOLOGY_LINE_LIST : i32 = 1;
pub const PRIMITIVE_TOPOLOGY_LINE_STRIP : i32 = 2;
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_LIST : i32 = 3;
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP : i32 = 4;
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_FAN : i32 = 5;
pub const PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY : i32 = 6;
pub const PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY : i32 = 7;
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY : i32 = 8;
pub const PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY : i32 = 9;
pub const PRIMITIVE_TOPOLOGY_PATCH_LIST : i32 = 10;
pub const PRIMITIVE_TOPOLOGY_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PolygonMode = i32;
pub const POLYGON_MODE_FILL : i32 = 0;
pub const POLYGON_MODE_LINE : i32 = 1;
pub const POLYGON_MODE_POINT : i32 = 2;
pub const POLYGON_MODE_FILL_RECTANGLE_NV : i32 = 1000153000;
pub const POLYGON_MODE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type FrontFace = i32;
pub const FRONT_FACE_COUNTER_CLOCKWISE : i32 = 0;
pub const FRONT_FACE_CLOCKWISE : i32 = 1;
pub const FRONT_FACE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CompareOp = i32;
pub const COMPARE_OP_NEVER : i32 = 0;
pub const COMPARE_OP_LESS : i32 = 1;
pub const COMPARE_OP_EQUAL : i32 = 2;
pub const COMPARE_OP_LESS_OR_EQUAL : i32 = 3;
pub const COMPARE_OP_GREATER : i32 = 4;
pub const COMPARE_OP_NOT_EQUAL : i32 = 5;
pub const COMPARE_OP_GREATER_OR_EQUAL : i32 = 6;
pub const COMPARE_OP_ALWAYS : i32 = 7;
pub const COMPARE_OP_MAX_ENUM : i32 = 0x7FFFFFF;
pub type StencilOp = i32;
pub const STENCIL_OP_KEEP : i32 = 0;
pub const STENCIL_OP_ZERO : i32 = 1;
pub const STENCIL_OP_REPLACE : i32 = 2;
pub const STENCIL_OP_INCREMENT_AND_CLAMP : i32 = 3;
pub const STENCIL_OP_DECREMENT_AND_CLAMP : i32 = 4;
pub const STENCIL_OP_INVERT : i32 = 5;
pub const STENCIL_OP_INCREMENT_AND_WRAP : i32 = 6;
pub const STENCIL_OP_DECREMENT_AND_WRAP : i32 = 7;
pub const STENCIL_OP_MAX_ENUM : i32 = 0x7FFFFFF;
pub type LogicOp = i32;
pub const LOGIC_OP_CLEAR : i32 = 0;
pub const LOGIC_OP_AND : i32 = 1;
pub const LOGIC_OP_AND_REVERSE : i32 = 2;
pub const LOGIC_OP_COPY : i32 = 3;
pub const LOGIC_OP_AND_INVERTED : i32 = 4;
pub const LOGIC_OP_NO_OP : i32 = 5;
pub const LOGIC_OP_XOR : i32 = 6;
pub const LOGIC_OP_OR : i32 = 7;
pub const LOGIC_OP_NOR : i32 = 8;
pub const LOGIC_OP_EQUIVALENT : i32 = 9;
pub const LOGIC_OP_INVERT : i32 = 10;
pub const LOGIC_OP_OR_REVERSE : i32 = 11;
pub const LOGIC_OP_COPY_INVERTED : i32 = 12;
pub const LOGIC_OP_OR_INVERTED : i32 = 13;
pub const LOGIC_OP_NAND : i32 = 14;
pub const LOGIC_OP_SET : i32 = 15;
pub const LOGIC_OP_MAX_ENUM : i32 = 0x7FFFFFF;
pub type BlendFactor = i32;
pub const BLEND_FACTOR_ZERO : i32 = 0;
pub const BLEND_FACTOR_ONE : i32 = 1;
pub const BLEND_FACTOR_SRC_COLOR : i32 = 2;
pub const BLEND_FACTOR_ONE_MINUS_SRC_COLOR : i32 = 3;
pub const BLEND_FACTOR_DST_COLOR : i32 = 4;
pub const BLEND_FACTOR_ONE_MINUS_DST_COLOR : i32 = 5;
pub const BLEND_FACTOR_SRC_ALPHA : i32 = 6;
pub const BLEND_FACTOR_ONE_MINUS_SRC_ALPHA : i32 = 7;
pub const BLEND_FACTOR_DST_ALPHA : i32 = 8;
pub const BLEND_FACTOR_ONE_MINUS_DST_ALPHA : i32 = 9;
pub const BLEND_FACTOR_CONSTANT_COLOR : i32 = 10;
pub const BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR : i32 = 11;
pub const BLEND_FACTOR_CONSTANT_ALPHA : i32 = 12;
pub const BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA : i32 = 13;
pub const BLEND_FACTOR_SRC_ALPHA_SATURATE : i32 = 14;
pub const BLEND_FACTOR_SRC1_COLOR : i32 = 15;
pub const BLEND_FACTOR_ONE_MINUS_SRC1_COLOR : i32 = 16;
pub const BLEND_FACTOR_SRC1_ALPHA : i32 = 17;
pub const BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA : i32 = 18;
pub const BLEND_FACTOR_MAX_ENUM : i32 = 0x7FFFFFF;
pub type BlendOp = i32;
pub const BLEND_OP_ADD : i32 = 0;
pub const BLEND_OP_SUBTRACT : i32 = 1;
pub const BLEND_OP_REVERSE_SUBTRACT : i32 = 2;
pub const BLEND_OP_MIN : i32 = 3;
pub const BLEND_OP_MAX : i32 = 4;
pub const BLEND_OP_ZERO_EXT : i32 = 1000148000;
pub const BLEND_OP_SRC_EXT : i32 = 1000148001;
pub const BLEND_OP_DST_EXT : i32 = 1000148002;
pub const BLEND_OP_SRC_OVER_EXT : i32 = 1000148003;
pub const BLEND_OP_DST_OVER_EXT : i32 = 1000148004;
pub const BLEND_OP_SRC_IN_EXT : i32 = 1000148005;
pub const BLEND_OP_DST_IN_EXT : i32 = 1000148006;
pub const BLEND_OP_SRC_OUT_EXT : i32 = 1000148007;
pub const BLEND_OP_DST_OUT_EXT : i32 = 1000148008;
pub const BLEND_OP_SRC_ATOP_EXT : i32 = 1000148009;
pub const BLEND_OP_DST_ATOP_EXT : i32 = 1000148010;
pub const BLEND_OP_XOR_EXT : i32 = 1000148011;
pub const BLEND_OP_MULTIPLY_EXT : i32 = 1000148012;
pub const BLEND_OP_SCREEN_EXT : i32 = 1000148013;
pub const BLEND_OP_OVERLAY_EXT : i32 = 1000148014;
pub const BLEND_OP_DARKEN_EXT : i32 = 1000148015;
pub const BLEND_OP_LIGHTEN_EXT : i32 = 1000148016;
pub const BLEND_OP_COLORDODGE_EXT : i32 = 1000148017;
pub const BLEND_OP_COLORBURN_EXT : i32 = 1000148018;
pub const BLEND_OP_HARDLIGHT_EXT : i32 = 1000148019;
pub const BLEND_OP_SOFTLIGHT_EXT : i32 = 1000148020;
pub const BLEND_OP_DIFFERENCE_EXT : i32 = 1000148021;
pub const BLEND_OP_EXCLUSION_EXT : i32 = 1000148022;
pub const BLEND_OP_INVERT_EXT : i32 = 1000148023;
pub const BLEND_OP_INVERT_RGB_EXT : i32 = 1000148024;
pub const BLEND_OP_LINEARDODGE_EXT : i32 = 1000148025;
pub const BLEND_OP_LINEARBURN_EXT : i32 = 1000148026;
pub const BLEND_OP_VIVIDLIGHT_EXT : i32 = 1000148027;
pub const BLEND_OP_LINEARLIGHT_EXT : i32 = 1000148028;
pub const BLEND_OP_PINLIGHT_EXT : i32 = 1000148029;
pub const BLEND_OP_HARDMIX_EXT : i32 = 1000148030;
pub const BLEND_OP_HSL_HUE_EXT : i32 = 1000148031;
pub const BLEND_OP_HSL_SATURATION_EXT : i32 = 1000148032;
pub const BLEND_OP_HSL_COLOR_EXT : i32 = 1000148033;
pub const BLEND_OP_HSL_LUMINOSITY_EXT : i32 = 1000148034;
pub const BLEND_OP_PLUS_EXT : i32 = 1000148035;
pub const BLEND_OP_PLUS_CLAMPED_EXT : i32 = 1000148036;
pub const BLEND_OP_PLUS_CLAMPED_ALPHA_EXT : i32 = 1000148037;
pub const BLEND_OP_PLUS_DARKER_EXT : i32 = 1000148038;
pub const BLEND_OP_MINUS_EXT : i32 = 1000148039;
pub const BLEND_OP_MINUS_CLAMPED_EXT : i32 = 1000148040;
pub const BLEND_OP_CONTRAST_EXT : i32 = 1000148041;
pub const BLEND_OP_INVERT_OVG_EXT : i32 = 1000148042;
pub const BLEND_OP_RED_EXT : i32 = 1000148043;
pub const BLEND_OP_GREEN_EXT : i32 = 1000148044;
pub const BLEND_OP_BLUE_EXT : i32 = 1000148045;
pub const BLEND_OP_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DynamicState = i32;
pub const DYNAMIC_STATE_VIEWPORT : i32 = 0;
pub const DYNAMIC_STATE_SCISSOR : i32 = 1;
pub const DYNAMIC_STATE_LINE_WIDTH : i32 = 2;
pub const DYNAMIC_STATE_DEPTH_BIAS : i32 = 3;
pub const DYNAMIC_STATE_BLEND_CONSTANTS : i32 = 4;
pub const DYNAMIC_STATE_DEPTH_BOUNDS : i32 = 5;
pub const DYNAMIC_STATE_STENCIL_COMPARE_MASK : i32 = 6;
pub const DYNAMIC_STATE_STENCIL_WRITE_MASK : i32 = 7;
pub const DYNAMIC_STATE_STENCIL_REFERENCE : i32 = 8;
pub const DYNAMIC_STATE_VIEWPORT_W_SCALING_NV : i32 = 1000087000;
pub const DYNAMIC_STATE_DISCARD_RECTANGLE_EXT : i32 = 1000099000;
pub const DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT : i32 = 1000143000;
pub const DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV : i32 = 1000164004;
pub const DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV : i32 = 1000164006;
pub const DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV : i32 = 1000205001;
pub const DYNAMIC_STATE_LINE_STIPPLE_EXT : i32 = 1000259000;
pub const DYNAMIC_STATE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type Filter = i32;
pub const FILTER_NEAREST : i32 = 0;
pub const FILTER_LINEAR : i32 = 1;
pub const FILTER_CUBIC_IMG : i32 = 1000015000;
pub const FILTER_CUBIC_EXT : i32 = FILTER_CUBIC_IMG;
pub const FILTER_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SamplerMipmapMode = i32;
pub const SAMPLER_MIPMAP_MODE_NEAREST : i32 = 0;
pub const SAMPLER_MIPMAP_MODE_LINEAR : i32 = 1;
pub const SAMPLER_MIPMAP_MODE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SamplerAddressMode = i32;
pub const SAMPLER_ADDRESS_MODE_REPEAT : i32 = 0;
pub const SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT : i32 = 1;
pub const SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE : i32 = 2;
pub const SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER : i32 = 3;
pub const SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE : i32 = 4;
pub const SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR : i32 = SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
pub const SAMPLER_ADDRESS_MODE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type BorderColor = i32;
pub const BORDER_COLOR_FLOAT_TRANSPARENT_BLACK : i32 = 0;
pub const BORDER_COLOR_INT_TRANSPARENT_BLACK : i32 = 1;
pub const BORDER_COLOR_FLOAT_OPAQUE_BLACK : i32 = 2;
pub const BORDER_COLOR_INT_OPAQUE_BLACK : i32 = 3;
pub const BORDER_COLOR_FLOAT_OPAQUE_WHITE : i32 = 4;
pub const BORDER_COLOR_INT_OPAQUE_WHITE : i32 = 5;
pub const BORDER_COLOR_FLOAT_CUSTOM_EXT : i32 = 1000287003;
pub const BORDER_COLOR_INT_CUSTOM_EXT : i32 = 1000287004;
pub const BORDER_COLOR_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DescriptorType = i32;
pub const DESCRIPTOR_TYPE_SAMPLER : i32 = 0;
pub const DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER : i32 = 1;
pub const DESCRIPTOR_TYPE_SAMPLED_IMAGE : i32 = 2;
pub const DESCRIPTOR_TYPE_STORAGE_IMAGE : i32 = 3;
pub const DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER : i32 = 4;
pub const DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER : i32 = 5;
pub const DESCRIPTOR_TYPE_UNIFORM_BUFFER : i32 = 6;
pub const DESCRIPTOR_TYPE_STORAGE_BUFFER : i32 = 7;
pub const DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC : i32 = 8;
pub const DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC : i32 = 9;
pub const DESCRIPTOR_TYPE_INPUT_ATTACHMENT : i32 = 10;
pub const DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT : i32 = 1000138000;
pub const DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR : i32 = 1000165000;
pub const DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV : i32 = DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR;
pub const DESCRIPTOR_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type AttachmentLoadOp = i32;
pub const ATTACHMENT_LOAD_OP_LOAD : i32 = 0;
pub const ATTACHMENT_LOAD_OP_CLEAR : i32 = 1;
pub const ATTACHMENT_LOAD_OP_DONT_CARE : i32 = 2;
pub const ATTACHMENT_LOAD_OP_MAX_ENUM : i32 = 0x7FFFFFF;
pub type AttachmentStoreOp = i32;
pub const ATTACHMENT_STORE_OP_STORE : i32 = 0;
pub const ATTACHMENT_STORE_OP_DONT_CARE : i32 = 1;
pub const ATTACHMENT_STORE_OP_NONE_QCOM : i32 = 1000301000;
pub const ATTACHMENT_STORE_OP_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PipelineBindPoint = i32;
pub const PIPELINE_BIND_POINT_GRAPHICS : i32 = 0;
pub const PIPELINE_BIND_POINT_COMPUTE : i32 = 1;
pub const PIPELINE_BIND_POINT_RAY_TRACING_KHR : i32 = 1000165000;
pub const PIPELINE_BIND_POINT_RAY_TRACING_NV : i32 = PIPELINE_BIND_POINT_RAY_TRACING_KHR;
pub const PIPELINE_BIND_POINT_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CommandBufferLevel = i32;
pub const COMMAND_BUFFER_LEVEL_PRIMARY : i32 = 0;
pub const COMMAND_BUFFER_LEVEL_SECONDARY : i32 = 1;
pub const COMMAND_BUFFER_LEVEL_MAX_ENUM : i32 = 0x7FFFFFF;
pub type IndexType = i32;
pub const INDEX_TYPE_UINT16 : i32 = 0;
pub const INDEX_TYPE_UINT32 : i32 = 1;
pub const INDEX_TYPE_NONE_KHR : i32 = 1000165000;
pub const INDEX_TYPE_UINT8_EXT : i32 = 1000265000;
pub const INDEX_TYPE_NONE_NV : i32 = INDEX_TYPE_NONE_KHR;
pub const INDEX_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SubpassContents = i32;
pub const SUBPASS_CONTENTS_INLINE : i32 = 0;
pub const SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS : i32 = 1;
pub const SUBPASS_CONTENTS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ObjectType = i32;
pub const OBJECT_TYPE_UNKNOWN : i32 = 0;
pub const OBJECT_TYPE_INSTANCE : i32 = 1;
pub const OBJECT_TYPE_PHYSICAL_DEVICE : i32 = 2;
pub const OBJECT_TYPE_DEVICE : i32 = 3;
pub const OBJECT_TYPE_QUEUE : i32 = 4;
pub const OBJECT_TYPE_SEMAPHORE : i32 = 5;
pub const OBJECT_TYPE_COMMAND_BUFFER : i32 = 6;
pub const OBJECT_TYPE_FENCE : i32 = 7;
pub const OBJECT_TYPE_DEVICE_MEMORY : i32 = 8;
pub const OBJECT_TYPE_BUFFER : i32 = 9;
pub const OBJECT_TYPE_IMAGE : i32 = 10;
pub const OBJECT_TYPE_EVENT : i32 = 11;
pub const OBJECT_TYPE_QUERY_POOL : i32 = 12;
pub const OBJECT_TYPE_BUFFER_VIEW : i32 = 13;
pub const OBJECT_TYPE_IMAGE_VIEW : i32 = 14;
pub const OBJECT_TYPE_SHADER_MODULE : i32 = 15;
pub const OBJECT_TYPE_PIPELINE_CACHE : i32 = 16;
pub const OBJECT_TYPE_PIPELINE_LAYOUT : i32 = 17;
pub const OBJECT_TYPE_RENDER_PASS : i32 = 18;
pub const OBJECT_TYPE_PIPELINE : i32 = 19;
pub const OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT : i32 = 20;
pub const OBJECT_TYPE_SAMPLER : i32 = 21;
pub const OBJECT_TYPE_DESCRIPTOR_POOL : i32 = 22;
pub const OBJECT_TYPE_DESCRIPTOR_SET : i32 = 23;
pub const OBJECT_TYPE_FRAMEBUFFER : i32 = 24;
pub const OBJECT_TYPE_COMMAND_POOL : i32 = 25;
pub const OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION : i32 = 1000156000;
pub const OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE : i32 = 1000085000;
pub const OBJECT_TYPE_SURFACE_KHR : i32 = 1000000000;
pub const OBJECT_TYPE_SWAPCHAIN_KHR : i32 = 1000001000;
pub const OBJECT_TYPE_DISPLAY_KHR : i32 = 1000002000;
pub const OBJECT_TYPE_DISPLAY_MODE_KHR : i32 = 1000002001;
pub const OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT : i32 = 1000011000;
pub const OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT : i32 = 1000128000;
pub const OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR : i32 = 1000165000;
pub const OBJECT_TYPE_VALIDATION_CACHE_EXT : i32 = 1000160000;
pub const OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL : i32 = 1000210000;
pub const OBJECT_TYPE_DEFERRED_OPERATION_KHR : i32 = 1000268000;
pub const OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV : i32 = 1000277000;
pub const OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT : i32 = 1000295000;
pub const OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR : i32 = OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
pub const OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR : i32 = OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
pub const OBJECT_TYPE_ACCELERATION_STRUCTURE_NV : i32 = OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR;
pub const OBJECT_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type VendorId = i32;
pub const VENDOR_ID_VIV : i32 = 0x10001;
pub const VENDOR_ID_VSI : i32 = 0x10002;
pub const VENDOR_ID_KAZAN : i32 = 0x10003;
pub const VENDOR_ID_CODEPLAY : i32 = 0x10004;
pub const VENDOR_ID_MESA : i32 = 0x10005;
pub const VENDOR_ID_MAX_ENUM : i32 = 0x7FFFFFF;
pub type InstanceCreateFlags = i32;
pub type FormatFeatureFlagBits = i32;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_BIT : i32 = 0x00000001;
pub const FORMAT_FEATURE_STORAGE_IMAGE_BIT : i32 = 0x00000002;
pub const FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT : i32 = 0x00000004;
pub const FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT : i32 = 0x00000008;
pub const FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT : i32 = 0x00000010;
pub const FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT : i32 = 0x00000020;
pub const FORMAT_FEATURE_VERTEX_BUFFER_BIT : i32 = 0x00000040;
pub const FORMAT_FEATURE_COLOR_ATTACHMENT_BIT : i32 = 0x00000080;
pub const FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT : i32 = 0x00000100;
pub const FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT : i32 = 0x00000200;
pub const FORMAT_FEATURE_BLIT_SRC_BIT : i32 = 0x00000400;
pub const FORMAT_FEATURE_BLIT_DST_BIT : i32 = 0x00000800;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT : i32 = 0x00001000;
pub const FORMAT_FEATURE_TRANSFER_SRC_BIT : i32 = 0x00004000;
pub const FORMAT_FEATURE_TRANSFER_DST_BIT : i32 = 0x00008000;
pub const FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT : i32 = 0x00020000;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT : i32 = 0x00040000;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT : i32 = 0x00080000;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT : i32 = 0x00100000;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : i32 = 0x00200000;
pub const FORMAT_FEATURE_DISJOINT_BIT : i32 = 0x00400000;
pub const FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT : i32 = 0x00800000;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT : i32 = 0x00010000;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG : i32 = 0x00002000;
pub const FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR : i32 = 0x20000000;
pub const FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT : i32 = 0x01000000;
pub const FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR : i32 = FORMAT_FEATURE_TRANSFER_SRC_BIT;
pub const FORMAT_FEATURE_TRANSFER_DST_BIT_KHR : i32 = FORMAT_FEATURE_TRANSFER_DST_BIT;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT : i32 = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT;
pub const FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR : i32 = FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR : i32 = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : i32 = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : i32 = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : i32 = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT;
pub const FORMAT_FEATURE_DISJOINT_BIT_KHR : i32 = FORMAT_FEATURE_DISJOINT_BIT;
pub const FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR : i32 = FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT;
pub const FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT : i32 = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG;
pub const FORMAT_FEATURE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type FormatFeatureFlags = i32;
pub type ImageUsageFlagBits = i32;
pub const IMAGE_USAGE_TRANSFER_SRC_BIT : i32 = 0x00000001;
pub const IMAGE_USAGE_TRANSFER_DST_BIT : i32 = 0x00000002;
pub const IMAGE_USAGE_SAMPLED_BIT : i32 = 0x00000004;
pub const IMAGE_USAGE_STORAGE_BIT : i32 = 0x00000008;
pub const IMAGE_USAGE_COLOR_ATTACHMENT_BIT : i32 = 0x00000010;
pub const IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT : i32 = 0x00000020;
pub const IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT : i32 = 0x00000040;
pub const IMAGE_USAGE_INPUT_ATTACHMENT_BIT : i32 = 0x00000080;
pub const IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV : i32 = 0x00000100;
pub const IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT : i32 = 0x00000200;
pub const IMAGE_USAGE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageUsageFlags = i32;
pub type ImageCreateFlagBits = i32;
pub const IMAGE_CREATE_SPARSE_BINDING_BIT : i32 = 0x00000001;
pub const IMAGE_CREATE_SPARSE_RESIDENCY_BIT : i32 = 0x00000002;
pub const IMAGE_CREATE_SPARSE_ALIASED_BIT : i32 = 0x00000004;
pub const IMAGE_CREATE_MUTABLE_FORMAT_BIT : i32 = 0x00000008;
pub const IMAGE_CREATE_CUBE_COMPATIBLE_BIT : i32 = 0x00000010;
pub const IMAGE_CREATE_ALIAS_BIT : i32 = 0x00000400;
pub const IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT : i32 = 0x00000040;
pub const IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT : i32 = 0x00000020;
pub const IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT : i32 = 0x00000080;
pub const IMAGE_CREATE_EXTENDED_USAGE_BIT : i32 = 0x00000100;
pub const IMAGE_CREATE_PROTECTED_BIT : i32 = 0x00000800;
pub const IMAGE_CREATE_DISJOINT_BIT : i32 = 0x00000200;
pub const IMAGE_CREATE_CORNER_SAMPLED_BIT_NV : i32 = 0x00002000;
pub const IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT : i32 = 0x00001000;
pub const IMAGE_CREATE_SUBSAMPLED_BIT_EXT : i32 = 0x00004000;
pub const IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR : i32 = IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT;
pub const IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR : i32 = IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
pub const IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR : i32 = IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT;
pub const IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR : i32 = IMAGE_CREATE_EXTENDED_USAGE_BIT;
pub const IMAGE_CREATE_DISJOINT_BIT_KHR : i32 = IMAGE_CREATE_DISJOINT_BIT;
pub const IMAGE_CREATE_ALIAS_BIT_KHR : i32 = IMAGE_CREATE_ALIAS_BIT;
pub const IMAGE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageCreateFlags = i32;
pub type SampleCountFlagBits = i32;
pub const SAMPLE_COUNT_1_BIT : i32 = 0x00000001;
pub const SAMPLE_COUNT_2_BIT : i32 = 0x00000002;
pub const SAMPLE_COUNT_4_BIT : i32 = 0x00000004;
pub const SAMPLE_COUNT_8_BIT : i32 = 0x00000008;
pub const SAMPLE_COUNT_16_BIT : i32 = 0x00000010;
pub const SAMPLE_COUNT_32_BIT : i32 = 0x00000020;
pub const SAMPLE_COUNT_64_BIT : i32 = 0x00000040;
pub const SAMPLE_COUNT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SampleCountFlags = i32;
pub type QueueFlagBits = i32;
pub const QUEUE_GRAPHICS_BIT : i32 = 0x00000001;
pub const QUEUE_COMPUTE_BIT : i32 = 0x00000002;
pub const QUEUE_TRANSFER_BIT : i32 = 0x00000004;
pub const QUEUE_SPARSE_BINDING_BIT : i32 = 0x00000008;
pub const QUEUE_PROTECTED_BIT : i32 = 0x00000010;
pub const QUEUE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type QueueFlags = i32;
pub type MemoryPropertyFlagBits = i32;
pub const MEMORY_PROPERTY_DEVICE_LOCAL_BIT : i32 = 0x00000001;
pub const MEMORY_PROPERTY_HOST_VISIBLE_BIT : i32 = 0x00000002;
pub const MEMORY_PROPERTY_HOST_COHERENT_BIT : i32 = 0x00000004;
pub const MEMORY_PROPERTY_HOST_CACHED_BIT : i32 = 0x00000008;
pub const MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT : i32 = 0x00000010;
pub const MEMORY_PROPERTY_PROTECTED_BIT : i32 = 0x00000020;
pub const MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD : i32 = 0x00000040;
pub const MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD : i32 = 0x00000080;
pub const MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type MemoryPropertyFlags = i32;
pub type MemoryHeapFlagBits = i32;
pub const MEMORY_HEAP_DEVICE_LOCAL_BIT : i32 = 0x00000001;
pub const MEMORY_HEAP_MULTI_INSTANCE_BIT : i32 = 0x00000002;
pub const MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR : i32 = MEMORY_HEAP_MULTI_INSTANCE_BIT;
pub const MEMORY_HEAP_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type MemoryHeapFlags = i32;
pub type DeviceCreateFlags = i32;
pub type DeviceQueueCreateFlagBits = i32;
pub const DEVICE_QUEUE_CREATE_PROTECTED_BIT : i32 = 0x00000001;
pub const DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DeviceQueueCreateFlags = i32;
pub type PipelineStageFlagBits = i32;
pub const PIPELINE_STAGE_TOP_OF_PIPE_BIT : i32 = 0x00000001;
pub const PIPELINE_STAGE_DRAW_INDIRECT_BIT : i32 = 0x00000002;
pub const PIPELINE_STAGE_VERTEX_INPUT_BIT : i32 = 0x00000004;
pub const PIPELINE_STAGE_VERTEX_SHADER_BIT : i32 = 0x00000008;
pub const PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT : i32 = 0x00000010;
pub const PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT : i32 = 0x00000020;
pub const PIPELINE_STAGE_GEOMETRY_SHADER_BIT : i32 = 0x00000040;
pub const PIPELINE_STAGE_FRAGMENT_SHADER_BIT : i32 = 0x00000080;
pub const PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT : i32 = 0x00000100;
pub const PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT : i32 = 0x00000200;
pub const PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT : i32 = 0x00000400;
pub const PIPELINE_STAGE_COMPUTE_SHADER_BIT : i32 = 0x00000800;
pub const PIPELINE_STAGE_TRANSFER_BIT : i32 = 0x00001000;
pub const PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT : i32 = 0x00002000;
pub const PIPELINE_STAGE_HOST_BIT : i32 = 0x00004000;
pub const PIPELINE_STAGE_ALL_GRAPHICS_BIT : i32 = 0x00008000;
pub const PIPELINE_STAGE_ALL_COMMANDS_BIT : i32 = 0x00010000;
pub const PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT : i32 = 0x01000000;
pub const PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT : i32 = 0x00040000;
pub const PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR : i32 = 0x00200000;
pub const PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR : i32 = 0x02000000;
pub const PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV : i32 = 0x00400000;
pub const PIPELINE_STAGE_TASK_SHADER_BIT_NV : i32 = 0x00080000;
pub const PIPELINE_STAGE_MESH_SHADER_BIT_NV : i32 = 0x00100000;
pub const PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT : i32 = 0x00800000;
pub const PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV : i32 = 0x00020000;
pub const PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV : i32 = PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
pub const PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV : i32 = PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
pub const PIPELINE_STAGE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PipelineStageFlags = i32;
pub type MemoryMapFlags = i32;
pub type ImageAspectFlagBits = i32;
pub const IMAGE_ASPECT_COLOR_BIT : i32 = 0x00000001;
pub const IMAGE_ASPECT_DEPTH_BIT : i32 = 0x00000002;
pub const IMAGE_ASPECT_STENCIL_BIT : i32 = 0x00000004;
pub const IMAGE_ASPECT_METADATA_BIT : i32 = 0x00000008;
pub const IMAGE_ASPECT_PLANE_0_BIT : i32 = 0x00000010;
pub const IMAGE_ASPECT_PLANE_1_BIT : i32 = 0x00000020;
pub const IMAGE_ASPECT_PLANE_2_BIT : i32 = 0x00000040;
pub const IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT : i32 = 0x00000080;
pub const IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT : i32 = 0x00000100;
pub const IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT : i32 = 0x00000200;
pub const IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT : i32 = 0x00000400;
pub const IMAGE_ASPECT_PLANE_0_BIT_KHR : i32 = IMAGE_ASPECT_PLANE_0_BIT;
pub const IMAGE_ASPECT_PLANE_1_BIT_KHR : i32 = IMAGE_ASPECT_PLANE_1_BIT;
pub const IMAGE_ASPECT_PLANE_2_BIT_KHR : i32 = IMAGE_ASPECT_PLANE_2_BIT;
pub const IMAGE_ASPECT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageAspectFlags = i32;
pub type SparseImageFormatFlagBits = i32;
pub const SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT : i32 = 0x00000001;
pub const SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT : i32 = 0x00000002;
pub const SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT : i32 = 0x00000004;
pub const SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SparseImageFormatFlags = i32;
pub type SparseMemoryBindFlagBits = i32;
pub const SPARSE_MEMORY_BIND_METADATA_BIT : i32 = 0x00000001;
pub const SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SparseMemoryBindFlags = i32;
pub type FenceCreateFlagBits = i32;
pub const FENCE_CREATE_SIGNALED_BIT : i32 = 0x00000001;
pub const FENCE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type FenceCreateFlags = i32;
pub type SemaphoreCreateFlags = i32;
pub type EventCreateFlags = i32;
pub type QueryPoolCreateFlags = i32;
pub type QueryPipelineStatisticFlagBits = i32;
pub const QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT : i32 = 0x00000001;
pub const QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT : i32 = 0x00000002;
pub const QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT : i32 = 0x00000004;
pub const QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT : i32 = 0x00000008;
pub const QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT : i32 = 0x00000010;
pub const QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT : i32 = 0x00000020;
pub const QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT : i32 = 0x00000040;
pub const QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT : i32 = 0x00000080;
pub const QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT : i32 = 0x00000100;
pub const QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT : i32 = 0x00000200;
pub const QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT : i32 = 0x00000400;
pub const QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type QueryPipelineStatisticFlags = i32;
pub type QueryResultFlagBits = i32;
pub const QUERY_RESULT_64_BIT : i32 = 0x00000001;
pub const QUERY_RESULT_WAIT_BIT : i32 = 0x00000002;
pub const QUERY_RESULT_WITH_AVAILABILITY_BIT : i32 = 0x00000004;
pub const QUERY_RESULT_PARTIAL_BIT : i32 = 0x00000008;
pub const QUERY_RESULT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type QueryResultFlags = i32;
pub type BufferCreateFlagBits = i32;
pub const BUFFER_CREATE_SPARSE_BINDING_BIT : i32 = 0x00000001;
pub const BUFFER_CREATE_SPARSE_RESIDENCY_BIT : i32 = 0x00000002;
pub const BUFFER_CREATE_SPARSE_ALIASED_BIT : i32 = 0x00000004;
pub const BUFFER_CREATE_PROTECTED_BIT : i32 = 0x00000008;
pub const BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT : i32 = 0x00000010;
pub const BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT : i32 = BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
pub const BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR : i32 = BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
pub const BUFFER_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type BufferCreateFlags = i32;
pub type BufferUsageFlagBits = i32;
pub const BUFFER_USAGE_TRANSFER_SRC_BIT : i32 = 0x00000001;
pub const BUFFER_USAGE_TRANSFER_DST_BIT : i32 = 0x00000002;
pub const BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT : i32 = 0x00000004;
pub const BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT : i32 = 0x00000008;
pub const BUFFER_USAGE_UNIFORM_BUFFER_BIT : i32 = 0x00000010;
pub const BUFFER_USAGE_STORAGE_BUFFER_BIT : i32 = 0x00000020;
pub const BUFFER_USAGE_INDEX_BUFFER_BIT : i32 = 0x00000040;
pub const BUFFER_USAGE_VERTEX_BUFFER_BIT : i32 = 0x00000080;
pub const BUFFER_USAGE_INDIRECT_BUFFER_BIT : i32 = 0x00000100;
pub const BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT : i32 = 0x00020000;
pub const BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT : i32 = 0x00000800;
pub const BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT : i32 = 0x00001000;
pub const BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT : i32 = 0x00000200;
pub const BUFFER_USAGE_RAY_TRACING_BIT_KHR : i32 = 0x00000400;
pub const BUFFER_USAGE_RAY_TRACING_BIT_NV : i32 = BUFFER_USAGE_RAY_TRACING_BIT_KHR;
pub const BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT : i32 = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
pub const BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR : i32 = BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
pub const BUFFER_USAGE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type BufferUsageFlags = i32;
pub type BufferViewCreateFlags = i32;
pub type ImageViewCreateFlagBits = i32;
pub const IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT : i32 = 0x00000001;
pub const IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ImageViewCreateFlags = i32;
pub type ShaderModuleCreateFlagBits = i32;
pub const SHADER_MODULE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ShaderModuleCreateFlags = i32;
pub type PipelineCacheCreateFlagBits = i32;
pub const PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT : i32 = 0x00000001;
pub const PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PipelineCacheCreateFlags = i32;
pub type PipelineCreateFlagBits = i32;
pub const PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT : i32 = 0x00000001;
pub const PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT : i32 = 0x00000002;
pub const PIPELINE_CREATE_DERIVATIVE_BIT : i32 = 0x00000004;
pub const PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT : i32 = 0x00000008;
pub const PIPELINE_CREATE_DISPATCH_BASE_BIT : i32 = 0x00000010;
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR : i32 = 0x00004000;
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR : i32 = 0x00008000;
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR : i32 = 0x00010000;
pub const PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR : i32 = 0x00020000;
pub const PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR : i32 = 0x00001000;
pub const PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR : i32 = 0x00002000;
pub const PIPELINE_CREATE_DEFER_COMPILE_BIT_NV : i32 = 0x00000020;
pub const PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR : i32 = 0x00000040;
pub const PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR : i32 = 0x00000080;
pub const PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV : i32 = 0x00040000;
pub const PIPELINE_CREATE_LIBRARY_BIT_KHR : i32 = 0x00000800;
pub const PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT : i32 = 0x00000100;
pub const PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT : i32 = 0x00000200;
pub const PIPELINE_CREATE_DISPATCH_BASE : i32 = PIPELINE_CREATE_DISPATCH_BASE_BIT;
pub const PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR : i32 = PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT;
pub const PIPELINE_CREATE_DISPATCH_BASE_KHR : i32 = PIPELINE_CREATE_DISPATCH_BASE;
pub const PIPELINE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PipelineCreateFlags = i32;
pub type PipelineShaderStageCreateFlagBits = i32;
pub const PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT : i32 = 0x00000001;
pub const PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT : i32 = 0x00000002;
pub const PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PipelineShaderStageCreateFlags = i32;
pub type ShaderStageFlagBits = i32;
pub const SHADER_STAGE_VERTEX_BIT : i32 = 0x00000001;
pub const SHADER_STAGE_TESSELLATION_CONTROL_BIT : i32 = 0x00000002;
pub const SHADER_STAGE_TESSELLATION_EVALUATION_BIT : i32 = 0x00000004;
pub const SHADER_STAGE_GEOMETRY_BIT : i32 = 0x00000008;
pub const SHADER_STAGE_FRAGMENT_BIT : i32 = 0x00000010;
pub const SHADER_STAGE_COMPUTE_BIT : i32 = 0x00000020;
pub const SHADER_STAGE_ALL_GRAPHICS : i32 = 0x0000001F;
pub const SHADER_STAGE_ALL : i32 = 0x7FFFFFFF;
pub const SHADER_STAGE_RAYGEN_BIT_KHR : i32 = 0x00000100;
pub const SHADER_STAGE_ANY_HIT_BIT_KHR : i32 = 0x00000200;
pub const SHADER_STAGE_CLOSEST_HIT_BIT_KHR : i32 = 0x00000400;
pub const SHADER_STAGE_MISS_BIT_KHR : i32 = 0x00000800;
pub const SHADER_STAGE_INTERSECTION_BIT_KHR : i32 = 0x00001000;
pub const SHADER_STAGE_CALLABLE_BIT_KHR : i32 = 0x00002000;
pub const SHADER_STAGE_TASK_BIT_NV : i32 = 0x00000040;
pub const SHADER_STAGE_MESH_BIT_NV : i32 = 0x00000080;
pub const SHADER_STAGE_RAYGEN_BIT_NV : i32 = SHADER_STAGE_RAYGEN_BIT_KHR;
pub const SHADER_STAGE_ANY_HIT_BIT_NV : i32 = SHADER_STAGE_ANY_HIT_BIT_KHR;
pub const SHADER_STAGE_CLOSEST_HIT_BIT_NV : i32 = SHADER_STAGE_CLOSEST_HIT_BIT_KHR;
pub const SHADER_STAGE_MISS_BIT_NV : i32 = SHADER_STAGE_MISS_BIT_KHR;
pub const SHADER_STAGE_INTERSECTION_BIT_NV : i32 = SHADER_STAGE_INTERSECTION_BIT_KHR;
pub const SHADER_STAGE_CALLABLE_BIT_NV : i32 = SHADER_STAGE_CALLABLE_BIT_KHR;
pub const SHADER_STAGE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PipelineVertexInputStateCreateFlags = i32;
pub type PipelineInputAssemblyStateCreateFlags = i32;
pub type PipelineTessellationStateCreateFlags = i32;
pub type PipelineViewportStateCreateFlags = i32;
pub type PipelineRasterizationStateCreateFlags = i32;
pub type CullModeFlagBits = i32;
pub const CULL_MODE_NONE : i32 = 0;
pub const CULL_MODE_FRONT_BIT : i32 = 0x00000001;
pub const CULL_MODE_BACK_BIT : i32 = 0x00000002;
pub const CULL_MODE_FRONT_AND_BACK : i32 = 0x00000003;
pub const CULL_MODE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CullModeFlags = i32;
pub type PipelineMultisampleStateCreateFlags = i32;
pub type PipelineDepthStencilStateCreateFlags = i32;
pub type PipelineColorBlendStateCreateFlags = i32;
pub type ColorComponentFlagBits = i32;
pub const COLOR_COMPONENT_R_BIT : i32 = 0x00000001;
pub const COLOR_COMPONENT_G_BIT : i32 = 0x00000002;
pub const COLOR_COMPONENT_B_BIT : i32 = 0x00000004;
pub const COLOR_COMPONENT_A_BIT : i32 = 0x00000008;
pub const COLOR_COMPONENT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ColorComponentFlags = i32;
pub type PipelineDynamicStateCreateFlags = i32;
pub type PipelineLayoutCreateFlags = i32;
pub type ShaderStageFlags = i32;
pub type SamplerCreateFlagBits = i32;
pub const SAMPLER_CREATE_SUBSAMPLED_BIT_EXT : i32 = 0x00000001;
pub const SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT : i32 = 0x00000002;
pub const SAMPLER_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SamplerCreateFlags = i32;
pub type DescriptorSetLayoutCreateFlagBits = i32;
pub const DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT : i32 = 0x00000002;
pub const DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR : i32 = 0x00000001;
pub const DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT : i32 = DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT;
pub const DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DescriptorSetLayoutCreateFlags = i32;
pub type DescriptorPoolCreateFlagBits = i32;
pub const DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT : i32 = 0x00000001;
pub const DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT : i32 = 0x00000002;
pub const DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT : i32 = DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT;
pub const DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DescriptorPoolCreateFlags = i32;
pub type DescriptorPoolResetFlags = i32;
pub type FramebufferCreateFlagBits = i32;
pub const FRAMEBUFFER_CREATE_IMAGELESS_BIT : i32 = 0x00000001;
pub const FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR : i32 = FRAMEBUFFER_CREATE_IMAGELESS_BIT;
pub const FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type FramebufferCreateFlags = i32;
pub type RenderPassCreateFlagBits = i32;
pub const RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM : i32 = 0x00000002;
pub const RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type RenderPassCreateFlags = i32;
pub type AttachmentDescriptionFlagBits = i32;
pub const ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT : i32 = 0x00000001;
pub const ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type AttachmentDescriptionFlags = i32;
pub type SubpassDescriptionFlagBits = i32;
pub const SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX : i32 = 0x00000001;
pub const SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX : i32 = 0x00000002;
pub const SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM : i32 = 0x00000004;
pub const SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM : i32 = 0x00000008;
pub const SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SubpassDescriptionFlags = i32;
pub type AccessFlagBits = i32;
pub const ACCESS_INDIRECT_COMMAND_READ_BIT : i32 = 0x00000001;
pub const ACCESS_INDEX_READ_BIT : i32 = 0x00000002;
pub const ACCESS_VERTEX_ATTRIBUTE_READ_BIT : i32 = 0x00000004;
pub const ACCESS_UNIFORM_READ_BIT : i32 = 0x00000008;
pub const ACCESS_INPUT_ATTACHMENT_READ_BIT : i32 = 0x00000010;
pub const ACCESS_SHADER_READ_BIT : i32 = 0x00000020;
pub const ACCESS_SHADER_WRITE_BIT : i32 = 0x00000040;
pub const ACCESS_COLOR_ATTACHMENT_READ_BIT : i32 = 0x00000080;
pub const ACCESS_COLOR_ATTACHMENT_WRITE_BIT : i32 = 0x00000100;
pub const ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT : i32 = 0x00000200;
pub const ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT : i32 = 0x00000400;
pub const ACCESS_TRANSFER_READ_BIT : i32 = 0x00000800;
pub const ACCESS_TRANSFER_WRITE_BIT : i32 = 0x00001000;
pub const ACCESS_HOST_READ_BIT : i32 = 0x00002000;
pub const ACCESS_HOST_WRITE_BIT : i32 = 0x00004000;
pub const ACCESS_MEMORY_READ_BIT : i32 = 0x00008000;
pub const ACCESS_MEMORY_WRITE_BIT : i32 = 0x00010000;
pub const ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT : i32 = 0x02000000;
pub const ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT : i32 = 0x04000000;
pub const ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT : i32 = 0x08000000;
pub const ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT : i32 = 0x00100000;
pub const ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT : i32 = 0x00080000;
pub const ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR : i32 = 0x00200000;
pub const ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR : i32 = 0x00400000;
pub const ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV : i32 = 0x00800000;
pub const ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT : i32 = 0x01000000;
pub const ACCESS_COMMAND_PREPROCESS_READ_BIT_NV : i32 = 0x00020000;
pub const ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV : i32 = 0x00040000;
pub const ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV : i32 = ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
pub const ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV : i32 = ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
pub const ACCESS_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type AccessFlags = i32;
pub type DependencyFlagBits = i32;
pub const DEPENDENCY_BY_REGION_BIT : i32 = 0x00000001;
pub const DEPENDENCY_DEVICE_GROUP_BIT : i32 = 0x00000004;
pub const DEPENDENCY_VIEW_LOCAL_BIT : i32 = 0x00000002;
pub const DEPENDENCY_VIEW_LOCAL_BIT_KHR : i32 = DEPENDENCY_VIEW_LOCAL_BIT;
pub const DEPENDENCY_DEVICE_GROUP_BIT_KHR : i32 = DEPENDENCY_DEVICE_GROUP_BIT;
pub const DEPENDENCY_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DependencyFlags = i32;
pub type CommandPoolCreateFlagBits = i32;
pub const COMMAND_POOL_CREATE_TRANSIENT_BIT : i32 = 0x00000001;
pub const COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT : i32 = 0x00000002;
pub const COMMAND_POOL_CREATE_PROTECTED_BIT : i32 = 0x00000004;
pub const COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CommandPoolCreateFlags = i32;
pub type CommandPoolResetFlagBits = i32;
pub const COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT : i32 = 0x00000001;
pub const COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CommandPoolResetFlags = i32;
pub type CommandBufferUsageFlagBits = i32;
pub const COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT : i32 = 0x00000001;
pub const COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT : i32 = 0x00000002;
pub const COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT : i32 = 0x00000004;
pub const COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CommandBufferUsageFlags = i32;
pub type QueryControlFlagBits = i32;
pub const QUERY_CONTROL_PRECISE_BIT : i32 = 0x00000001;
pub const QUERY_CONTROL_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type QueryControlFlags = i32;
pub type CommandBufferResetFlagBits = i32;
pub const COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT : i32 = 0x00000001;
pub const COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type CommandBufferResetFlags = i32;
pub type StencilFaceFlagBits = i32;
pub const STENCIL_FACE_FRONT_BIT : i32 = 0x00000001;
pub const STENCIL_FACE_BACK_BIT : i32 = 0x00000002;
pub const STENCIL_FACE_FRONT_AND_BACK : i32 = 0x00000003;
pub const STENCIL_FRONT_AND_BACK : i32 = STENCIL_FACE_FRONT_AND_BACK;
pub const STENCIL_FACE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type StencilFaceFlags = i32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ApplicationInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pApplicationName : *const i8,
	pub applicationVersion : u32,
	pub pEngineName : *const i8,
	pub engineVersion : u32,
	pub apiVersion : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InstanceCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : i32,
	pub pApplicationInfo : *const ApplicationInfo,
	pub enabledLayerCount : u32,
	pub ppEnabledLayerNames : *const *const i8,
	pub enabledExtensionCount : u32,
	pub ppEnabledExtensionNames : *const *const i8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AllocationCallbacks {
	pub pUserData : *mut void,
	pub pfnAllocation : u64,
	pub pfnReallocation : u64,
	pub pfnFree : u64,
	pub pfnInternalAllocation : u64,
	pub pfnInternalFree : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFeatures {
	pub robustBufferAccess : Bool32,
	pub fullDrawIndexUint32 : Bool32,
	pub imageCubeArray : Bool32,
	pub independentBlend : Bool32,
	pub geometryShader : Bool32,
	pub tessellationShader : Bool32,
	pub sampleRateShading : Bool32,
	pub dualSrcBlend : Bool32,
	pub logicOp : Bool32,
	pub multiDrawIndirect : Bool32,
	pub drawIndirectFirstInstance : Bool32,
	pub depthClamp : Bool32,
	pub depthBiasClamp : Bool32,
	pub fillModeNonSolid : Bool32,
	pub depthBounds : Bool32,
	pub wideLines : Bool32,
	pub largePoints : Bool32,
	pub alphaToOne : Bool32,
	pub multiViewport : Bool32,
	pub samplerAnisotropy : Bool32,
	pub textureCompressionETC2 : Bool32,
	pub textureCompressionASTC_LDR : Bool32,
	pub textureCompressionBC : Bool32,
	pub occlusionQueryPrecise : Bool32,
	pub pipelineStatisticsQuery : Bool32,
	pub vertexPipelineStoresAndAtomics : Bool32,
	pub fragmentStoresAndAtomics : Bool32,
	pub shaderTessellationAndGeometryPointSize : Bool32,
	pub shaderImageGatherExtended : Bool32,
	pub shaderStorageImageExtendedFormats : Bool32,
	pub shaderStorageImageMultisample : Bool32,
	pub shaderStorageImageReadWithoutFormat : Bool32,
	pub shaderStorageImageWriteWithoutFormat : Bool32,
	pub shaderUniformBufferArrayDynamicIndexing : Bool32,
	pub shaderSampledImageArrayDynamicIndexing : Bool32,
	pub shaderStorageBufferArrayDynamicIndexing : Bool32,
	pub shaderStorageImageArrayDynamicIndexing : Bool32,
	pub shaderClipDistance : Bool32,
	pub shaderCullDistance : Bool32,
	pub shaderFloat64 : Bool32,
	pub shaderInt64 : Bool32,
	pub shaderInt16 : Bool32,
	pub shaderResourceResidency : Bool32,
	pub shaderResourceMinLod : Bool32,
	pub sparseBinding : Bool32,
	pub sparseResidencyBuffer : Bool32,
	pub sparseResidencyImage2D : Bool32,
	pub sparseResidencyImage3D : Bool32,
	pub sparseResidency2Samples : Bool32,
	pub sparseResidency4Samples : Bool32,
	pub sparseResidency8Samples : Bool32,
	pub sparseResidency16Samples : Bool32,
	pub sparseResidencyAliased : Bool32,
	pub variableMultisampleRate : Bool32,
	pub inheritedQueries : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FormatProperties {
	pub linearTilingFeatures : FormatFeatureFlags,
	pub optimalTilingFeatures : FormatFeatureFlags,
	pub bufferFeatures : FormatFeatureFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extent3D {
	pub width : u32,
	pub height : u32,
	pub depth : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageFormatProperties {
	pub maxExtent : Extent3D,
	pub maxMipLevels : u32,
	pub maxArrayLayers : u32,
	pub sampleCounts : SampleCountFlags,
	pub maxResourceSize : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceLimits {
	pub maxImageDimension1D : u32,
	pub maxImageDimension2D : u32,
	pub maxImageDimension3D : u32,
	pub maxImageDimensionCube : u32,
	pub maxImageArrayLayers : u32,
	pub maxTexelBufferElements : u32,
	pub maxUniformBufferRange : u32,
	pub maxStorageBufferRange : u32,
	pub maxPushConstantsSize : u32,
	pub maxMemoryAllocationCount : u32,
	pub maxSamplerAllocationCount : u32,
	pub bufferImageGranularity : DeviceSize,
	pub sparseAddressSpaceSize : DeviceSize,
	pub maxBoundDescriptorSets : u32,
	pub maxPerStageDescriptorSamplers : u32,
	pub maxPerStageDescriptorUniformBuffers : u32,
	pub maxPerStageDescriptorStorageBuffers : u32,
	pub maxPerStageDescriptorSampledImages : u32,
	pub maxPerStageDescriptorStorageImages : u32,
	pub maxPerStageDescriptorInputAttachments : u32,
	pub maxPerStageResources : u32,
	pub maxDescriptorSetSamplers : u32,
	pub maxDescriptorSetUniformBuffers : u32,
	pub maxDescriptorSetUniformBuffersDynamic : u32,
	pub maxDescriptorSetStorageBuffers : u32,
	pub maxDescriptorSetStorageBuffersDynamic : u32,
	pub maxDescriptorSetSampledImages : u32,
	pub maxDescriptorSetStorageImages : u32,
	pub maxDescriptorSetInputAttachments : u32,
	pub maxVertexInputAttributes : u32,
	pub maxVertexInputBindings : u32,
	pub maxVertexInputAttributeOffset : u32,
	pub maxVertexInputBindingStride : u32,
	pub maxVertexOutputComponents : u32,
	pub maxTessellationGenerationLevel : u32,
	pub maxTessellationPatchSize : u32,
	pub maxTessellationControlPerVertexInputComponents : u32,
	pub maxTessellationControlPerVertexOutputComponents : u32,
	pub maxTessellationControlPerPatchOutputComponents : u32,
	pub maxTessellationControlTotalOutputComponents : u32,
	pub maxTessellationEvaluationInputComponents : u32,
	pub maxTessellationEvaluationOutputComponents : u32,
	pub maxGeometryShaderInvocations : u32,
	pub maxGeometryInputComponents : u32,
	pub maxGeometryOutputComponents : u32,
	pub maxGeometryOutputVertices : u32,
	pub maxGeometryTotalOutputComponents : u32,
	pub maxFragmentInputComponents : u32,
	pub maxFragmentOutputAttachments : u32,
	pub maxFragmentDualSrcAttachments : u32,
	pub maxFragmentCombinedOutputResources : u32,
	pub maxComputeSharedMemorySize : u32,
	pub maxComputeWorkGroupCount : [u32;3],
	pub maxComputeWorkGroupInvocations : u32,
	pub maxComputeWorkGroupSize : [u32;3],
	pub subPixelPrecisionBits : u32,
	pub subTexelPrecisionBits : u32,
	pub mipmapPrecisionBits : u32,
	pub maxDrawIndexedIndexValue : u32,
	pub maxDrawIndirectCount : u32,
	pub maxSamplerLodBias : f32,
	pub maxSamplerAnisotropy : f32,
	pub maxViewports : u32,
	pub maxViewportDimensions : [u32;2],
	pub viewportBoundsRange : [f32;2],
	pub viewportSubPixelBits : u32,
	pub minMemoryMapAlignment : usize,
	pub minTexelBufferOffsetAlignment : DeviceSize,
	pub minUniformBufferOffsetAlignment : DeviceSize,
	pub minStorageBufferOffsetAlignment : DeviceSize,
	pub minTexelOffset : i32,
	pub maxTexelOffset : u32,
	pub minTexelGatherOffset : i32,
	pub maxTexelGatherOffset : u32,
	pub minInterpolationOffset : f32,
	pub maxInterpolationOffset : f32,
	pub subPixelInterpolationOffsetBits : u32,
	pub maxFramebufferWidth : u32,
	pub maxFramebufferHeight : u32,
	pub maxFramebufferLayers : u32,
	pub framebufferColorSampleCounts : SampleCountFlags,
	pub framebufferDepthSampleCounts : SampleCountFlags,
	pub framebufferStencilSampleCounts : SampleCountFlags,
	pub framebufferNoAttachmentsSampleCounts : SampleCountFlags,
	pub maxColorAttachments : u32,
	pub sampledImageColorSampleCounts : SampleCountFlags,
	pub sampledImageIntegerSampleCounts : SampleCountFlags,
	pub sampledImageDepthSampleCounts : SampleCountFlags,
	pub sampledImageStencilSampleCounts : SampleCountFlags,
	pub storageImageSampleCounts : SampleCountFlags,
	pub maxSampleMaskWords : u32,
	pub timestampComputeAndGraphics : Bool32,
	pub timestampPeriod : f32,
	pub maxClipDistances : u32,
	pub maxCullDistances : u32,
	pub maxCombinedClipAndCullDistances : u32,
	pub discreteQueuePriorities : u32,
	pub pointSizeRange : [f32;2],
	pub lineWidthRange : [f32;2],
	pub pointSizeGranularity : f32,
	pub lineWidthGranularity : f32,
	pub strictLines : Bool32,
	pub standardSampleLocations : Bool32,
	pub optimalBufferCopyOffsetAlignment : DeviceSize,
	pub optimalBufferCopyRowPitchAlignment : DeviceSize,
	pub nonCoherentAtomSize : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSparseProperties {
	pub residencyStandard2DBlockShape : Bool32,
	pub residencyStandard2DMultisampleBlockShape : Bool32,
	pub residencyStandard3DBlockShape : Bool32,
	pub residencyAlignedMipSize : Bool32,
	pub residencyNonResidentStrict : Bool32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PhysicalDeviceProperties {
	pub apiVersion : u32,
	pub driverVersion : u32,
	pub vendorID : u32,
	pub deviceID : u32,
	pub deviceType : PhysicalDeviceType,
	pub deviceName : [i8;MAX_PHYSICAL_DEVICE_NAME_SIZE],
	pub pipelineCacheUUID : [u8;UUID_SIZE],
	pub limits : PhysicalDeviceLimits,
	pub sparseProperties : PhysicalDeviceSparseProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueFamilyProperties {
	pub queueFlags : QueueFlags,
	pub queueCount : u32,
	pub timestampValidBits : u32,
	pub minImageTransferGranularity : Extent3D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryType {
	pub propertyFlags : MemoryPropertyFlags,
	pub heapIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryHeap {
	pub size : DeviceSize,
	pub flags : MemoryHeapFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMemoryProperties {
	pub memoryTypeCount : u32,
	pub memoryTypes : [MemoryType;MAX_MEMORY_TYPES],
	pub memoryHeapCount : u32,
	pub memoryHeaps : [MemoryHeap;MAX_MEMORY_HEAPS],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceQueueCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DeviceQueueCreateFlags,
	pub queueFamilyIndex : u32,
	pub queueCount : u32,
	pub pQueuePriorities : *const f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DeviceCreateFlags,
	pub queueCreateInfoCount : u32,
	pub pQueueCreateInfos : *const DeviceQueueCreateInfo,
	pub enabledLayerCount : u32,
	pub ppEnabledLayerNames : *const *const i8,
	pub enabledExtensionCount : u32,
	pub ppEnabledExtensionNames : *const *const i8,
	pub pEnabledFeatures : *const PhysicalDeviceFeatures,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct ExtensionProperties {
	pub extensionName : [i8;MAX_EXTENSION_NAME_SIZE],
	pub specVersion : u32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct LayerProperties {
	pub layerName : [i8;MAX_EXTENSION_NAME_SIZE],
	pub specVersion : u32,
	pub implementationVersion : u32,
	pub description : [i8;MAX_DESCRIPTION_SIZE],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubmitInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub waitSemaphoreCount : u32,
	pub pWaitSemaphores : *const Semaphore,
	pub pWaitDstStageMask : *const PipelineStageFlags,
	pub commandBufferCount : u32,
	pub pCommandBuffers : *const CommandBuffer,
	pub signalSemaphoreCount : u32,
	pub pSignalSemaphores : *const Semaphore,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub allocationSize : DeviceSize,
	pub memoryTypeIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MappedMemoryRange {
	pub sType : StructureType,
	pub pNext : *const void,
	pub memory : DeviceMemory,
	pub offset : DeviceSize,
	pub size : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryRequirements {
	pub size : DeviceSize,
	pub alignment : DeviceSize,
	pub memoryTypeBits : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageFormatProperties {
	pub aspectMask : ImageAspectFlags,
	pub imageGranularity : Extent3D,
	pub flags : SparseImageFormatFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageMemoryRequirements {
	pub formatProperties : SparseImageFormatProperties,
	pub imageMipTailFirstLod : u32,
	pub imageMipTailSize : DeviceSize,
	pub imageMipTailOffset : DeviceSize,
	pub imageMipTailStride : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseMemoryBind {
	pub resourceOffset : DeviceSize,
	pub size : DeviceSize,
	pub memory : DeviceMemory,
	pub memoryOffset : DeviceSize,
	pub flags : SparseMemoryBindFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseBufferMemoryBindInfo {
	pub buffer : Buffer,
	pub bindCount : u32,
	pub pBinds : *const SparseMemoryBind,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageOpaqueMemoryBindInfo {
	pub image : Image,
	pub bindCount : u32,
	pub pBinds : *const SparseMemoryBind,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageSubresource {
	pub aspectMask : ImageAspectFlags,
	pub mipLevel : u32,
	pub arrayLayer : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Offset3D {
	pub x : i32,
	pub y : i32,
	pub z : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageMemoryBind {
	pub subresource : ImageSubresource,
	pub offset : Offset3D,
	pub extent : Extent3D,
	pub memory : DeviceMemory,
	pub memoryOffset : DeviceSize,
	pub flags : SparseMemoryBindFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageMemoryBindInfo {
	pub image : Image,
	pub bindCount : u32,
	pub pBinds : *const SparseImageMemoryBind,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindSparseInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub waitSemaphoreCount : u32,
	pub pWaitSemaphores : *const Semaphore,
	pub bufferBindCount : u32,
	pub pBufferBinds : *const SparseBufferMemoryBindInfo,
	pub imageOpaqueBindCount : u32,
	pub pImageOpaqueBinds : *const SparseImageOpaqueMemoryBindInfo,
	pub imageBindCount : u32,
	pub pImageBinds : *const SparseImageMemoryBindInfo,
	pub signalSemaphoreCount : u32,
	pub pSignalSemaphores : *const Semaphore,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FenceCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : FenceCreateFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : SemaphoreCreateFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EventCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : EventCreateFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueryPoolCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : QueryPoolCreateFlags,
	pub queryType : QueryType,
	pub queryCount : u32,
	pub pipelineStatistics : QueryPipelineStatisticFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : BufferCreateFlags,
	pub size : DeviceSize,
	pub usage : BufferUsageFlags,
	pub sharingMode : SharingMode,
	pub queueFamilyIndexCount : u32,
	pub pQueueFamilyIndices : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferViewCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : BufferViewCreateFlags,
	pub buffer : Buffer,
	pub format : Format,
	pub offset : DeviceSize,
	pub range : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : ImageCreateFlags,
	pub imageType : ImageType,
	pub format : Format,
	pub extent : Extent3D,
	pub mipLevels : u32,
	pub arrayLayers : u32,
	pub samples : SampleCountFlagBits,
	pub tiling : ImageTiling,
	pub usage : ImageUsageFlags,
	pub sharingMode : SharingMode,
	pub queueFamilyIndexCount : u32,
	pub pQueueFamilyIndices : *const u32,
	pub initialLayout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubresourceLayout {
	pub offset : DeviceSize,
	pub size : DeviceSize,
	pub rowPitch : DeviceSize,
	pub arrayPitch : DeviceSize,
	pub depthPitch : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComponentMapping {
	pub r : ComponentSwizzle,
	pub g : ComponentSwizzle,
	pub b : ComponentSwizzle,
	pub a : ComponentSwizzle,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageSubresourceRange {
	pub aspectMask : ImageAspectFlags,
	pub baseMipLevel : u32,
	pub levelCount : u32,
	pub baseArrayLayer : u32,
	pub layerCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageViewCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : ImageViewCreateFlags,
	pub image : Image,
	pub viewType : ImageViewType,
	pub format : Format,
	pub components : ComponentMapping,
	pub subresourceRange : ImageSubresourceRange,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderModuleCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : ShaderModuleCreateFlags,
	pub codeSize : usize,
	pub pCode : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCacheCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCacheCreateFlags,
	pub initialDataSize : usize,
	pub pInitialData : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpecializationMapEntry {
	pub constantID : u32,
	pub offset : u32,
	pub size : usize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpecializationInfo {
	pub mapEntryCount : u32,
	pub pMapEntries : *const SpecializationMapEntry,
	pub dataSize : usize,
	pub pData : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineShaderStageCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineShaderStageCreateFlags,
	pub stage : ShaderStageFlagBits,
	pub module : ShaderModule,
	pub pName : *const i8,
	pub pSpecializationInfo : *const SpecializationInfo,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VertexInputBindingDescription {
	pub binding : u32,
	pub stride : u32,
	pub inputRate : VertexInputRate,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VertexInputAttributeDescription {
	pub location : u32,
	pub binding : u32,
	pub format : Format,
	pub offset : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineVertexInputStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineVertexInputStateCreateFlags,
	pub vertexBindingDescriptionCount : u32,
	pub pVertexBindingDescriptions : *const VertexInputBindingDescription,
	pub vertexAttributeDescriptionCount : u32,
	pub pVertexAttributeDescriptions : *const VertexInputAttributeDescription,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineInputAssemblyStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineInputAssemblyStateCreateFlags,
	pub topology : PrimitiveTopology,
	pub primitiveRestartEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineTessellationStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineTessellationStateCreateFlags,
	pub patchControlPoints : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Viewport {
	pub x : f32,
	pub y : f32,
	pub width : f32,
	pub height : f32,
	pub minDepth : f32,
	pub maxDepth : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Offset2D {
	pub x : i32,
	pub y : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Extent2D {
	pub width : u32,
	pub height : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect2D {
	pub offset : Offset2D,
	pub extent : Extent2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineViewportStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineViewportStateCreateFlags,
	pub viewportCount : u32,
	pub pViewports : *const Viewport,
	pub scissorCount : u32,
	pub pScissors : *const Rect2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRasterizationStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineRasterizationStateCreateFlags,
	pub depthClampEnable : Bool32,
	pub rasterizerDiscardEnable : Bool32,
	pub polygonMode : PolygonMode,
	pub cullMode : CullModeFlags,
	pub frontFace : FrontFace,
	pub depthBiasEnable : Bool32,
	pub depthBiasConstantFactor : f32,
	pub depthBiasClamp : f32,
	pub depthBiasSlopeFactor : f32,
	pub lineWidth : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineMultisampleStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineMultisampleStateCreateFlags,
	pub rasterizationSamples : SampleCountFlagBits,
	pub sampleShadingEnable : Bool32,
	pub minSampleShading : f32,
	pub pSampleMask : *const SampleMask,
	pub alphaToCoverageEnable : Bool32,
	pub alphaToOneEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StencilOpState {
	pub failOp : StencilOp,
	pub passOp : StencilOp,
	pub depthFailOp : StencilOp,
	pub compareOp : CompareOp,
	pub compareMask : u32,
	pub writeMask : u32,
	pub reference : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineDepthStencilStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineDepthStencilStateCreateFlags,
	pub depthTestEnable : Bool32,
	pub depthWriteEnable : Bool32,
	pub depthCompareOp : CompareOp,
	pub depthBoundsTestEnable : Bool32,
	pub stencilTestEnable : Bool32,
	pub front : StencilOpState,
	pub back : StencilOpState,
	pub minDepthBounds : f32,
	pub maxDepthBounds : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineColorBlendAttachmentState {
	pub blendEnable : Bool32,
	pub srcColorBlendFactor : BlendFactor,
	pub dstColorBlendFactor : BlendFactor,
	pub colorBlendOp : BlendOp,
	pub srcAlphaBlendFactor : BlendFactor,
	pub dstAlphaBlendFactor : BlendFactor,
	pub alphaBlendOp : BlendOp,
	pub colorWriteMask : ColorComponentFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineColorBlendStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineColorBlendStateCreateFlags,
	pub logicOpEnable : Bool32,
	pub logicOp : LogicOp,
	pub attachmentCount : u32,
	pub pAttachments : *const PipelineColorBlendAttachmentState,
	pub blendConstants : [f32;4],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineDynamicStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineDynamicStateCreateFlags,
	pub dynamicStateCount : u32,
	pub pDynamicStates : *const DynamicState,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GraphicsPipelineCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCreateFlags,
	pub stageCount : u32,
	pub pStages : *const PipelineShaderStageCreateInfo,
	pub pVertexInputState : *const PipelineVertexInputStateCreateInfo,
	pub pInputAssemblyState : *const PipelineInputAssemblyStateCreateInfo,
	pub pTessellationState : *const PipelineTessellationStateCreateInfo,
	pub pViewportState : *const PipelineViewportStateCreateInfo,
	pub pRasterizationState : *const PipelineRasterizationStateCreateInfo,
	pub pMultisampleState : *const PipelineMultisampleStateCreateInfo,
	pub pDepthStencilState : *const PipelineDepthStencilStateCreateInfo,
	pub pColorBlendState : *const PipelineColorBlendStateCreateInfo,
	pub pDynamicState : *const PipelineDynamicStateCreateInfo,
	pub layout : PipelineLayout,
	pub renderPass : RenderPass,
	pub subpass : u32,
	pub basePipelineHandle : Pipeline,
	pub basePipelineIndex : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComputePipelineCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCreateFlags,
	pub stage : PipelineShaderStageCreateInfo,
	pub layout : PipelineLayout,
	pub basePipelineHandle : Pipeline,
	pub basePipelineIndex : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PushConstantRange {
	pub stageFlags : ShaderStageFlags,
	pub offset : u32,
	pub size : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineLayoutCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineLayoutCreateFlags,
	pub setLayoutCount : u32,
	pub pSetLayouts : *const DescriptorSetLayout,
	pub pushConstantRangeCount : u32,
	pub pPushConstantRanges : *const PushConstantRange,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplerCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : SamplerCreateFlags,
	pub magFilter : Filter,
	pub minFilter : Filter,
	pub mipmapMode : SamplerMipmapMode,
	pub addressModeU : SamplerAddressMode,
	pub addressModeV : SamplerAddressMode,
	pub addressModeW : SamplerAddressMode,
	pub mipLodBias : f32,
	pub anisotropyEnable : Bool32,
	pub maxAnisotropy : f32,
	pub compareEnable : Bool32,
	pub compareOp : CompareOp,
	pub minLod : f32,
	pub maxLod : f32,
	pub borderColor : BorderColor,
	pub unnormalizedCoordinates : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetLayoutBinding {
	pub binding : u32,
	pub descriptorType : DescriptorType,
	pub descriptorCount : u32,
	pub stageFlags : ShaderStageFlags,
	pub pImmutableSamplers : *const Sampler,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetLayoutCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DescriptorSetLayoutCreateFlags,
	pub bindingCount : u32,
	pub pBindings : *const DescriptorSetLayoutBinding,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorPoolSize {
	pub r#type : DescriptorType,
	pub descriptorCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorPoolCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DescriptorPoolCreateFlags,
	pub maxSets : u32,
	pub poolSizeCount : u32,
	pub pPoolSizes : *const DescriptorPoolSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub descriptorPool : DescriptorPool,
	pub descriptorSetCount : u32,
	pub pSetLayouts : *const DescriptorSetLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorImageInfo {
	pub sampler : Sampler,
	pub imageView : ImageView,
	pub imageLayout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorBufferInfo {
	pub buffer : Buffer,
	pub offset : DeviceSize,
	pub range : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WriteDescriptorSet {
	pub sType : StructureType,
	pub pNext : *const void,
	pub dstSet : DescriptorSet,
	pub dstBinding : u32,
	pub dstArrayElement : u32,
	pub descriptorCount : u32,
	pub descriptorType : DescriptorType,
	pub pImageInfo : *const DescriptorImageInfo,
	pub pBufferInfo : *const DescriptorBufferInfo,
	pub pTexelBufferView : *const BufferView,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CopyDescriptorSet {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcSet : DescriptorSet,
	pub srcBinding : u32,
	pub srcArrayElement : u32,
	pub dstSet : DescriptorSet,
	pub dstBinding : u32,
	pub dstArrayElement : u32,
	pub descriptorCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FramebufferCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : FramebufferCreateFlags,
	pub renderPass : RenderPass,
	pub attachmentCount : u32,
	pub pAttachments : *const ImageView,
	pub width : u32,
	pub height : u32,
	pub layers : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentDescription {
	pub flags : AttachmentDescriptionFlags,
	pub format : Format,
	pub samples : SampleCountFlagBits,
	pub loadOp : AttachmentLoadOp,
	pub storeOp : AttachmentStoreOp,
	pub stencilLoadOp : AttachmentLoadOp,
	pub stencilStoreOp : AttachmentStoreOp,
	pub initialLayout : ImageLayout,
	pub finalLayout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentReference {
	pub attachment : u32,
	pub layout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassDescription {
	pub flags : SubpassDescriptionFlags,
	pub pipelineBindPoint : PipelineBindPoint,
	pub inputAttachmentCount : u32,
	pub pInputAttachments : *const AttachmentReference,
	pub colorAttachmentCount : u32,
	pub pColorAttachments : *const AttachmentReference,
	pub pResolveAttachments : *const AttachmentReference,
	pub pDepthStencilAttachment : *const AttachmentReference,
	pub preserveAttachmentCount : u32,
	pub pPreserveAttachments : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassDependency {
	pub srcSubpass : u32,
	pub dstSubpass : u32,
	pub srcStageMask : PipelineStageFlags,
	pub dstStageMask : PipelineStageFlags,
	pub srcAccessMask : AccessFlags,
	pub dstAccessMask : AccessFlags,
	pub dependencyFlags : DependencyFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : RenderPassCreateFlags,
	pub attachmentCount : u32,
	pub pAttachments : *const AttachmentDescription,
	pub subpassCount : u32,
	pub pSubpasses : *const SubpassDescription,
	pub dependencyCount : u32,
	pub pDependencies : *const SubpassDependency,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommandPoolCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : CommandPoolCreateFlags,
	pub queueFamilyIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommandBufferAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub commandPool : CommandPool,
	pub level : CommandBufferLevel,
	pub commandBufferCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommandBufferInheritanceInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub renderPass : RenderPass,
	pub subpass : u32,
	pub framebuffer : Framebuffer,
	pub occlusionQueryEnable : Bool32,
	pub queryFlags : QueryControlFlags,
	pub pipelineStatistics : QueryPipelineStatisticFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommandBufferBeginInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : CommandBufferUsageFlags,
	pub pInheritanceInfo : *const CommandBufferInheritanceInfo,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferCopy {
	pub srcOffset : DeviceSize,
	pub dstOffset : DeviceSize,
	pub size : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageSubresourceLayers {
	pub aspectMask : ImageAspectFlags,
	pub mipLevel : u32,
	pub baseArrayLayer : u32,
	pub layerCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageCopy {
	pub srcSubresource : ImageSubresourceLayers,
	pub srcOffset : Offset3D,
	pub dstSubresource : ImageSubresourceLayers,
	pub dstOffset : Offset3D,
	pub extent : Extent3D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageBlit {
	pub srcSubresource : ImageSubresourceLayers,
	pub srcOffsets : [Offset3D;2],
	pub dstSubresource : ImageSubresourceLayers,
	pub dstOffsets : [Offset3D;2],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferImageCopy {
	pub bufferOffset : DeviceSize,
	pub bufferRowLength : u32,
	pub bufferImageHeight : u32,
	pub imageSubresource : ImageSubresourceLayers,
	pub imageOffset : Offset3D,
	pub imageExtent : Extent3D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClearColorValue {
    pub float32 : [f32;4],
}

impl Default for ClearColorValue {
	fn default() -> ClearColorValue {
		ClearColorValue {
			float32 : [0 as f32; 4]
		}
	}
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClearDepthStencilValue {
	pub depth : f32,
	pub stencil : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClearValue {
    pub color : [f32;4],
}

impl ClearValue {
	pub fn color(r : f32, g : f32, b : f32, a : f32) -> ClearValue {
		ClearValue {
			color : [r, g, b, a]
		}
	}
	pub fn depth(depth : f32, stencil : f32) -> ClearValue {
		ClearValue {
			color : [depth, stencil, 0., 0.]
		}
	}
}

impl Default for ClearValue {
	fn default() -> ClearValue {
		ClearValue {
			color : [0 as f32; 4]
		}
	}
}

#[repr(C)] 
#[derive(Debug, Copy, Clone)]
pub struct ClearAttachment {
	pub aspectMask : ImageAspectFlags,
	pub colorAttachment : u32,
	pub clearValue : ClearValue,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClearRect {
	pub rect : Rect2D,
	pub baseArrayLayer : u32,
	pub layerCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageResolve {
	pub srcSubresource : ImageSubresourceLayers,
	pub srcOffset : Offset3D,
	pub dstSubresource : ImageSubresourceLayers,
	pub dstOffset : Offset3D,
	pub extent : Extent3D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryBarrier {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcAccessMask : AccessFlags,
	pub dstAccessMask : AccessFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferMemoryBarrier {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcAccessMask : AccessFlags,
	pub dstAccessMask : AccessFlags,
	pub srcQueueFamilyIndex : u32,
	pub dstQueueFamilyIndex : u32,
	pub buffer : Buffer,
	pub offset : DeviceSize,
	pub size : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageMemoryBarrier {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcAccessMask : AccessFlags,
	pub dstAccessMask : AccessFlags,
	pub oldLayout : ImageLayout,
	pub newLayout : ImageLayout,
	pub srcQueueFamilyIndex : u32,
	pub dstQueueFamilyIndex : u32,
	pub image : Image,
	pub subresourceRange : ImageSubresourceRange,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassBeginInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub renderPass : RenderPass,
	pub framebuffer : Framebuffer,
	pub renderArea : Rect2D,
	pub clearValueCount : u32,
	pub pClearValues : *const ClearValue,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchIndirectCommand {
	pub x : u32,
	pub y : u32,
	pub z : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawIndexedIndirectCommand {
	pub indexCount : u32,
	pub instanceCount : u32,
	pub firstIndex : u32,
	pub vertexOffset : i32,
	pub firstInstance : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawIndirectCommand {
	pub vertexCount : u32,
	pub instanceCount : u32,
	pub firstVertex : u32,
	pub firstInstance : u32,
}

pub type SamplerYcbcrConversion = u64;
pub type DescriptorUpdateTemplate = u64;
pub type PointClippingBehavior = i32;
pub const POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES : i32 = 0;
pub const POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY : i32 = 1;
pub const POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR : i32 = POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES;
pub const POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR : i32 = POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY;
pub const POINT_CLIPPING_BEHAVIOR_MAX_ENUM : i32 = 0x7FFFFFF;
pub type TessellationDomainOrigin = i32;
pub const TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT : i32 = 0;
pub const TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT : i32 = 1;
pub const TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR : i32 = TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT;
pub const TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR : i32 = TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT;
pub const TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SamplerYcbcrModelConversion = i32;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY : i32 = 0;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY : i32 = 1;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 : i32 = 2;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 : i32 = 3;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 : i32 = 4;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR : i32 = SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR : i32 = SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR : i32 = SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR : i32 = SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR : i32 = SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020;
pub const SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SamplerYcbcrRange = i32;
pub const SAMPLER_YCBCR_RANGE_ITU_FULL : i32 = 0;
pub const SAMPLER_YCBCR_RANGE_ITU_NARROW : i32 = 1;
pub const SAMPLER_YCBCR_RANGE_ITU_FULL_KHR : i32 = SAMPLER_YCBCR_RANGE_ITU_FULL;
pub const SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR : i32 = SAMPLER_YCBCR_RANGE_ITU_NARROW;
pub const SAMPLER_YCBCR_RANGE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ChromaLocation = i32;
pub const CHROMA_LOCATION_COSITED_EVEN : i32 = 0;
pub const CHROMA_LOCATION_MIDPOINT : i32 = 1;
pub const CHROMA_LOCATION_COSITED_EVEN_KHR : i32 = CHROMA_LOCATION_COSITED_EVEN;
pub const CHROMA_LOCATION_MIDPOINT_KHR : i32 = CHROMA_LOCATION_MIDPOINT;
pub const CHROMA_LOCATION_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DescriptorUpdateTemplateType = i32;
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET : i32 = 0;
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR : i32 = 1;
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR : i32 = DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET;
pub const DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SubgroupFeatureFlagBits = i32;
pub const SUBGROUP_FEATURE_BASIC_BIT : i32 = 0x00000001;
pub const SUBGROUP_FEATURE_VOTE_BIT : i32 = 0x00000002;
pub const SUBGROUP_FEATURE_ARITHMETIC_BIT : i32 = 0x00000004;
pub const SUBGROUP_FEATURE_BALLOT_BIT : i32 = 0x00000008;
pub const SUBGROUP_FEATURE_SHUFFLE_BIT : i32 = 0x00000010;
pub const SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT : i32 = 0x00000020;
pub const SUBGROUP_FEATURE_CLUSTERED_BIT : i32 = 0x00000040;
pub const SUBGROUP_FEATURE_QUAD_BIT : i32 = 0x00000080;
pub const SUBGROUP_FEATURE_PARTITIONED_BIT_NV : i32 = 0x00000100;
pub const SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SubgroupFeatureFlags = i32;
pub type PeerMemoryFeatureFlagBits = i32;
pub const PEER_MEMORY_FEATURE_COPY_SRC_BIT : i32 = 0x00000001;
pub const PEER_MEMORY_FEATURE_COPY_DST_BIT : i32 = 0x00000002;
pub const PEER_MEMORY_FEATURE_GENERIC_SRC_BIT : i32 = 0x00000004;
pub const PEER_MEMORY_FEATURE_GENERIC_DST_BIT : i32 = 0x00000008;
pub const PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR : i32 = PEER_MEMORY_FEATURE_COPY_SRC_BIT;
pub const PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR : i32 = PEER_MEMORY_FEATURE_COPY_DST_BIT;
pub const PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR : i32 = PEER_MEMORY_FEATURE_GENERIC_SRC_BIT;
pub const PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR : i32 = PEER_MEMORY_FEATURE_GENERIC_DST_BIT;
pub const PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type PeerMemoryFeatureFlags = i32;
pub type MemoryAllocateFlagBits = i32;
pub const MEMORY_ALLOCATE_DEVICE_MASK_BIT : i32 = 0x00000001;
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT : i32 = 0x00000002;
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT : i32 = 0x00000004;
pub const MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR : i32 = MEMORY_ALLOCATE_DEVICE_MASK_BIT;
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR : i32 = MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT;
pub const MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR : i32 = MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
pub const MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type MemoryAllocateFlags = i32;
pub type CommandPoolTrimFlags = i32;
pub type DescriptorUpdateTemplateCreateFlags = i32;
pub type ExternalMemoryHandleTypeFlagBits = i32;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT : i32 = 0x00000001;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT : i32 = 0x00000002;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : i32 = 0x00000004;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT : i32 = 0x00000008;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT : i32 = 0x00000010;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT : i32 = 0x00000020;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT : i32 = 0x00000040;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT : i32 = 0x00000200;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID : i32 = 0x00000400;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT : i32 = 0x00000080;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT : i32 = 0x00000100;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR : i32 = EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ExternalMemoryHandleTypeFlags = i32;
pub type ExternalMemoryFeatureFlagBits = i32;
pub const EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT : i32 = 0x00000001;
pub const EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT : i32 = 0x00000002;
pub const EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT : i32 = 0x00000004;
pub const EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR : i32 = EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT;
pub const EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR : i32 = EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT;
pub const EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR : i32 = EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT;
pub const EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ExternalMemoryFeatureFlags = i32;
pub type ExternalFenceHandleTypeFlagBits = i32;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT : i32 = 0x00000001;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT : i32 = 0x00000002;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : i32 = 0x00000004;
pub const EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT : i32 = 0x00000008;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR : i32 = EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR : i32 = EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
pub const EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : i32 = EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
pub const EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR : i32 = EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT;
pub const EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ExternalFenceHandleTypeFlags = i32;
pub type ExternalFenceFeatureFlagBits = i32;
pub const EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT : i32 = 0x00000001;
pub const EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT : i32 = 0x00000002;
pub const EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR : i32 = EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT;
pub const EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR : i32 = EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT;
pub const EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ExternalFenceFeatureFlags = i32;
pub type FenceImportFlagBits = i32;
pub const FENCE_IMPORT_TEMPORARY_BIT : i32 = 0x00000001;
pub const FENCE_IMPORT_TEMPORARY_BIT_KHR : i32 = FENCE_IMPORT_TEMPORARY_BIT;
pub const FENCE_IMPORT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type FenceImportFlags = i32;
pub type SemaphoreImportFlagBits = i32;
pub const SEMAPHORE_IMPORT_TEMPORARY_BIT : i32 = 0x00000001;
pub const SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR : i32 = SEMAPHORE_IMPORT_TEMPORARY_BIT;
pub const SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SemaphoreImportFlags = i32;
pub type ExternalSemaphoreHandleTypeFlagBits = i32;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT : i32 = 0x00000001;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT : i32 = 0x00000002;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : i32 = 0x00000004;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT : i32 = 0x00000008;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT : i32 = 0x00000010;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
pub const EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ExternalSemaphoreHandleTypeFlags = i32;
pub type ExternalSemaphoreFeatureFlagBits = i32;
pub const EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT : i32 = 0x00000001;
pub const EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT : i32 = 0x00000002;
pub const EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT;
pub const EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR : i32 = EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT;
pub const EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ExternalSemaphoreFeatureFlags = i32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSubgroupProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub subgroupSize : u32,
	pub supportedStages : ShaderStageFlags,
	pub supportedOperations : SubgroupFeatureFlags,
	pub quadOperationsInAllStages : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindBufferMemoryInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub buffer : Buffer,
	pub memory : DeviceMemory,
	pub memoryOffset : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindImageMemoryInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub image : Image,
	pub memory : DeviceMemory,
	pub memoryOffset : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevice16BitStorageFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub storageBuffer16BitAccess : Bool32,
	pub uniformAndStorageBuffer16BitAccess : Bool32,
	pub storagePushConstant16 : Bool32,
	pub storageInputOutput16 : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryDedicatedRequirements {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub prefersDedicatedAllocation : Bool32,
	pub requiresDedicatedAllocation : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryDedicatedAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub image : Image,
	pub buffer : Buffer,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryAllocateFlagsInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : MemoryAllocateFlags,
	pub deviceMask : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupRenderPassBeginInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub deviceMask : u32,
	pub deviceRenderAreaCount : u32,
	pub pDeviceRenderAreas : *const Rect2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupCommandBufferBeginInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub deviceMask : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupSubmitInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub waitSemaphoreCount : u32,
	pub pWaitSemaphoreDeviceIndices : *const u32,
	pub commandBufferCount : u32,
	pub pCommandBufferDeviceMasks : *const u32,
	pub signalSemaphoreCount : u32,
	pub pSignalSemaphoreDeviceIndices : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupBindSparseInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub resourceDeviceIndex : u32,
	pub memoryDeviceIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindBufferMemoryDeviceGroupInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub deviceIndexCount : u32,
	pub pDeviceIndices : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindImageMemoryDeviceGroupInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub deviceIndexCount : u32,
	pub pDeviceIndices : *const u32,
	pub splitInstanceBindRegionCount : u32,
	pub pSplitInstanceBindRegions : *const Rect2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceGroupProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub physicalDeviceCount : u32,
	pub physicalDevices : [PhysicalDevice;MAX_DEVICE_GROUP_SIZE],
	pub subsetAllocation : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupDeviceCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub physicalDeviceCount : u32,
	pub pPhysicalDevices : *const PhysicalDevice,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferMemoryRequirementsInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub buffer : Buffer,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageMemoryRequirementsInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub image : Image,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageSparseMemoryRequirementsInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub image : Image,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryRequirements2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub memoryRequirements : MemoryRequirements,
}

pub type MemoryRequirements2KHR = MemoryRequirements2;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageMemoryRequirements2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub memoryRequirements : SparseImageMemoryRequirements,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFeatures2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub features : PhysicalDeviceFeatures,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PhysicalDeviceProperties2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub properties : PhysicalDeviceProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FormatProperties2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub formatProperties : FormatProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageFormatProperties2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub imageFormatProperties : ImageFormatProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceImageFormatInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub format : Format,
	pub r#type : ImageType,
	pub tiling : ImageTiling,
	pub usage : ImageUsageFlags,
	pub flags : ImageCreateFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueFamilyProperties2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub queueFamilyProperties : QueueFamilyProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMemoryProperties2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub memoryProperties : PhysicalDeviceMemoryProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SparseImageFormatProperties2 {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub properties : SparseImageFormatProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSparseImageFormatInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub format : Format,
	pub r#type : ImageType,
	pub samples : SampleCountFlagBits,
	pub usage : ImageUsageFlags,
	pub tiling : ImageTiling,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePointClippingProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub pointClippingBehavior : PointClippingBehavior,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputAttachmentAspectReference {
	pub subpass : u32,
	pub inputAttachmentIndex : u32,
	pub aspectMask : ImageAspectFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassInputAttachmentAspectCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub aspectReferenceCount : u32,
	pub pAspectReferences : *const InputAttachmentAspectReference,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageViewUsageCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub usage : ImageUsageFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineTessellationDomainOriginStateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub domainOrigin : TessellationDomainOrigin,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassMultiviewCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub subpassCount : u32,
	pub pViewMasks : *const u32,
	pub dependencyCount : u32,
	pub pViewOffsets : *const i32,
	pub correlationMaskCount : u32,
	pub pCorrelationMasks : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMultiviewFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub multiview : Bool32,
	pub multiviewGeometryShader : Bool32,
	pub multiviewTessellationShader : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMultiviewProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxMultiviewViewCount : u32,
	pub maxMultiviewInstanceIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVariablePointersFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub variablePointersStorageBuffer : Bool32,
	pub variablePointers : Bool32,
}

pub type PhysicalDeviceVariablePointerFeatures = PhysicalDeviceVariablePointersFeatures;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceProtectedMemoryFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub protectedMemory : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceProtectedMemoryProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub protectedNoFault : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceQueueInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DeviceQueueCreateFlags,
	pub queueFamilyIndex : u32,
	pub queueIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtectedSubmitInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub protectedSubmit : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplerYcbcrConversionCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub format : Format,
	pub ycbcrModel : SamplerYcbcrModelConversion,
	pub ycbcrRange : SamplerYcbcrRange,
	pub components : ComponentMapping,
	pub xChromaOffset : ChromaLocation,
	pub yChromaOffset : ChromaLocation,
	pub chromaFilter : Filter,
	pub forceExplicitReconstruction : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplerYcbcrConversionInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub conversion : SamplerYcbcrConversion,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindImagePlaneMemoryInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub planeAspect : ImageAspectFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImagePlaneMemoryRequirementsInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub planeAspect : ImageAspectFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSamplerYcbcrConversionFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub samplerYcbcrConversion : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplerYcbcrConversionImageFormatProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub combinedImageSamplerDescriptorCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorUpdateTemplateEntry {
	pub dstBinding : u32,
	pub dstArrayElement : u32,
	pub descriptorCount : u32,
	pub descriptorType : DescriptorType,
	pub offset : usize,
	pub stride : usize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorUpdateTemplateCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DescriptorUpdateTemplateCreateFlags,
	pub descriptorUpdateEntryCount : u32,
	pub pDescriptorUpdateEntries : *const DescriptorUpdateTemplateEntry,
	pub templateType : DescriptorUpdateTemplateType,
	pub descriptorSetLayout : DescriptorSetLayout,
	pub pipelineBindPoint : PipelineBindPoint,
	pub pipelineLayout : PipelineLayout,
	pub set : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalMemoryProperties {
	pub externalMemoryFeatures : ExternalMemoryFeatureFlags,
	pub exportFromImportedHandleTypes : ExternalMemoryHandleTypeFlags,
	pub compatibleHandleTypes : ExternalMemoryHandleTypeFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceExternalImageFormatInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleType : ExternalMemoryHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalImageFormatProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub externalMemoryProperties : ExternalMemoryProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceExternalBufferInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : BufferCreateFlags,
	pub usage : BufferUsageFlags,
	pub handleType : ExternalMemoryHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalBufferProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub externalMemoryProperties : ExternalMemoryProperties,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceIDProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub deviceUUID : [u8;UUID_SIZE],
	pub driverUUID : [u8;UUID_SIZE],
	pub deviceLUID : [u8;LUID_SIZE],
	pub deviceNodeMask : u32,
	pub deviceLUIDValid : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalMemoryImageCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalMemoryHandleTypeFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalMemoryBufferCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalMemoryHandleTypeFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportMemoryAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalMemoryHandleTypeFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceExternalFenceInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleType : ExternalFenceHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalFenceProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub exportFromImportedHandleTypes : ExternalFenceHandleTypeFlags,
	pub compatibleHandleTypes : ExternalFenceHandleTypeFlags,
	pub externalFenceFeatures : ExternalFenceFeatureFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportFenceCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalFenceHandleTypeFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportSemaphoreCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalSemaphoreHandleTypeFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceExternalSemaphoreInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleType : ExternalSemaphoreHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalSemaphoreProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub exportFromImportedHandleTypes : ExternalSemaphoreHandleTypeFlags,
	pub compatibleHandleTypes : ExternalSemaphoreHandleTypeFlags,
	pub externalSemaphoreFeatures : ExternalSemaphoreFeatureFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMaintenance3Properties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxPerSetDescriptors : u32,
	pub maxMemoryAllocationSize : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetLayoutSupport {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub supported : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderDrawParametersFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderDrawParameters : Bool32,
}

pub type PhysicalDeviceShaderDrawParameterFeatures = PhysicalDeviceShaderDrawParametersFeatures;
pub type DeviceAddress = u64;
pub type DriverId = i32;
pub const DRIVER_ID_AMD_PROPRIETARY : i32 = 1;
pub const DRIVER_ID_AMD_OPEN_SOURCE : i32 = 2;
pub const DRIVER_ID_MESA_RADV : i32 = 3;
pub const DRIVER_ID_NVIDIA_PROPRIETARY : i32 = 4;
pub const DRIVER_ID_INTEL_PROPRIETARY_WINDOWS : i32 = 5;
pub const DRIVER_ID_INTEL_OPEN_SOURCE_MESA : i32 = 6;
pub const DRIVER_ID_IMAGINATION_PROPRIETARY : i32 = 7;
pub const DRIVER_ID_QUALCOMM_PROPRIETARY : i32 = 8;
pub const DRIVER_ID_ARM_PROPRIETARY : i32 = 9;
pub const DRIVER_ID_GOOGLE_SWIFTSHADER : i32 = 10;
pub const DRIVER_ID_GGP_PROPRIETARY : i32 = 11;
pub const DRIVER_ID_BROADCOM_PROPRIETARY : i32 = 12;
pub const DRIVER_ID_MESA_LLVMPIPE : i32 = 13;
pub const DRIVER_ID_AMD_PROPRIETARY_KHR : i32 = DRIVER_ID_AMD_PROPRIETARY;
pub const DRIVER_ID_AMD_OPEN_SOURCE_KHR : i32 = DRIVER_ID_AMD_OPEN_SOURCE;
pub const DRIVER_ID_MESA_RADV_KHR : i32 = DRIVER_ID_MESA_RADV;
pub const DRIVER_ID_NVIDIA_PROPRIETARY_KHR : i32 = DRIVER_ID_NVIDIA_PROPRIETARY;
pub const DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR : i32 = DRIVER_ID_INTEL_PROPRIETARY_WINDOWS;
pub const DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR : i32 = DRIVER_ID_INTEL_OPEN_SOURCE_MESA;
pub const DRIVER_ID_IMAGINATION_PROPRIETARY_KHR : i32 = DRIVER_ID_IMAGINATION_PROPRIETARY;
pub const DRIVER_ID_QUALCOMM_PROPRIETARY_KHR : i32 = DRIVER_ID_QUALCOMM_PROPRIETARY;
pub const DRIVER_ID_ARM_PROPRIETARY_KHR : i32 = DRIVER_ID_ARM_PROPRIETARY;
pub const DRIVER_ID_GOOGLE_SWIFTSHADER_KHR : i32 = DRIVER_ID_GOOGLE_SWIFTSHADER;
pub const DRIVER_ID_GGP_PROPRIETARY_KHR : i32 = DRIVER_ID_GGP_PROPRIETARY;
pub const DRIVER_ID_BROADCOM_PROPRIETARY_KHR : i32 = DRIVER_ID_BROADCOM_PROPRIETARY;
pub const DRIVER_ID_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ShaderFloatControlsIndependence = i32;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY : i32 = 0;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL : i32 = 1;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE : i32 = 2;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR : i32 = SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR : i32 = SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR : i32 = SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE;
pub const SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SamplerReductionMode = i32;
pub const SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE : i32 = 0;
pub const SAMPLER_REDUCTION_MODE_MIN : i32 = 1;
pub const SAMPLER_REDUCTION_MODE_MAX : i32 = 2;
pub const SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT : i32 = SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE;
pub const SAMPLER_REDUCTION_MODE_MIN_EXT : i32 = SAMPLER_REDUCTION_MODE_MIN;
pub const SAMPLER_REDUCTION_MODE_MAX_EXT : i32 = SAMPLER_REDUCTION_MODE_MAX;
pub const SAMPLER_REDUCTION_MODE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SemaphoreType = i32;
pub const SEMAPHORE_TYPE_BINARY : i32 = 0;
pub const SEMAPHORE_TYPE_TIMELINE : i32 = 1;
pub const SEMAPHORE_TYPE_BINARY_KHR : i32 = SEMAPHORE_TYPE_BINARY;
pub const SEMAPHORE_TYPE_TIMELINE_KHR : i32 = SEMAPHORE_TYPE_TIMELINE;
pub const SEMAPHORE_TYPE_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ResolveModeFlagBits = i32;
pub const RESOLVE_MODE_NONE : i32 = 0;
pub const RESOLVE_MODE_SAMPLE_ZERO_BIT : i32 = 0x00000001;
pub const RESOLVE_MODE_AVERAGE_BIT : i32 = 0x00000002;
pub const RESOLVE_MODE_MIN_BIT : i32 = 0x00000004;
pub const RESOLVE_MODE_MAX_BIT : i32 = 0x00000008;
pub const RESOLVE_MODE_NONE_KHR : i32 = RESOLVE_MODE_NONE;
pub const RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR : i32 = RESOLVE_MODE_SAMPLE_ZERO_BIT;
pub const RESOLVE_MODE_AVERAGE_BIT_KHR : i32 = RESOLVE_MODE_AVERAGE_BIT;
pub const RESOLVE_MODE_MIN_BIT_KHR : i32 = RESOLVE_MODE_MIN_BIT;
pub const RESOLVE_MODE_MAX_BIT_KHR : i32 = RESOLVE_MODE_MAX_BIT;
pub const RESOLVE_MODE_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type ResolveModeFlags = i32;
pub type DescriptorBindingFlagBits = i32;
pub const DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT : i32 = 0x00000001;
pub const DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT : i32 = 0x00000002;
pub const DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT : i32 = 0x00000004;
pub const DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT : i32 = 0x00000008;
pub const DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT : i32 = DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT;
pub const DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT : i32 = DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT;
pub const DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT : i32 = DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT;
pub const DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT : i32 = DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT;
pub const DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type DescriptorBindingFlags = i32;
pub type SemaphoreWaitFlagBits = i32;
pub const SEMAPHORE_WAIT_ANY_BIT : i32 = 0x00000001;
pub const SEMAPHORE_WAIT_ANY_BIT_KHR : i32 = SEMAPHORE_WAIT_ANY_BIT;
pub const SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM : i32 = 0x7FFFFFF;
pub type SemaphoreWaitFlags = i32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVulkan11Features {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub storageBuffer16BitAccess : Bool32,
	pub uniformAndStorageBuffer16BitAccess : Bool32,
	pub storagePushConstant16 : Bool32,
	pub storageInputOutput16 : Bool32,
	pub multiview : Bool32,
	pub multiviewGeometryShader : Bool32,
	pub multiviewTessellationShader : Bool32,
	pub variablePointersStorageBuffer : Bool32,
	pub variablePointers : Bool32,
	pub protectedMemory : Bool32,
	pub samplerYcbcrConversion : Bool32,
	pub shaderDrawParameters : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVulkan11Properties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub deviceUUID : [u8;UUID_SIZE],
	pub driverUUID : [u8;UUID_SIZE],
	pub deviceLUID : [u8;LUID_SIZE],
	pub deviceNodeMask : u32,
	pub deviceLUIDValid : Bool32,
	pub subgroupSize : u32,
	pub subgroupSupportedStages : ShaderStageFlags,
	pub subgroupSupportedOperations : SubgroupFeatureFlags,
	pub subgroupQuadOperationsInAllStages : Bool32,
	pub pointClippingBehavior : PointClippingBehavior,
	pub maxMultiviewViewCount : u32,
	pub maxMultiviewInstanceIndex : u32,
	pub protectedNoFault : Bool32,
	pub maxPerSetDescriptors : u32,
	pub maxMemoryAllocationSize : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVulkan12Features {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub samplerMirrorClampToEdge : Bool32,
	pub drawIndirectCount : Bool32,
	pub storageBuffer8BitAccess : Bool32,
	pub uniformAndStorageBuffer8BitAccess : Bool32,
	pub storagePushConstant8 : Bool32,
	pub shaderBufferInt64Atomics : Bool32,
	pub shaderSharedInt64Atomics : Bool32,
	pub shaderFloat16 : Bool32,
	pub shaderInt8 : Bool32,
	pub descriptorIndexing : Bool32,
	pub shaderInputAttachmentArrayDynamicIndexing : Bool32,
	pub shaderUniformTexelBufferArrayDynamicIndexing : Bool32,
	pub shaderStorageTexelBufferArrayDynamicIndexing : Bool32,
	pub shaderUniformBufferArrayNonUniformIndexing : Bool32,
	pub shaderSampledImageArrayNonUniformIndexing : Bool32,
	pub shaderStorageBufferArrayNonUniformIndexing : Bool32,
	pub shaderStorageImageArrayNonUniformIndexing : Bool32,
	pub shaderInputAttachmentArrayNonUniformIndexing : Bool32,
	pub shaderUniformTexelBufferArrayNonUniformIndexing : Bool32,
	pub shaderStorageTexelBufferArrayNonUniformIndexing : Bool32,
	pub descriptorBindingUniformBufferUpdateAfterBind : Bool32,
	pub descriptorBindingSampledImageUpdateAfterBind : Bool32,
	pub descriptorBindingStorageImageUpdateAfterBind : Bool32,
	pub descriptorBindingStorageBufferUpdateAfterBind : Bool32,
	pub descriptorBindingUniformTexelBufferUpdateAfterBind : Bool32,
	pub descriptorBindingStorageTexelBufferUpdateAfterBind : Bool32,
	pub descriptorBindingUpdateUnusedWhilePending : Bool32,
	pub descriptorBindingPartiallyBound : Bool32,
	pub descriptorBindingVariableDescriptorCount : Bool32,
	pub runtimeDescriptorArray : Bool32,
	pub samplerFilterMinmax : Bool32,
	pub scalarBlockLayout : Bool32,
	pub imagelessFramebuffer : Bool32,
	pub uniformBufferStandardLayout : Bool32,
	pub shaderSubgroupExtendedTypes : Bool32,
	pub separateDepthStencilLayouts : Bool32,
	pub hostQueryReset : Bool32,
	pub timelineSemaphore : Bool32,
	pub bufferDeviceAddress : Bool32,
	pub bufferDeviceAddressCaptureReplay : Bool32,
	pub bufferDeviceAddressMultiDevice : Bool32,
	pub vulkanMemoryModel : Bool32,
	pub vulkanMemoryModelDeviceScope : Bool32,
	pub vulkanMemoryModelAvailabilityVisibilityChains : Bool32,
	pub shaderOutputViewportIndex : Bool32,
	pub shaderOutputLayer : Bool32,
	pub subgroupBroadcastDynamicId : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConformanceVersion {
	pub major : u8,
	pub minor : u8,
	pub subminor : u8,
	pub patch : u8,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PhysicalDeviceVulkan12Properties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub driverID : DriverId,
	pub driverName : [i8;MAX_DRIVER_NAME_SIZE],
	pub driverInfo : [i8;MAX_DRIVER_INFO_SIZE],
	pub conformanceVersion : ConformanceVersion,
	pub denormBehaviorIndependence : ShaderFloatControlsIndependence,
	pub roundingModeIndependence : ShaderFloatControlsIndependence,
	pub shaderSignedZeroInfNanPreserveFloat16 : Bool32,
	pub shaderSignedZeroInfNanPreserveFloat32 : Bool32,
	pub shaderSignedZeroInfNanPreserveFloat64 : Bool32,
	pub shaderDenormPreserveFloat16 : Bool32,
	pub shaderDenormPreserveFloat32 : Bool32,
	pub shaderDenormPreserveFloat64 : Bool32,
	pub shaderDenormFlushToZeroFloat16 : Bool32,
	pub shaderDenormFlushToZeroFloat32 : Bool32,
	pub shaderDenormFlushToZeroFloat64 : Bool32,
	pub shaderRoundingModeRTEFloat16 : Bool32,
	pub shaderRoundingModeRTEFloat32 : Bool32,
	pub shaderRoundingModeRTEFloat64 : Bool32,
	pub shaderRoundingModeRTZFloat16 : Bool32,
	pub shaderRoundingModeRTZFloat32 : Bool32,
	pub shaderRoundingModeRTZFloat64 : Bool32,
	pub maxUpdateAfterBindDescriptorsInAllPools : u32,
	pub shaderUniformBufferArrayNonUniformIndexingNative : Bool32,
	pub shaderSampledImageArrayNonUniformIndexingNative : Bool32,
	pub shaderStorageBufferArrayNonUniformIndexingNative : Bool32,
	pub shaderStorageImageArrayNonUniformIndexingNative : Bool32,
	pub shaderInputAttachmentArrayNonUniformIndexingNative : Bool32,
	pub robustBufferAccessUpdateAfterBind : Bool32,
	pub quadDivergentImplicitLod : Bool32,
	pub maxPerStageDescriptorUpdateAfterBindSamplers : u32,
	pub maxPerStageDescriptorUpdateAfterBindUniformBuffers : u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageBuffers : u32,
	pub maxPerStageDescriptorUpdateAfterBindSampledImages : u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageImages : u32,
	pub maxPerStageDescriptorUpdateAfterBindInputAttachments : u32,
	pub maxPerStageUpdateAfterBindResources : u32,
	pub maxDescriptorSetUpdateAfterBindSamplers : u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffers : u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffers : u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : u32,
	pub maxDescriptorSetUpdateAfterBindSampledImages : u32,
	pub maxDescriptorSetUpdateAfterBindStorageImages : u32,
	pub maxDescriptorSetUpdateAfterBindInputAttachments : u32,
	pub supportedDepthResolveModes : ResolveModeFlags,
	pub supportedStencilResolveModes : ResolveModeFlags,
	pub independentResolveNone : Bool32,
	pub independentResolve : Bool32,
	pub filterMinmaxSingleComponentFormats : Bool32,
	pub filterMinmaxImageComponentMapping : Bool32,
	pub maxTimelineSemaphoreValueDifference : u64,
	pub framebufferIntegerColorSampleCounts : SampleCountFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageFormatListCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub viewFormatCount : u32,
	pub pViewFormats : *const Format,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentDescription2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : AttachmentDescriptionFlags,
	pub format : Format,
	pub samples : SampleCountFlagBits,
	pub loadOp : AttachmentLoadOp,
	pub storeOp : AttachmentStoreOp,
	pub stencilLoadOp : AttachmentLoadOp,
	pub stencilStoreOp : AttachmentStoreOp,
	pub initialLayout : ImageLayout,
	pub finalLayout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentReference2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub attachment : u32,
	pub layout : ImageLayout,
	pub aspectMask : ImageAspectFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassDescription2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : SubpassDescriptionFlags,
	pub pipelineBindPoint : PipelineBindPoint,
	pub viewMask : u32,
	pub inputAttachmentCount : u32,
	pub pInputAttachments : *const AttachmentReference2,
	pub colorAttachmentCount : u32,
	pub pColorAttachments : *const AttachmentReference2,
	pub pResolveAttachments : *const AttachmentReference2,
	pub pDepthStencilAttachment : *const AttachmentReference2,
	pub preserveAttachmentCount : u32,
	pub pPreserveAttachments : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassDependency2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcSubpass : u32,
	pub dstSubpass : u32,
	pub srcStageMask : PipelineStageFlags,
	pub dstStageMask : PipelineStageFlags,
	pub srcAccessMask : AccessFlags,
	pub dstAccessMask : AccessFlags,
	pub dependencyFlags : DependencyFlags,
	pub viewOffset : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassCreateInfo2 {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : RenderPassCreateFlags,
	pub attachmentCount : u32,
	pub pAttachments : *const AttachmentDescription2,
	pub subpassCount : u32,
	pub pSubpasses : *const SubpassDescription2,
	pub dependencyCount : u32,
	pub pDependencies : *const SubpassDependency2,
	pub correlatedViewMaskCount : u32,
	pub pCorrelatedViewMasks : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassBeginInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub contents : SubpassContents,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassEndInfo {
	pub sType : StructureType,
	pub pNext : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevice8BitStorageFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub storageBuffer8BitAccess : Bool32,
	pub uniformAndStorageBuffer8BitAccess : Bool32,
	pub storagePushConstant8 : Bool32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PhysicalDeviceDriverProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub driverID : DriverId,
	pub driverName : [i8;MAX_DRIVER_NAME_SIZE],
	pub driverInfo : [i8;MAX_DRIVER_INFO_SIZE],
	pub conformanceVersion : ConformanceVersion,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderAtomicInt64Features {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderBufferInt64Atomics : Bool32,
	pub shaderSharedInt64Atomics : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderFloat16Int8Features {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderFloat16 : Bool32,
	pub shaderInt8 : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFloatControlsProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub denormBehaviorIndependence : ShaderFloatControlsIndependence,
	pub roundingModeIndependence : ShaderFloatControlsIndependence,
	pub shaderSignedZeroInfNanPreserveFloat16 : Bool32,
	pub shaderSignedZeroInfNanPreserveFloat32 : Bool32,
	pub shaderSignedZeroInfNanPreserveFloat64 : Bool32,
	pub shaderDenormPreserveFloat16 : Bool32,
	pub shaderDenormPreserveFloat32 : Bool32,
	pub shaderDenormPreserveFloat64 : Bool32,
	pub shaderDenormFlushToZeroFloat16 : Bool32,
	pub shaderDenormFlushToZeroFloat32 : Bool32,
	pub shaderDenormFlushToZeroFloat64 : Bool32,
	pub shaderRoundingModeRTEFloat16 : Bool32,
	pub shaderRoundingModeRTEFloat32 : Bool32,
	pub shaderRoundingModeRTEFloat64 : Bool32,
	pub shaderRoundingModeRTZFloat16 : Bool32,
	pub shaderRoundingModeRTZFloat32 : Bool32,
	pub shaderRoundingModeRTZFloat64 : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetLayoutBindingFlagsCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub bindingCount : u32,
	pub pBindingFlags : *const DescriptorBindingFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDescriptorIndexingFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderInputAttachmentArrayDynamicIndexing : Bool32,
	pub shaderUniformTexelBufferArrayDynamicIndexing : Bool32,
	pub shaderStorageTexelBufferArrayDynamicIndexing : Bool32,
	pub shaderUniformBufferArrayNonUniformIndexing : Bool32,
	pub shaderSampledImageArrayNonUniformIndexing : Bool32,
	pub shaderStorageBufferArrayNonUniformIndexing : Bool32,
	pub shaderStorageImageArrayNonUniformIndexing : Bool32,
	pub shaderInputAttachmentArrayNonUniformIndexing : Bool32,
	pub shaderUniformTexelBufferArrayNonUniformIndexing : Bool32,
	pub shaderStorageTexelBufferArrayNonUniformIndexing : Bool32,
	pub descriptorBindingUniformBufferUpdateAfterBind : Bool32,
	pub descriptorBindingSampledImageUpdateAfterBind : Bool32,
	pub descriptorBindingStorageImageUpdateAfterBind : Bool32,
	pub descriptorBindingStorageBufferUpdateAfterBind : Bool32,
	pub descriptorBindingUniformTexelBufferUpdateAfterBind : Bool32,
	pub descriptorBindingStorageTexelBufferUpdateAfterBind : Bool32,
	pub descriptorBindingUpdateUnusedWhilePending : Bool32,
	pub descriptorBindingPartiallyBound : Bool32,
	pub descriptorBindingVariableDescriptorCount : Bool32,
	pub runtimeDescriptorArray : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDescriptorIndexingProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxUpdateAfterBindDescriptorsInAllPools : u32,
	pub shaderUniformBufferArrayNonUniformIndexingNative : Bool32,
	pub shaderSampledImageArrayNonUniformIndexingNative : Bool32,
	pub shaderStorageBufferArrayNonUniformIndexingNative : Bool32,
	pub shaderStorageImageArrayNonUniformIndexingNative : Bool32,
	pub shaderInputAttachmentArrayNonUniformIndexingNative : Bool32,
	pub robustBufferAccessUpdateAfterBind : Bool32,
	pub quadDivergentImplicitLod : Bool32,
	pub maxPerStageDescriptorUpdateAfterBindSamplers : u32,
	pub maxPerStageDescriptorUpdateAfterBindUniformBuffers : u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageBuffers : u32,
	pub maxPerStageDescriptorUpdateAfterBindSampledImages : u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageImages : u32,
	pub maxPerStageDescriptorUpdateAfterBindInputAttachments : u32,
	pub maxPerStageUpdateAfterBindResources : u32,
	pub maxDescriptorSetUpdateAfterBindSamplers : u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffers : u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffers : u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : u32,
	pub maxDescriptorSetUpdateAfterBindSampledImages : u32,
	pub maxDescriptorSetUpdateAfterBindStorageImages : u32,
	pub maxDescriptorSetUpdateAfterBindInputAttachments : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetVariableDescriptorCountAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub descriptorSetCount : u32,
	pub pDescriptorCounts : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorSetVariableDescriptorCountLayoutSupport {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxVariableDescriptorCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassDescriptionDepthStencilResolve {
	pub sType : StructureType,
	pub pNext : *const void,
	pub depthResolveMode : ResolveModeFlagBits,
	pub stencilResolveMode : ResolveModeFlagBits,
	pub pDepthStencilResolveAttachment : *const AttachmentReference2,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDepthStencilResolveProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub supportedDepthResolveModes : ResolveModeFlags,
	pub supportedStencilResolveModes : ResolveModeFlags,
	pub independentResolveNone : Bool32,
	pub independentResolve : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceScalarBlockLayoutFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub scalarBlockLayout : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageStencilUsageCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub stencilUsage : ImageUsageFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplerReductionModeCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub reductionMode : SamplerReductionMode,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSamplerFilterMinmaxProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub filterMinmaxSingleComponentFormats : Bool32,
	pub filterMinmaxImageComponentMapping : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVulkanMemoryModelFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub vulkanMemoryModel : Bool32,
	pub vulkanMemoryModelDeviceScope : Bool32,
	pub vulkanMemoryModelAvailabilityVisibilityChains : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceImagelessFramebufferFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub imagelessFramebuffer : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FramebufferAttachmentImageInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : ImageCreateFlags,
	pub usage : ImageUsageFlags,
	pub width : u32,
	pub height : u32,
	pub layerCount : u32,
	pub viewFormatCount : u32,
	pub pViewFormats : *const Format,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FramebufferAttachmentsCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub attachmentImageInfoCount : u32,
	pub pAttachmentImageInfos : *const FramebufferAttachmentImageInfo,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassAttachmentBeginInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub attachmentCount : u32,
	pub pAttachments : *const ImageView,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceUniformBufferStandardLayoutFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub uniformBufferStandardLayout : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderSubgroupExtendedTypes : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub separateDepthStencilLayouts : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentReferenceStencilLayout {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub stencilLayout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentDescriptionStencilLayout {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub stencilInitialLayout : ImageLayout,
	pub stencilFinalLayout : ImageLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceHostQueryResetFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub hostQueryReset : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTimelineSemaphoreFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub timelineSemaphore : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTimelineSemaphoreProperties {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxTimelineSemaphoreValueDifference : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreTypeCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub semaphoreType : SemaphoreType,
	pub initialValue : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimelineSemaphoreSubmitInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub waitSemaphoreValueCount : u32,
	pub pWaitSemaphoreValues : *const u64,
	pub signalSemaphoreValueCount : u32,
	pub pSignalSemaphoreValues : *const u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreWaitInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : SemaphoreWaitFlags,
	pub semaphoreCount : u32,
	pub pSemaphores : *const Semaphore,
	pub pValues : *const u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreSignalInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub semaphore : Semaphore,
	pub value : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceBufferDeviceAddressFeatures {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub bufferDeviceAddress : Bool32,
	pub bufferDeviceAddressCaptureReplay : Bool32,
	pub bufferDeviceAddressMultiDevice : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferDeviceAddressInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub buffer : Buffer,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferOpaqueCaptureAddressCreateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub opaqueCaptureAddress : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryOpaqueCaptureAddressAllocateInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub opaqueCaptureAddress : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceMemoryOpaqueCaptureAddressInfo {
	pub sType : StructureType,
	pub pNext : *const void,
	pub memory : DeviceMemory,
}

pub type SurfaceKHR = u64;
pub type PresentModeKHR = i32;
pub const PRESENT_MODE_IMMEDIATE_KHR : i32 = 0;
pub const PRESENT_MODE_MAILBOX_KHR : i32 = 1;
pub const PRESENT_MODE_FIFO_KHR : i32 = 2;
pub const PRESENT_MODE_FIFO_RELAXED_KHR : i32 = 3;
pub const PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR : i32 = 1000111000;
pub const PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR : i32 = 1000111001;
pub const PRESENT_MODE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type ColorSpaceKHR = i32;
pub const COLOR_SPACE_SRGB_NONLINEAR_KHR : i32 = 0;
pub const COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT : i32 = 1000104001;
pub const COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT : i32 = 1000104002;
pub const COLOR_SPACE_DISPLAY_P3_LINEAR_EXT : i32 = 1000104003;
pub const COLOR_SPACE_DCI_P3_NONLINEAR_EXT : i32 = 1000104004;
pub const COLOR_SPACE_BT709_LINEAR_EXT : i32 = 1000104005;
pub const COLOR_SPACE_BT709_NONLINEAR_EXT : i32 = 1000104006;
pub const COLOR_SPACE_BT2020_LINEAR_EXT : i32 = 1000104007;
pub const COLOR_SPACE_HDR10_ST2084_EXT : i32 = 1000104008;
pub const COLOR_SPACE_DOLBYVISION_EXT : i32 = 1000104009;
pub const COLOR_SPACE_HDR10_HLG_EXT : i32 = 1000104010;
pub const COLOR_SPACE_ADOBERGB_LINEAR_EXT : i32 = 1000104011;
pub const COLOR_SPACE_ADOBERGB_NONLINEAR_EXT : i32 = 1000104012;
pub const COLOR_SPACE_PASS_THROUGH_EXT : i32 = 1000104013;
pub const COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT : i32 = 1000104014;
pub const COLOR_SPACE_DISPLAY_NATIVE_AMD : i32 = 1000213000;
pub const COLORSPACE_SRGB_NONLINEAR_KHR : i32 = COLOR_SPACE_SRGB_NONLINEAR_KHR;
pub const COLOR_SPACE_DCI_P3_LINEAR_EXT : i32 = COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
pub const COLOR_SPACE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type SurfaceTransformFlagBitsKHR = i32;
pub const SURFACE_TRANSFORM_IDENTITY_BIT_KHR : i32 = 0x00000001;
pub const SURFACE_TRANSFORM_ROTATE_90_BIT_KHR : i32 = 0x00000002;
pub const SURFACE_TRANSFORM_ROTATE_180_BIT_KHR : i32 = 0x00000004;
pub const SURFACE_TRANSFORM_ROTATE_270_BIT_KHR : i32 = 0x00000008;
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR : i32 = 0x00000010;
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR : i32 = 0x00000020;
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : i32 = 0x00000040;
pub const SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : i32 = 0x00000080;
pub const SURFACE_TRANSFORM_INHERIT_BIT_KHR : i32 = 0x00000100;
pub const SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type CompositeAlphaFlagBitsKHR = i32;
pub const COMPOSITE_ALPHA_OPAQUE_BIT_KHR : i32 = 0x00000001;
pub const COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR : i32 = 0x00000002;
pub const COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR : i32 = 0x00000004;
pub const COMPOSITE_ALPHA_INHERIT_BIT_KHR : i32 = 0x00000008;
pub const COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type SurfaceTransformFlagsKHR = u32;
pub type CompositeAlphaFlagsKHR = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceCapabilitiesKHR {
	pub minImageCount : u32,
	pub maxImageCount : u32,
	pub currentExtent : Extent2D,
	pub minImageExtent : Extent2D,
	pub maxImageExtent : Extent2D,
	pub maxImageArrayLayers : u32,
	pub supportedTransforms : SurfaceTransformFlagsKHR,
	pub currentTransform : SurfaceTransformFlagBitsKHR,
	pub supportedCompositeAlpha : CompositeAlphaFlagsKHR,
	pub supportedUsageFlags : ImageUsageFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceFormatKHR {
	pub format : Format,
	pub colorSpace : ColorSpaceKHR,
}

pub type SwapchainKHR = u64;
pub type SwapchainCreateFlagBitsKHR = i32;
pub const SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR : i32 = 0x00000001;
pub const SWAPCHAIN_CREATE_PROTECTED_BIT_KHR : i32 = 0x00000002;
pub const SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR : i32 = 0x00000004;
pub const SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type SwapchainCreateFlagsKHR = u32;
pub type DeviceGroupPresentModeFlagBitsKHR = i32;
pub const DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR : i32 = 0x00000001;
pub const DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR : i32 = 0x00000002;
pub const DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR : i32 = 0x00000004;
pub const DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR : i32 = 0x00000008;
pub const DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type DeviceGroupPresentModeFlagsKHR = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwapchainCreateInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : SwapchainCreateFlagsKHR,
	pub surface : SurfaceKHR,
	pub minImageCount : u32,
	pub imageFormat : Format,
	pub imageColorSpace : ColorSpaceKHR,
	pub imageExtent : Extent2D,
	pub imageArrayLayers : u32,
	pub imageUsage : ImageUsageFlags,
	pub imageSharingMode : SharingMode,
	pub queueFamilyIndexCount : u32,
	pub pQueueFamilyIndices : *const u32,
	pub preTransform : SurfaceTransformFlagBitsKHR,
	pub compositeAlpha : CompositeAlphaFlagBitsKHR,
	pub presentMode : PresentModeKHR,
	pub clipped : Bool32,
	pub oldSwapchain : SwapchainKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PresentInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub waitSemaphoreCount : u32,
	pub pWaitSemaphores : *const Semaphore,
	pub swapchainCount : u32,
	pub pSwapchains : *const SwapchainKHR,
	pub pImageIndices : *const i32,
	pub pResults : *mut VkResult,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageSwapchainCreateInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub swapchain : SwapchainKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindImageMemorySwapchainInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub swapchain : SwapchainKHR,
	pub imageIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AcquireNextImageInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub swapchain : SwapchainKHR,
	pub timeout : u64,
	pub semaphore : Semaphore,
	pub fence : Fence,
	pub deviceMask : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupPresentCapabilitiesKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub presentMask : [u32;MAX_DEVICE_GROUP_SIZE],
	pub modes : DeviceGroupPresentModeFlagsKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupPresentInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub swapchainCount : u32,
	pub pDeviceMasks : *const u32,
	pub mode : DeviceGroupPresentModeFlagBitsKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceGroupSwapchainCreateInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub modes : DeviceGroupPresentModeFlagsKHR,
}

pub type DisplayKHR = u64;
pub type DisplayModeKHR = u64;
pub type DisplayPlaneAlphaFlagBitsKHR = i32;
pub const DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR : i32 = 0x00000001;
pub const DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR : i32 = 0x00000002;
pub const DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR : i32 = 0x00000004;
pub const DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR : i32 = 0x00000008;
pub const DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type DisplayPlaneAlphaFlagsKHR = u32;
pub type DisplayModeCreateFlagsKHR = u32;
pub type DisplaySurfaceCreateFlagsKHR = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPropertiesKHR {
	pub display : DisplayKHR,
	pub displayName : *const i8,
	pub physicalDimensions : Extent2D,
	pub physicalResolution : Extent2D,
	pub supportedTransforms : SurfaceTransformFlagsKHR,
	pub planeReorderPossible : Bool32,
	pub persistentContent : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayModeParametersKHR {
	pub visibleRegion : Extent2D,
	pub refreshRate : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayModePropertiesKHR {
	pub displayMode : DisplayModeKHR,
	pub parameters : DisplayModeParametersKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayModeCreateInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DisplayModeCreateFlagsKHR,
	pub parameters : DisplayModeParametersKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPlaneCapabilitiesKHR {
	pub supportedAlpha : DisplayPlaneAlphaFlagsKHR,
	pub minSrcPosition : Offset2D,
	pub maxSrcPosition : Offset2D,
	pub minSrcExtent : Extent2D,
	pub maxSrcExtent : Extent2D,
	pub minDstPosition : Offset2D,
	pub maxDstPosition : Offset2D,
	pub minDstExtent : Extent2D,
	pub maxDstExtent : Extent2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPlanePropertiesKHR {
	pub currentDisplay : DisplayKHR,
	pub currentStackIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplaySurfaceCreateInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DisplaySurfaceCreateFlagsKHR,
	pub displayMode : DisplayModeKHR,
	pub planeIndex : u32,
	pub planeStackIndex : u32,
	pub transform : SurfaceTransformFlagBitsKHR,
	pub globalAlpha : f32,
	pub alphaMode : DisplayPlaneAlphaFlagBitsKHR,
	pub imageExtent : Extent2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPresentInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcRect : Rect2D,
	pub dstRect : Rect2D,
	pub persistent : Bool32,
}

pub type RenderPassMultiviewCreateInfoKHR = RenderPassMultiviewCreateInfo;
pub type PhysicalDeviceMultiviewFeaturesKHR = PhysicalDeviceMultiviewFeatures;
pub type PhysicalDeviceMultiviewPropertiesKHR = PhysicalDeviceMultiviewProperties;
pub type PhysicalDeviceFeatures2KHR = PhysicalDeviceFeatures2;
pub type PhysicalDeviceProperties2KHR = PhysicalDeviceProperties2;
pub type FormatProperties2KHR = FormatProperties2;
pub type ImageFormatProperties2KHR = ImageFormatProperties2;
pub type PhysicalDeviceImageFormatInfo2KHR = PhysicalDeviceImageFormatInfo2;
pub type QueueFamilyProperties2KHR = QueueFamilyProperties2;
pub type PhysicalDeviceMemoryProperties2KHR = PhysicalDeviceMemoryProperties2;
pub type SparseImageFormatProperties2KHR = SparseImageFormatProperties2;
pub type PhysicalDeviceSparseImageFormatInfo2KHR = PhysicalDeviceSparseImageFormatInfo2;
pub type PeerMemoryFeatureFlagsKHR = PeerMemoryFeatureFlags;
pub type PeerMemoryFeatureFlagBitsKHR = PeerMemoryFeatureFlagBits;
pub type MemoryAllocateFlagsKHR = MemoryAllocateFlags;
pub type MemoryAllocateFlagBitsKHR = MemoryAllocateFlagBits;
pub type MemoryAllocateFlagsInfoKHR = MemoryAllocateFlagsInfo;
pub type DeviceGroupRenderPassBeginInfoKHR = DeviceGroupRenderPassBeginInfo;
pub type DeviceGroupCommandBufferBeginInfoKHR = DeviceGroupCommandBufferBeginInfo;
pub type DeviceGroupSubmitInfoKHR = DeviceGroupSubmitInfo;
pub type DeviceGroupBindSparseInfoKHR = DeviceGroupBindSparseInfo;
pub type BindBufferMemoryDeviceGroupInfoKHR = BindBufferMemoryDeviceGroupInfo;
pub type BindImageMemoryDeviceGroupInfoKHR = BindImageMemoryDeviceGroupInfo;
pub type CommandPoolTrimFlagsKHR = CommandPoolTrimFlags;
pub type PhysicalDeviceGroupPropertiesKHR = PhysicalDeviceGroupProperties;
pub type DeviceGroupDeviceCreateInfoKHR = DeviceGroupDeviceCreateInfo;
pub type ExternalMemoryHandleTypeFlagsKHR = ExternalMemoryHandleTypeFlags;
pub type ExternalMemoryHandleTypeFlagBitsKHR = ExternalMemoryHandleTypeFlagBits;
pub type ExternalMemoryFeatureFlagsKHR = ExternalMemoryFeatureFlags;
pub type ExternalMemoryFeatureFlagBitsKHR = ExternalMemoryFeatureFlagBits;
pub type ExternalMemoryPropertiesKHR = ExternalMemoryProperties;
pub type PhysicalDeviceExternalImageFormatInfoKHR = PhysicalDeviceExternalImageFormatInfo;
pub type ExternalImageFormatPropertiesKHR = ExternalImageFormatProperties;
pub type PhysicalDeviceExternalBufferInfoKHR = PhysicalDeviceExternalBufferInfo;
pub type ExternalBufferPropertiesKHR = ExternalBufferProperties;
pub type PhysicalDeviceIDPropertiesKHR = PhysicalDeviceIDProperties;
pub type ExternalMemoryImageCreateInfoKHR = ExternalMemoryImageCreateInfo;
pub type ExternalMemoryBufferCreateInfoKHR = ExternalMemoryBufferCreateInfo;
pub type ExportMemoryAllocateInfoKHR = ExportMemoryAllocateInfo;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportMemoryFdInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleType : ExternalMemoryHandleTypeFlagBits,
	pub fd : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryFdPropertiesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub memoryTypeBits : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryGetFdInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub memory : DeviceMemory,
	pub handleType : ExternalMemoryHandleTypeFlagBits,
}

pub type ExternalSemaphoreHandleTypeFlagsKHR = ExternalSemaphoreHandleTypeFlags;
pub type ExternalSemaphoreHandleTypeFlagBitsKHR = ExternalSemaphoreHandleTypeFlagBits;
pub type ExternalSemaphoreFeatureFlagsKHR = ExternalSemaphoreFeatureFlags;
pub type ExternalSemaphoreFeatureFlagBitsKHR = ExternalSemaphoreFeatureFlagBits;
pub type PhysicalDeviceExternalSemaphoreInfoKHR = PhysicalDeviceExternalSemaphoreInfo;
pub type ExternalSemaphorePropertiesKHR = ExternalSemaphoreProperties;
pub type SemaphoreImportFlagsKHR = SemaphoreImportFlags;
pub type SemaphoreImportFlagBitsKHR = SemaphoreImportFlagBits;
pub type ExportSemaphoreCreateInfoKHR = ExportSemaphoreCreateInfo;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportSemaphoreFdInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub semaphore : Semaphore,
	pub flags : SemaphoreImportFlags,
	pub handleType : ExternalSemaphoreHandleTypeFlagBits,
	pub fd : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreGetFdInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub semaphore : Semaphore,
	pub handleType : ExternalSemaphoreHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePushDescriptorPropertiesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxPushDescriptors : u32,
}

pub type PhysicalDeviceShaderFloat16Int8FeaturesKHR = PhysicalDeviceShaderFloat16Int8Features;
pub type PhysicalDeviceFloat16Int8FeaturesKHR = PhysicalDeviceShaderFloat16Int8Features;
pub type PhysicalDevice16BitStorageFeaturesKHR = PhysicalDevice16BitStorageFeatures;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RectLayerKHR {
	pub offset : Offset2D,
	pub extent : Extent2D,
	pub layer : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PresentRegionKHR {
	pub rectangleCount : u32,
	pub pRectangles : *const RectLayerKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PresentRegionsKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub swapchainCount : u32,
	pub pRegions : *const PresentRegionKHR,
}

pub type DescriptorUpdateTemplateKHR = DescriptorUpdateTemplate;
pub type DescriptorUpdateTemplateTypeKHR = DescriptorUpdateTemplateType;
pub type DescriptorUpdateTemplateCreateFlagsKHR = DescriptorUpdateTemplateCreateFlags;
pub type DescriptorUpdateTemplateEntryKHR = DescriptorUpdateTemplateEntry;
pub type DescriptorUpdateTemplateCreateInfoKHR = DescriptorUpdateTemplateCreateInfo;
pub type PhysicalDeviceImagelessFramebufferFeaturesKHR = PhysicalDeviceImagelessFramebufferFeatures;
pub type FramebufferAttachmentsCreateInfoKHR = FramebufferAttachmentsCreateInfo;
pub type FramebufferAttachmentImageInfoKHR = FramebufferAttachmentImageInfo;
pub type RenderPassAttachmentBeginInfoKHR = RenderPassAttachmentBeginInfo;
pub type RenderPassCreateInfo2KHR = RenderPassCreateInfo2;
pub type AttachmentDescription2KHR = AttachmentDescription2;
pub type AttachmentReference2KHR = AttachmentReference2;
pub type SubpassDescription2KHR = SubpassDescription2;
pub type SubpassDependency2KHR = SubpassDependency2;
pub type SubpassBeginInfoKHR = SubpassBeginInfo;
pub type SubpassEndInfoKHR = SubpassEndInfo;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SharedPresentSurfaceCapabilitiesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub sharedPresentSupportedUsageFlags : ImageUsageFlags,
}

pub type ExternalFenceHandleTypeFlagsKHR = ExternalFenceHandleTypeFlags;
pub type ExternalFenceHandleTypeFlagBitsKHR = ExternalFenceHandleTypeFlagBits;
pub type ExternalFenceFeatureFlagsKHR = ExternalFenceFeatureFlags;
pub type ExternalFenceFeatureFlagBitsKHR = ExternalFenceFeatureFlagBits;
pub type PhysicalDeviceExternalFenceInfoKHR = PhysicalDeviceExternalFenceInfo;
pub type ExternalFencePropertiesKHR = ExternalFenceProperties;
pub type FenceImportFlagsKHR = FenceImportFlags;
pub type FenceImportFlagBitsKHR = FenceImportFlagBits;
pub type ExportFenceCreateInfoKHR = ExportFenceCreateInfo;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportFenceFdInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub fence : Fence,
	pub flags : FenceImportFlags,
	pub handleType : ExternalFenceHandleTypeFlagBits,
	pub fd : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FenceGetFdInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub fence : Fence,
	pub handleType : ExternalFenceHandleTypeFlagBits,
}

pub type PerformanceCounterUnitKHR = i32;
pub const PERFORMANCE_COUNTER_UNIT_GENERIC_KHR : i32 = 0;
pub const PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR : i32 = 1;
pub const PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR : i32 = 2;
pub const PERFORMANCE_COUNTER_UNIT_BYTES_KHR : i32 = 3;
pub const PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR : i32 = 4;
pub const PERFORMANCE_COUNTER_UNIT_KELVIN_KHR : i32 = 5;
pub const PERFORMANCE_COUNTER_UNIT_WATTS_KHR : i32 = 6;
pub const PERFORMANCE_COUNTER_UNIT_VOLTS_KHR : i32 = 7;
pub const PERFORMANCE_COUNTER_UNIT_AMPS_KHR : i32 = 8;
pub const PERFORMANCE_COUNTER_UNIT_HERTZ_KHR : i32 = 9;
pub const PERFORMANCE_COUNTER_UNIT_CYCLES_KHR : i32 = 10;
pub const PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type PerformanceCounterScopeKHR = i32;
pub const PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR : i32 = 0;
pub const PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR : i32 = 1;
pub const PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR : i32 = 2;
pub const QUERY_SCOPE_COMMAND_BUFFER_KHR : i32 = PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
pub const QUERY_SCOPE_RENDER_PASS_KHR : i32 = PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
pub const QUERY_SCOPE_COMMAND_KHR : i32 = PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
pub const PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type PerformanceCounterStorageKHR = i32;
pub const PERFORMANCE_COUNTER_STORAGE_INT32_KHR : i32 = 0;
pub const PERFORMANCE_COUNTER_STORAGE_INT64_KHR : i32 = 1;
pub const PERFORMANCE_COUNTER_STORAGE_UINT32_KHR : i32 = 2;
pub const PERFORMANCE_COUNTER_STORAGE_UINT64_KHR : i32 = 3;
pub const PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR : i32 = 4;
pub const PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR : i32 = 5;
pub const PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type PerformanceCounterDescriptionFlagBitsKHR = i32;
pub const PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR : i32 = 0x00000001;
pub const PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR : i32 = 0x00000002;
pub const PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type PerformanceCounterDescriptionFlagsKHR = u32;
pub type AcquireProfilingLockFlagBitsKHR = i32;
pub const ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type AcquireProfilingLockFlagsKHR = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePerformanceQueryFeaturesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub performanceCounterQueryPools : Bool32,
	pub performanceCounterMultipleQueryPools : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePerformanceQueryPropertiesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub allowCommandBufferQueryCopies : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerformanceCounterKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub unit : PerformanceCounterUnitKHR,
	pub scope : PerformanceCounterScopeKHR,
	pub storage : PerformanceCounterStorageKHR,
	pub uuid : [u8;UUID_SIZE],
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PerformanceCounterDescriptionKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PerformanceCounterDescriptionFlagsKHR,
	pub name : [i8;MAX_DESCRIPTION_SIZE],
	pub category : [i8;MAX_DESCRIPTION_SIZE],
	pub description : [i8;MAX_DESCRIPTION_SIZE],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueryPoolPerformanceCreateInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub queueFamilyIndex : u32,
	pub counterIndexCount : u32,
	pub pCounterIndices : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AcquireProfilingLockInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : AcquireProfilingLockFlagsKHR,
	pub timeout : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerformanceQuerySubmitInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub counterPassIndex : u32,
}

pub type PointClippingBehaviorKHR = PointClippingBehavior;
pub type TessellationDomainOriginKHR = TessellationDomainOrigin;
pub type PhysicalDevicePointClippingPropertiesKHR = PhysicalDevicePointClippingProperties;
pub type RenderPassInputAttachmentAspectCreateInfoKHR = RenderPassInputAttachmentAspectCreateInfo;
pub type InputAttachmentAspectReferenceKHR = InputAttachmentAspectReference;
pub type ImageViewUsageCreateInfoKHR = ImageViewUsageCreateInfo;
pub type PipelineTessellationDomainOriginStateCreateInfoKHR = PipelineTessellationDomainOriginStateCreateInfo;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSurfaceInfo2KHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub surface : SurfaceKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceCapabilities2KHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub surfaceCapabilities : SurfaceCapabilitiesKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceFormat2KHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub surfaceFormat : SurfaceFormatKHR,
}

pub type PhysicalDeviceVariablePointerFeaturesKHR = PhysicalDeviceVariablePointersFeatures;
pub type PhysicalDeviceVariablePointersFeaturesKHR = PhysicalDeviceVariablePointersFeatures;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayProperties2KHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub displayProperties : DisplayPropertiesKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPlaneProperties2KHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub displayPlaneProperties : DisplayPlanePropertiesKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayModeProperties2KHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub displayModeProperties : DisplayModePropertiesKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPlaneInfo2KHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub mode : DisplayModeKHR,
	pub planeIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPlaneCapabilities2KHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub capabilities : DisplayPlaneCapabilitiesKHR,
}

pub type MemoryDedicatedRequirementsKHR = MemoryDedicatedRequirements;
pub type MemoryDedicatedAllocateInfoKHR = MemoryDedicatedAllocateInfo;
pub type BufferMemoryRequirementsInfo2KHR = BufferMemoryRequirementsInfo2;
pub type ImageMemoryRequirementsInfo2KHR = ImageMemoryRequirementsInfo2;
pub type ImageSparseMemoryRequirementsInfo2KHR = ImageSparseMemoryRequirementsInfo2;
pub type SparseImageMemoryRequirements2KHR = SparseImageMemoryRequirements2;
pub type ImageFormatListCreateInfoKHR = ImageFormatListCreateInfo;
pub type SamplerYcbcrConversionKHR = SamplerYcbcrConversion;
pub type SamplerYcbcrModelConversionKHR = SamplerYcbcrModelConversion;
pub type SamplerYcbcrRangeKHR = SamplerYcbcrRange;
pub type ChromaLocationKHR = ChromaLocation;
pub type SamplerYcbcrConversionCreateInfoKHR = SamplerYcbcrConversionCreateInfo;
pub type SamplerYcbcrConversionInfoKHR = SamplerYcbcrConversionInfo;
pub type BindImagePlaneMemoryInfoKHR = BindImagePlaneMemoryInfo;
pub type ImagePlaneMemoryRequirementsInfoKHR = ImagePlaneMemoryRequirementsInfo;
pub type PhysicalDeviceSamplerYcbcrConversionFeaturesKHR = PhysicalDeviceSamplerYcbcrConversionFeatures;
pub type SamplerYcbcrConversionImageFormatPropertiesKHR = SamplerYcbcrConversionImageFormatProperties;
pub type BindBufferMemoryInfoKHR = BindBufferMemoryInfo;
pub type BindImageMemoryInfoKHR = BindImageMemoryInfo;
pub type PhysicalDeviceMaintenance3PropertiesKHR = PhysicalDeviceMaintenance3Properties;
pub type DescriptorSetLayoutSupportKHR = DescriptorSetLayoutSupport;
pub type PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub type PhysicalDevice8BitStorageFeaturesKHR = PhysicalDevice8BitStorageFeatures;
pub type PhysicalDeviceShaderAtomicInt64FeaturesKHR = PhysicalDeviceShaderAtomicInt64Features;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderClockFeaturesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderSubgroupClock : Bool32,
	pub shaderDeviceClock : Bool32,
}

pub type DriverIdKHR = DriverId;
pub type ConformanceVersionKHR = ConformanceVersion;
pub type PhysicalDeviceDriverPropertiesKHR = PhysicalDeviceDriverProperties;
pub type ShaderFloatControlsIndependenceKHR = ShaderFloatControlsIndependence;
pub type PhysicalDeviceFloatControlsPropertiesKHR = PhysicalDeviceFloatControlsProperties;
pub type ResolveModeFlagBitsKHR = ResolveModeFlagBits;
pub type ResolveModeFlagsKHR = ResolveModeFlags;
pub type SubpassDescriptionDepthStencilResolveKHR = SubpassDescriptionDepthStencilResolve;
pub type PhysicalDeviceDepthStencilResolvePropertiesKHR = PhysicalDeviceDepthStencilResolveProperties;
pub type SemaphoreTypeKHR = SemaphoreType;
pub type SemaphoreWaitFlagBitsKHR = SemaphoreWaitFlagBits;
pub type SemaphoreWaitFlagsKHR = SemaphoreWaitFlags;
pub type PhysicalDeviceTimelineSemaphoreFeaturesKHR = PhysicalDeviceTimelineSemaphoreFeatures;
pub type PhysicalDeviceTimelineSemaphorePropertiesKHR = PhysicalDeviceTimelineSemaphoreProperties;
pub type SemaphoreTypeCreateInfoKHR = SemaphoreTypeCreateInfo;
pub type TimelineSemaphoreSubmitInfoKHR = TimelineSemaphoreSubmitInfo;
pub type SemaphoreWaitInfoKHR = SemaphoreWaitInfo;
pub type SemaphoreSignalInfoKHR = SemaphoreSignalInfo;
pub type PhysicalDeviceVulkanMemoryModelFeaturesKHR = PhysicalDeviceVulkanMemoryModelFeatures;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceProtectedCapabilitiesKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub supportsProtected : Bool32,
}

pub type PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub type AttachmentReferenceStencilLayoutKHR = AttachmentReferenceStencilLayout;
pub type AttachmentDescriptionStencilLayoutKHR = AttachmentDescriptionStencilLayout;
pub type PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = PhysicalDeviceUniformBufferStandardLayoutFeatures;
pub type PhysicalDeviceBufferDeviceAddressFeaturesKHR = PhysicalDeviceBufferDeviceAddressFeatures;
pub type BufferDeviceAddressInfoKHR = BufferDeviceAddressInfo;
pub type BufferOpaqueCaptureAddressCreateInfoKHR = BufferOpaqueCaptureAddressCreateInfo;
pub type MemoryOpaqueCaptureAddressAllocateInfoKHR = MemoryOpaqueCaptureAddressAllocateInfo;
pub type DeviceMemoryOpaqueCaptureAddressInfoKHR = DeviceMemoryOpaqueCaptureAddressInfo;
pub type PipelineExecutableStatisticFormatKHR = i32;
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR : i32 = 0;
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR : i32 = 1;
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR : i32 = 2;
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR : i32 = 3;
pub const PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub pipelineExecutableInfo : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pipeline : Pipeline,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PipelineExecutablePropertiesKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub stages : ShaderStageFlags,
	pub name : [i8;MAX_DESCRIPTION_SIZE],
	pub description : [i8;MAX_DESCRIPTION_SIZE],
	pub subgroupSize : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineExecutableInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pipeline : Pipeline,
	pub executableIndex : u32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PipelineExecutableInternalRepresentationKHR {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub name : [i8;MAX_DESCRIPTION_SIZE],
	pub description : [i8;MAX_DESCRIPTION_SIZE],
	pub isText : Bool32,
	pub dataSize : usize,
	pub pData : *mut void,
}

pub type DebugReportCallbackEXT = u64;
pub type DebugReportObjectTypeEXT = i32;
pub const DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT : i32 = 0;
pub const DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT : i32 = 1;
pub const DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT : i32 = 2;
pub const DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT : i32 = 3;
pub const DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT : i32 = 4;
pub const DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT : i32 = 5;
pub const DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT : i32 = 6;
pub const DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT : i32 = 7;
pub const DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT : i32 = 8;
pub const DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT : i32 = 9;
pub const DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT : i32 = 10;
pub const DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT : i32 = 11;
pub const DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT : i32 = 12;
pub const DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT : i32 = 13;
pub const DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT : i32 = 14;
pub const DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT : i32 = 15;
pub const DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT : i32 = 16;
pub const DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT : i32 = 17;
pub const DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT : i32 = 18;
pub const DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT : i32 = 19;
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT : i32 = 20;
pub const DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT : i32 = 21;
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT : i32 = 22;
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT : i32 = 23;
pub const DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT : i32 = 24;
pub const DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT : i32 = 25;
pub const DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT : i32 = 26;
pub const DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT : i32 = 27;
pub const DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT : i32 = 28;
pub const DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT : i32 = 29;
pub const DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT : i32 = 30;
pub const DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT : i32 = 33;
pub const DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT : i32 = 1000156000;
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT : i32 = 1000085000;
pub const DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT : i32 = 1000165000;
pub const DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT : i32 = DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT;
pub const DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT : i32 = DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT;
pub const DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT : i32 = DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT;
pub const DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT : i32 = DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT;
pub const DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT : i32 = DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT;
pub const DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type DebugReportFlagBitsEXT = i32;
pub const DEBUG_REPORT_INFORMATION_BIT_EXT : i32 = 0x00000001;
pub const DEBUG_REPORT_WARNING_BIT_EXT : i32 = 0x00000002;
pub const DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT : i32 = 0x00000004;
pub const DEBUG_REPORT_ERROR_BIT_EXT : i32 = 0x00000008;
pub const DEBUG_REPORT_DEBUG_BIT_EXT : i32 = 0x00000010;
pub const DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type DebugReportFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugReportCallbackCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DebugReportFlagsEXT,
	pub pfnCallback : u64,
	pub pUserData : *mut void,
}

pub type RasterizationOrderAMD = i32;
pub const RASTERIZATION_ORDER_STRICT_AMD : i32 = 0;
pub const RASTERIZATION_ORDER_RELAXED_AMD : i32 = 1;
pub const RASTERIZATION_ORDER_MAX_ENUM_AMD : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRasterizationStateRasterizationOrderAMD {
	pub sType : StructureType,
	pub pNext : *const void,
	pub rasterizationOrder : RasterizationOrderAMD,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugMarkerObjectNameInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub objectType : DebugReportObjectTypeEXT,
	pub object : u64,
	pub pObjectName : *const i8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugMarkerObjectTagInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub objectType : DebugReportObjectTypeEXT,
	pub object : u64,
	pub tagName : u64,
	pub tagSize : usize,
	pub pTag : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugMarkerMarkerInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pMarkerName : *const i8,
	pub color : [f32;4],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DedicatedAllocationImageCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub dedicatedAllocation : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DedicatedAllocationBufferCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub dedicatedAllocation : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DedicatedAllocationMemoryAllocateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub image : Image,
	pub buffer : Buffer,
}

pub type PipelineRasterizationStateStreamCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTransformFeedbackFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub transformFeedback : Bool32,
	pub geometryStreams : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTransformFeedbackPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxTransformFeedbackStreams : u32,
	pub maxTransformFeedbackBuffers : u32,
	pub maxTransformFeedbackBufferSize : DeviceSize,
	pub maxTransformFeedbackStreamDataSize : u32,
	pub maxTransformFeedbackBufferDataSize : u32,
	pub maxTransformFeedbackBufferDataStride : u32,
	pub transformFeedbackQueries : Bool32,
	pub transformFeedbackStreamsLinesTriangles : Bool32,
	pub transformFeedbackRasterizationStreamSelect : Bool32,
	pub transformFeedbackDraw : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRasterizationStateStreamCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineRasterizationStateStreamCreateFlagsEXT,
	pub rasterizationStream : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageViewHandleInfoNVX {
	pub sType : StructureType,
	pub pNext : *const void,
	pub imageView : ImageView,
	pub descriptorType : DescriptorType,
	pub sampler : Sampler,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageViewAddressPropertiesNVX {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub deviceAddress : DeviceAddress,
	pub size : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TextureLODGatherFormatPropertiesAMD {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub supportsTextureGatherLODBiasAMD : Bool32,
}

pub type ShaderInfoTypeAMD = i32;
pub const SHADER_INFO_TYPE_STATISTICS_AMD : i32 = 0;
pub const SHADER_INFO_TYPE_BINARY_AMD : i32 = 1;
pub const SHADER_INFO_TYPE_DISASSEMBLY_AMD : i32 = 2;
pub const SHADER_INFO_TYPE_MAX_ENUM_AMD : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderResourceUsageAMD {
	pub numUsedVgprs : u32,
	pub numUsedSgprs : u32,
	pub ldsSizePerLocalWorkGroup : u32,
	pub ldsUsageSizeInBytes : usize,
	pub scratchMemUsageInBytes : usize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderStatisticsInfoAMD {
	pub shaderStageMask : ShaderStageFlags,
	pub resourceUsage : ShaderResourceUsageAMD,
	pub numPhysicalVgprs : u32,
	pub numPhysicalSgprs : u32,
	pub numAvailableVgprs : u32,
	pub numAvailableSgprs : u32,
	pub computeWorkGroupSize : [u32;3],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCornerSampledImageFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub cornerSampledImage : Bool32,
}

pub type ExternalMemoryHandleTypeFlagBitsNV = i32;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV : i32 = 0x00000001;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV : i32 = 0x00000002;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV : i32 = 0x00000004;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV : i32 = 0x00000008;
pub const EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type ExternalMemoryHandleTypeFlagsNV = u32;
pub type ExternalMemoryFeatureFlagBitsNV = i32;
pub const EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV : i32 = 0x00000001;
pub const EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV : i32 = 0x00000002;
pub const EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV : i32 = 0x00000004;
pub const EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type ExternalMemoryFeatureFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalImageFormatPropertiesNV {
	pub imageFormatProperties : ImageFormatProperties,
	pub externalMemoryFeatures : ExternalMemoryFeatureFlagsNV,
	pub exportFromImportedHandleTypes : ExternalMemoryHandleTypeFlagsNV,
	pub compatibleHandleTypes : ExternalMemoryHandleTypeFlagsNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalMemoryImageCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalMemoryHandleTypeFlagsNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportMemoryAllocateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleTypes : ExternalMemoryHandleTypeFlagsNV,
}

pub type ValidationCheckEXT = i32;
pub const VALIDATION_CHECK_ALL_EXT : i32 = 0;
pub const VALIDATION_CHECK_SHADERS_EXT : i32 = 1;
pub const VALIDATION_CHECK_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ValidationFlagsEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub disabledValidationCheckCount : u32,
	pub pDisabledValidationChecks : *const ValidationCheckEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub textureCompressionASTC_HDR : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageViewASTCDecodeModeEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub decodeMode : Format,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceASTCDecodeFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub decodeModeSharedExponent : Bool32,
}

pub type ConditionalRenderingFlagBitsEXT = i32;
pub const CONDITIONAL_RENDERING_INVERTED_BIT_EXT : i32 = 0x00000001;
pub const CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type ConditionalRenderingFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConditionalRenderingBeginInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub buffer : Buffer,
	pub offset : DeviceSize,
	pub flags : ConditionalRenderingFlagsEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceConditionalRenderingFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub conditionalRendering : Bool32,
	pub inheritedConditionalRendering : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommandBufferInheritanceConditionalRenderingInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub conditionalRenderingEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ViewportWScalingNV {
	pub xcoeff : f32,
	pub ycoeff : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineViewportWScalingStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub viewportWScalingEnable : Bool32,
	pub viewportCount : u32,
	pub pViewportWScalings : *const ViewportWScalingNV,
}

pub type SurfaceCounterFlagBitsEXT = i32;
pub const SURFACE_COUNTER_VBLANK_EXT : i32 = 0x00000001;
pub const SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type SurfaceCounterFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceCapabilities2EXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub minImageCount : u32,
	pub maxImageCount : u32,
	pub currentExtent : Extent2D,
	pub minImageExtent : Extent2D,
	pub maxImageExtent : Extent2D,
	pub maxImageArrayLayers : u32,
	pub supportedTransforms : SurfaceTransformFlagsKHR,
	pub currentTransform : SurfaceTransformFlagBitsKHR,
	pub supportedCompositeAlpha : CompositeAlphaFlagsKHR,
	pub supportedUsageFlags : ImageUsageFlags,
	pub supportedSurfaceCounters : SurfaceCounterFlagsEXT,
}

pub type DisplayPowerStateEXT = i32;
pub const DISPLAY_POWER_STATE_OFF_EXT : i32 = 0;
pub const DISPLAY_POWER_STATE_SUSPEND_EXT : i32 = 1;
pub const DISPLAY_POWER_STATE_ON_EXT : i32 = 2;
pub const DISPLAY_POWER_STATE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type DeviceEventTypeEXT = i32;
pub const DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT : i32 = 0;
pub const DEVICE_EVENT_TYPE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type DisplayEventTypeEXT = i32;
pub const DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT : i32 = 0;
pub const DISPLAY_EVENT_TYPE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayPowerInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub powerState : DisplayPowerStateEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceEventInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub deviceEvent : DeviceEventTypeEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayEventInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub displayEvent : DisplayEventTypeEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwapchainCounterCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub surfaceCounters : SurfaceCounterFlagsEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RefreshCycleDurationGOOGLE {
	pub refreshDuration : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PastPresentationTimingGOOGLE {
	pub presentID : u32,
	pub desiredPresentTime : u64,
	pub actualPresentTime : u64,
	pub earliestPresentTime : u64,
	pub presentMargin : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PresentTimeGOOGLE {
	pub presentID : u32,
	pub desiredPresentTime : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PresentTimesInfoGOOGLE {
	pub sType : StructureType,
	pub pNext : *const void,
	pub swapchainCount : u32,
	pub pTimes : *const PresentTimeGOOGLE,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub perViewPositionAllComponents : Bool32,
}

pub type ViewportCoordinateSwizzleNV = i32;
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV : i32 = 0;
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV : i32 = 1;
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV : i32 = 2;
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV : i32 = 3;
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV : i32 = 4;
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV : i32 = 5;
pub const VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV : i32 = 6;
pub const VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV : i32 = 7;
pub const VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type PipelineViewportSwizzleStateCreateFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ViewportSwizzleNV {
	pub x : ViewportCoordinateSwizzleNV,
	pub y : ViewportCoordinateSwizzleNV,
	pub z : ViewportCoordinateSwizzleNV,
	pub w : ViewportCoordinateSwizzleNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineViewportSwizzleStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineViewportSwizzleStateCreateFlagsNV,
	pub viewportCount : u32,
	pub pViewportSwizzles : *const ViewportSwizzleNV,
}

pub type DiscardRectangleModeEXT = i32;
pub const DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT : i32 = 0;
pub const DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT : i32 = 1;
pub const DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type PipelineDiscardRectangleStateCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDiscardRectanglePropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxDiscardRectangles : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineDiscardRectangleStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineDiscardRectangleStateCreateFlagsEXT,
	pub discardRectangleMode : DiscardRectangleModeEXT,
	pub discardRectangleCount : u32,
	pub pDiscardRectangles : *const Rect2D,
}

pub type ConservativeRasterizationModeEXT = i32;
pub const CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT : i32 = 0;
pub const CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT : i32 = 1;
pub const CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT : i32 = 2;
pub const CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type PipelineRasterizationConservativeStateCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceConservativeRasterizationPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub primitiveOverestimationSize : f32,
	pub maxExtraPrimitiveOverestimationSize : f32,
	pub extraPrimitiveOverestimationSizeGranularity : f32,
	pub primitiveUnderestimation : Bool32,
	pub conservativePointAndLineRasterization : Bool32,
	pub degenerateTrianglesRasterized : Bool32,
	pub degenerateLinesRasterized : Bool32,
	pub fullyCoveredFragmentShaderInputVariable : Bool32,
	pub conservativeRasterizationPostDepthCoverage : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRasterizationConservativeStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineRasterizationConservativeStateCreateFlagsEXT,
	pub conservativeRasterizationMode : ConservativeRasterizationModeEXT,
	pub extraPrimitiveOverestimationSize : f32,
}

pub type PipelineRasterizationDepthClipStateCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDepthClipEnableFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub depthClipEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRasterizationDepthClipStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineRasterizationDepthClipStateCreateFlagsEXT,
	pub depthClipEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYColorEXT {
	pub x : f32,
	pub y : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HdrMetadataEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub displayPrimaryRed : XYColorEXT,
	pub displayPrimaryGreen : XYColorEXT,
	pub displayPrimaryBlue : XYColorEXT,
	pub whitePoint : XYColorEXT,
	pub maxLuminance : f32,
	pub minLuminance : f32,
	pub maxContentLightLevel : f32,
	pub maxFrameAverageLightLevel : f32,
}

pub type DebugUtilsMessengerEXT = u64;
pub type DebugUtilsMessengerCallbackDataFlagsEXT = u32;
pub type DebugUtilsMessageSeverityFlagBitsEXT = i32;
pub const DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT : i32 = 0x00000001;
pub const DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT : i32 = 0x00000010;
pub const DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT : i32 = 0x00000100;
pub const DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT : i32 = 0x00001000;
pub const DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type DebugUtilsMessageTypeFlagBitsEXT = i32;
pub const DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT : i32 = 0x00000001;
pub const DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT : i32 = 0x00000002;
pub const DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT : i32 = 0x00000004;
pub const DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type DebugUtilsMessageTypeFlagsEXT = u32;
pub type DebugUtilsMessengerCreateFlagsEXT = u32;
pub type DebugUtilsMessageSeverityFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugUtilsLabelEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pLabelName : *const i8,
	pub color : [f32;4],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugUtilsObjectNameInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub objectType : ObjectType,
	pub objectHandle : u64,
	pub pObjectName : *const i8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugUtilsMessengerCallbackDataEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DebugUtilsMessengerCallbackDataFlagsEXT,
	pub pMessageIdName : *const i8,
	pub messageIdNumber : i32,
	pub pMessage : *const i8,
	pub queueLabelCount : u32,
	pub pQueueLabels : *const DebugUtilsLabelEXT,
	pub cmdBufLabelCount : u32,
	pub pCmdBufLabels : *const DebugUtilsLabelEXT,
	pub objectCount : u32,
	pub pObjects : *const DebugUtilsObjectNameInfoEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugUtilsObjectTagInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub objectType : ObjectType,
	pub objectHandle : u64,
	pub tagName : u64,
	pub tagSize : usize,
	pub pTag : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DebugUtilsMessengerCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DebugUtilsMessengerCreateFlagsEXT,
	pub messageSeverity : DebugUtilsMessageSeverityFlagsEXT,
	pub messageType : DebugUtilsMessageTypeFlagsEXT,
	pub pfnUserCallback : u64,
	pub pUserData : *mut void,
}

pub type SamplerReductionModeEXT = SamplerReductionMode;
pub type SamplerReductionModeCreateInfoEXT = SamplerReductionModeCreateInfo;
pub type PhysicalDeviceSamplerFilterMinmaxPropertiesEXT = PhysicalDeviceSamplerFilterMinmaxProperties;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceInlineUniformBlockFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub inlineUniformBlock : Bool32,
	pub descriptorBindingInlineUniformBlockUpdateAfterBind : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceInlineUniformBlockPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxInlineUniformBlockSize : u32,
	pub maxPerStageDescriptorInlineUniformBlocks : u32,
	pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : u32,
	pub maxDescriptorSetInlineUniformBlocks : u32,
	pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WriteDescriptorSetInlineUniformBlockEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub dataSize : u32,
	pub pData : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DescriptorPoolInlineUniformBlockCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub maxInlineUniformBlockBindings : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SampleLocationEXT {
	pub x : f32,
	pub y : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SampleLocationsInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub sampleLocationsPerPixel : SampleCountFlagBits,
	pub sampleLocationGridSize : Extent2D,
	pub sampleLocationsCount : u32,
	pub pSampleLocations : *const SampleLocationEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AttachmentSampleLocationsEXT {
	pub attachmentIndex : u32,
	pub sampleLocationsInfo : SampleLocationsInfoEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubpassSampleLocationsEXT {
	pub subpassIndex : u32,
	pub sampleLocationsInfo : SampleLocationsInfoEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassSampleLocationsBeginInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub attachmentInitialSampleLocationsCount : u32,
	pub pAttachmentInitialSampleLocations : *const AttachmentSampleLocationsEXT,
	pub postSubpassSampleLocationsCount : u32,
	pub pPostSubpassSampleLocations : *const SubpassSampleLocationsEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineSampleLocationsStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub sampleLocationsEnable : Bool32,
	pub sampleLocationsInfo : SampleLocationsInfoEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSampleLocationsPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub sampleLocationSampleCounts : SampleCountFlags,
	pub maxSampleLocationGridSize : Extent2D,
	pub sampleLocationCoordinateRange : [f32;2],
	pub sampleLocationSubPixelBits : u32,
	pub variableSampleLocations : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MultisamplePropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxSampleLocationGridSize : Extent2D,
}

pub type BlendOverlapEXT = i32;
pub const BLEND_OVERLAP_UNCORRELATED_EXT : i32 = 0;
pub const BLEND_OVERLAP_DISJOINT_EXT : i32 = 1;
pub const BLEND_OVERLAP_CONJOINT_EXT : i32 = 2;
pub const BLEND_OVERLAP_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub advancedBlendCoherentOperations : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub advancedBlendMaxColorAttachments : u32,
	pub advancedBlendIndependentBlend : Bool32,
	pub advancedBlendNonPremultipliedSrcColor : Bool32,
	pub advancedBlendNonPremultipliedDstColor : Bool32,
	pub advancedBlendCorrelatedOverlap : Bool32,
	pub advancedBlendAllOperations : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineColorBlendAdvancedStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub srcPremultiplied : Bool32,
	pub dstPremultiplied : Bool32,
	pub blendOverlap : BlendOverlapEXT,
}

pub type PipelineCoverageToColorStateCreateFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCoverageToColorStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCoverageToColorStateCreateFlagsNV,
	pub coverageToColorEnable : Bool32,
	pub coverageToColorLocation : u32,
}

pub type CoverageModulationModeNV = i32;
pub const COVERAGE_MODULATION_MODE_NONE_NV : i32 = 0;
pub const COVERAGE_MODULATION_MODE_RGB_NV : i32 = 1;
pub const COVERAGE_MODULATION_MODE_ALPHA_NV : i32 = 2;
pub const COVERAGE_MODULATION_MODE_RGBA_NV : i32 = 3;
pub const COVERAGE_MODULATION_MODE_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type PipelineCoverageModulationStateCreateFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCoverageModulationStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCoverageModulationStateCreateFlagsNV,
	pub coverageModulationMode : CoverageModulationModeNV,
	pub coverageModulationTableEnable : Bool32,
	pub coverageModulationTableCount : u32,
	pub pCoverageModulationTable : *const f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderSMBuiltinsPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderSMCount : u32,
	pub shaderWarpsPerSM : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderSMBuiltinsFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderSMBuiltins : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrmFormatModifierPropertiesEXT {
	pub drmFormatModifier : u64,
	pub drmFormatModifierPlaneCount : u32,
	pub drmFormatModifierTilingFeatures : FormatFeatureFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrmFormatModifierPropertiesListEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub drmFormatModifierCount : u32,
	pub pDrmFormatModifierProperties : *mut DrmFormatModifierPropertiesEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceImageDrmFormatModifierInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub drmFormatModifier : u64,
	pub sharingMode : SharingMode,
	pub queueFamilyIndexCount : u32,
	pub pQueueFamilyIndices : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageDrmFormatModifierListCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub drmFormatModifierCount : u32,
	pub pDrmFormatModifiers : *const u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageDrmFormatModifierExplicitCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub drmFormatModifier : u64,
	pub drmFormatModifierPlaneCount : u32,
	pub pPlaneLayouts : *const SubresourceLayout,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageDrmFormatModifierPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub drmFormatModifier : u64,
}

pub type ValidationCacheEXT = u64;
pub type ValidationCacheHeaderVersionEXT = i32;
pub const VALIDATION_CACHE_HEADER_VERSION_ONE_EXT : i32 = 1;
pub const VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type ValidationCacheCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ValidationCacheCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : ValidationCacheCreateFlagsEXT,
	pub initialDataSize : usize,
	pub pInitialData : *const void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderModuleValidationCacheCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub validationCache : ValidationCacheEXT,
}

pub type DescriptorBindingFlagBitsEXT = DescriptorBindingFlagBits;
pub type DescriptorBindingFlagsEXT = DescriptorBindingFlags;
pub type DescriptorSetLayoutBindingFlagsCreateInfoEXT = DescriptorSetLayoutBindingFlagsCreateInfo;
pub type PhysicalDeviceDescriptorIndexingFeaturesEXT = PhysicalDeviceDescriptorIndexingFeatures;
pub type PhysicalDeviceDescriptorIndexingPropertiesEXT = PhysicalDeviceDescriptorIndexingProperties;
pub type DescriptorSetVariableDescriptorCountAllocateInfoEXT = DescriptorSetVariableDescriptorCountAllocateInfo;
pub type DescriptorSetVariableDescriptorCountLayoutSupportEXT = DescriptorSetVariableDescriptorCountLayoutSupport;
pub type ShadingRatePaletteEntryNV = i32;
pub const SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV : i32 = 0;
pub const SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV : i32 = 1;
pub const SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV : i32 = 2;
pub const SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV : i32 = 3;
pub const SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV : i32 = 4;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV : i32 = 5;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV : i32 = 6;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV : i32 = 7;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV : i32 = 8;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV : i32 = 9;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV : i32 = 10;
pub const SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV : i32 = 11;
pub const SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type CoarseSampleOrderTypeNV = i32;
pub const COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV : i32 = 0;
pub const COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV : i32 = 1;
pub const COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV : i32 = 2;
pub const COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV : i32 = 3;
pub const COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShadingRatePaletteNV {
	pub shadingRatePaletteEntryCount : u32,
	pub pShadingRatePaletteEntries : *const ShadingRatePaletteEntryNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineViewportShadingRateImageStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub shadingRateImageEnable : Bool32,
	pub viewportCount : u32,
	pub pShadingRatePalettes : *const ShadingRatePaletteNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShadingRateImageFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shadingRateImage : Bool32,
	pub shadingRateCoarseSampleOrder : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShadingRateImagePropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shadingRateTexelSize : Extent2D,
	pub shadingRatePaletteSize : u32,
	pub shadingRateMaxCoarseSamples : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoarseSampleLocationNV {
	pub pixelX : u32,
	pub pixelY : u32,
	pub sample : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoarseSampleOrderCustomNV {
	pub shadingRate : ShadingRatePaletteEntryNV,
	pub sampleCount : u32,
	pub sampleLocationCount : u32,
	pub pSampleLocations : *const CoarseSampleLocationNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineViewportCoarseSampleOrderStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub sampleOrderType : CoarseSampleOrderTypeNV,
	pub customSampleOrderCount : u32,
	pub pCustomSampleOrders : *const CoarseSampleOrderCustomNV,
}

pub type AccelerationStructureKHR = u64;
pub type AccelerationStructureNV = AccelerationStructureKHR;
pub type RayTracingShaderGroupTypeKHR = i32;
pub const RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR : i32 = 0;
pub const RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR : i32 = 1;
pub const RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR : i32 = 2;
pub const RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV : i32 = RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR;
pub const RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV : i32 = RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR;
pub const RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV : i32 = RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR;
pub const RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type RayTracingShaderGroupTypeNV = RayTracingShaderGroupTypeKHR;
pub type GeometryTypeKHR = i32;
pub const GEOMETRY_TYPE_TRIANGLES_KHR : i32 = 0;
pub const GEOMETRY_TYPE_AABBS_KHR : i32 = 1;
pub const GEOMETRY_TYPE_INSTANCES_KHR : i32 = 1000150000;
pub const GEOMETRY_TYPE_TRIANGLES_NV : i32 = GEOMETRY_TYPE_TRIANGLES_KHR;
pub const GEOMETRY_TYPE_AABBS_NV : i32 = GEOMETRY_TYPE_AABBS_KHR;
pub const GEOMETRY_TYPE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type GeometryTypeNV = GeometryTypeKHR;
pub type AccelerationStructureTypeKHR = i32;
pub const ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR : i32 = 0;
pub const ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR : i32 = 1;
pub const ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV : i32 = ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR;
pub const ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV : i32 = ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR;
pub const ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type AccelerationStructureTypeNV = AccelerationStructureTypeKHR;
pub type CopyAccelerationStructureModeKHR = i32;
pub const COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR : i32 = 0;
pub const COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR : i32 = 1;
pub const COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR : i32 = 2;
pub const COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR : i32 = 3;
pub const COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV : i32 = COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR;
pub const COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV : i32 = COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR;
pub const COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type CopyAccelerationStructureModeNV = CopyAccelerationStructureModeKHR;
pub type AccelerationStructureMemoryRequirementsTypeKHR = i32;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR : i32 = 0;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR : i32 = 1;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR : i32 = 2;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV : i32 = ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_KHR;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV : i32 = ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_KHR;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV : i32 = ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_KHR;
pub const ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type AccelerationStructureMemoryRequirementsTypeNV = AccelerationStructureMemoryRequirementsTypeKHR;
pub type GeometryFlagBitsKHR = i32;
pub const GEOMETRY_OPAQUE_BIT_KHR : i32 = 0x00000001;
pub const GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR : i32 = 0x00000002;
pub const GEOMETRY_OPAQUE_BIT_NV : i32 = GEOMETRY_OPAQUE_BIT_KHR;
pub const GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV : i32 = GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR;
pub const GEOMETRY_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type GeometryFlagsKHR = u32;
pub type GeometryFlagsNV = GeometryFlagsKHR;
pub type GeometryFlagBitsNV = GeometryFlagBitsKHR;
pub type GeometryInstanceFlagBitsKHR = i32;
pub const GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR : i32 = 0x00000001;
pub const GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR : i32 = 0x00000002;
pub const GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR : i32 = 0x00000004;
pub const GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR : i32 = 0x00000008;
pub const GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV : i32 = GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;
pub const GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV : i32 = GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR;
pub const GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV : i32 = GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR;
pub const GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV : i32 = GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR;
pub const GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type GeometryInstanceFlagsKHR = u32;
pub type GeometryInstanceFlagsNV = GeometryInstanceFlagsKHR;
pub type GeometryInstanceFlagBitsNV = GeometryInstanceFlagBitsKHR;
pub type BuildAccelerationStructureFlagBitsKHR = i32;
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR : i32 = 0x00000001;
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR : i32 = 0x00000002;
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR : i32 = 0x00000004;
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR : i32 = 0x00000008;
pub const BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR : i32 = 0x00000010;
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV : i32 = BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR;
pub const BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV : i32 = BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR;
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV : i32 = BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR;
pub const BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV : i32 = BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR;
pub const BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV : i32 = BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR;
pub const BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR : i32 = 0x7FFFFFF;
pub type BuildAccelerationStructureFlagsKHR = u32;
pub type BuildAccelerationStructureFlagsNV = BuildAccelerationStructureFlagsKHR;
pub type BuildAccelerationStructureFlagBitsNV = BuildAccelerationStructureFlagBitsKHR;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingShaderGroupCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub r#type : RayTracingShaderGroupTypeKHR,
	pub generalShader : u32,
	pub closestHitShader : u32,
	pub anyHitShader : u32,
	pub intersectionShader : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingPipelineCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCreateFlags,
	pub stageCount : u32,
	pub pStages : *const PipelineShaderStageCreateInfo,
	pub groupCount : u32,
	pub pGroups : *const RayTracingShaderGroupCreateInfoNV,
	pub maxRecursionDepth : u32,
	pub layout : PipelineLayout,
	pub basePipelineHandle : Pipeline,
	pub basePipelineIndex : i32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeometryTrianglesNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub vertexData : Buffer,
	pub vertexOffset : DeviceSize,
	pub vertexCount : u32,
	pub vertexStride : DeviceSize,
	pub vertexFormat : Format,
	pub indexData : Buffer,
	pub indexOffset : DeviceSize,
	pub indexCount : u32,
	pub indexType : IndexType,
	pub transformData : Buffer,
	pub transformOffset : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeometryAABBNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub aabbData : Buffer,
	pub numAABBs : u32,
	pub stride : u32,
	pub offset : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeometryDataNV {
	pub triangles : GeometryTrianglesNV,
	pub aabbs : GeometryAABBNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeometryNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub geometryType : GeometryTypeKHR,
	pub geometry : GeometryDataNV,
	pub flags : GeometryFlagsKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelerationStructureInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub r#type : AccelerationStructureTypeNV,
	pub flags : BuildAccelerationStructureFlagsNV,
	pub instanceCount : u32,
	pub geometryCount : u32,
	pub pGeometries : *const GeometryNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelerationStructureCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub compactedSize : DeviceSize,
	pub info : AccelerationStructureInfoNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindAccelerationStructureMemoryInfoKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub accelerationStructure : AccelerationStructureKHR,
	pub memory : DeviceMemory,
	pub memoryOffset : DeviceSize,
	pub deviceIndexCount : u32,
	pub pDeviceIndices : *const u32,
}

pub type BindAccelerationStructureMemoryInfoNV = BindAccelerationStructureMemoryInfoKHR;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WriteDescriptorSetAccelerationStructureKHR {
	pub sType : StructureType,
	pub pNext : *const void,
	pub accelerationStructureCount : u32,
	pub pAccelerationStructures : *const AccelerationStructureKHR,
}

pub type WriteDescriptorSetAccelerationStructureNV = WriteDescriptorSetAccelerationStructureKHR;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelerationStructureMemoryRequirementsInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub r#type : AccelerationStructureMemoryRequirementsTypeNV,
	pub accelerationStructure : AccelerationStructureNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceRayTracingPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderGroupHandleSize : u32,
	pub maxRecursionDepth : u32,
	pub maxShaderGroupStride : u32,
	pub shaderGroupBaseAlignment : u32,
	pub maxGeometryCount : u64,
	pub maxInstanceCount : u64,
	pub maxTriangleCount : u64,
	pub maxDescriptorSetAccelerationStructures : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransformMatrixKHR {
	pub matrix : [f32;12],
}

pub type TransformMatrixNV = TransformMatrixKHR;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AabbPositionsKHR {
	pub minX : f32,
	pub minY : f32,
	pub minZ : f32,
	pub maxX : f32,
	pub maxY : f32,
	pub maxZ : f32,
}

pub type AabbPositionsNV = AabbPositionsKHR;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub representativeFragmentTest : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRepresentativeFragmentTestStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub representativeFragmentTestEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceImageViewImageFormatInfoEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub imageViewType : ImageViewType,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterCubicImageViewImageFormatPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub filterCubic : Bool32,
	pub filterCubicMinmax : Bool32,
}

pub type QueueGlobalPriorityEXT = i32;
pub const QUEUE_GLOBAL_PRIORITY_LOW_EXT : i32 = 128;
pub const QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT : i32 = 256;
pub const QUEUE_GLOBAL_PRIORITY_HIGH_EXT : i32 = 512;
pub const QUEUE_GLOBAL_PRIORITY_REALTIME_EXT : i32 = 1024;
pub const QUEUE_GLOBAL_PRIORITY_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceQueueGlobalPriorityCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub globalPriority : QueueGlobalPriorityEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportMemoryHostPointerInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub handleType : ExternalMemoryHandleTypeFlagBits,
	pub pHostPointer : *mut void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryHostPointerPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub memoryTypeBits : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceExternalMemoryHostPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub minImportedHostPointerAlignment : DeviceSize,
}

pub type PipelineCompilerControlFlagBitsAMD = i32;
pub const PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD : i32 = 0x7FFFFFF;
pub type PipelineCompilerControlFlagsAMD = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCompilerControlCreateInfoAMD {
	pub sType : StructureType,
	pub pNext : *const void,
	pub compilerControlFlags : PipelineCompilerControlFlagsAMD,
}

pub type TimeDomainEXT = i32;
pub const TIME_DOMAIN_DEVICE_EXT : i32 = 0;
pub const TIME_DOMAIN_CLOCK_MONOTONIC_EXT : i32 = 1;
pub const TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT : i32 = 2;
pub const TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT : i32 = 3;
pub const TIME_DOMAIN_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CalibratedTimestampInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub timeDomain : TimeDomainEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderCorePropertiesAMD {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderEngineCount : u32,
	pub shaderArraysPerEngineCount : u32,
	pub computeUnitsPerShaderArray : u32,
	pub simdPerComputeUnit : u32,
	pub wavefrontsPerSimd : u32,
	pub wavefrontSize : u32,
	pub sgprsPerSimd : u32,
	pub minSgprAllocation : u32,
	pub maxSgprAllocation : u32,
	pub sgprAllocationGranularity : u32,
	pub vgprsPerSimd : u32,
	pub minVgprAllocation : u32,
	pub maxVgprAllocation : u32,
	pub vgprAllocationGranularity : u32,
}

pub type MemoryOverallocationBehaviorAMD = i32;
pub const MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD : i32 = 0;
pub const MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD : i32 = 1;
pub const MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD : i32 = 2;
pub const MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceMemoryOverallocationCreateInfoAMD {
	pub sType : StructureType,
	pub pNext : *const void,
	pub overallocationBehavior : MemoryOverallocationBehaviorAMD,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxVertexAttribDivisor : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VertexInputBindingDivisorDescriptionEXT {
	pub binding : u32,
	pub divisor : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineVertexInputDivisorStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub vertexBindingDivisorCount : u32,
	pub pVertexBindingDivisors : *const VertexInputBindingDivisorDescriptionEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceVertexAttributeDivisorFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub vertexAttributeInstanceRateDivisor : Bool32,
	pub vertexAttributeInstanceRateZeroDivisor : Bool32,
}

pub type PipelineCreationFeedbackFlagBitsEXT = i32;
pub const PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT : i32 = 0x00000001;
pub const PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT : i32 = 0x00000002;
pub const PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT : i32 = 0x00000004;
pub const PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type PipelineCreationFeedbackFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCreationFeedbackEXT {
	pub flags : PipelineCreationFeedbackFlagsEXT,
	pub duration : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCreationFeedbackCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pPipelineCreationFeedback : *mut PipelineCreationFeedbackEXT,
	pub pipelineStageCreationFeedbackCount : u32,
	pub pPipelineStageCreationFeedbacks : *mut PipelineCreationFeedbackEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceComputeShaderDerivativesFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub computeDerivativeGroupQuads : Bool32,
	pub computeDerivativeGroupLinear : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMeshShaderFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub taskShader : Bool32,
	pub meshShader : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMeshShaderPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxDrawMeshTasksCount : u32,
	pub maxTaskWorkGroupInvocations : u32,
	pub maxTaskWorkGroupSize : [u32;3],
	pub maxTaskTotalMemorySize : u32,
	pub maxTaskOutputCount : u32,
	pub maxMeshWorkGroupInvocations : u32,
	pub maxMeshWorkGroupSize : [u32;3],
	pub maxMeshTotalMemorySize : u32,
	pub maxMeshOutputVertices : u32,
	pub maxMeshOutputPrimitives : u32,
	pub maxMeshMultiviewViewCount : u32,
	pub meshOutputPerVertexGranularity : u32,
	pub meshOutputPerPrimitiveGranularity : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DrawMeshTasksIndirectCommandNV {
	pub taskCount : u32,
	pub firstTask : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFragmentShaderBarycentricFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub fragmentShaderBarycentric : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderImageFootprintFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub imageFootprint : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineViewportExclusiveScissorStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub exclusiveScissorCount : u32,
	pub pExclusiveScissors : *const Rect2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceExclusiveScissorFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub exclusiveScissor : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueueFamilyCheckpointPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub checkpointExecutionStageMask : PipelineStageFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CheckpointDataNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub stage : PipelineStageFlagBits,
	pub pCheckpointMarker : *mut void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderIntegerFunctions2 : Bool32,
}

pub type PerformanceConfigurationINTEL = u64;
pub type PerformanceConfigurationTypeINTEL = i32;
pub const PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL : i32 = 0;
pub const PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL : i32 = 0x7FFFFFF;
pub type QueryPoolSamplingModeINTEL = i32;
pub const QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL : i32 = 0;
pub const QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL : i32 = 0x7FFFFFF;
pub type PerformanceOverrideTypeINTEL = i32;
pub const PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL : i32 = 0;
pub const PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL : i32 = 1;
pub const PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL : i32 = 0x7FFFFFF;
pub type PerformanceParameterTypeINTEL = i32;
pub const PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL : i32 = 0;
pub const PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL : i32 = 1;
pub const PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL : i32 = 0x7FFFFFF;
pub type PerformanceValueTypeINTEL = i32;
pub const PERFORMANCE_VALUE_TYPE_UINT32_INTEL : i32 = 0;
pub const PERFORMANCE_VALUE_TYPE_UINT64_INTEL : i32 = 1;
pub const PERFORMANCE_VALUE_TYPE_FLOAT_INTEL : i32 = 2;
pub const PERFORMANCE_VALUE_TYPE_BOOL_INTEL : i32 = 3;
pub const PERFORMANCE_VALUE_TYPE_STRING_INTEL : i32 = 4;
pub const PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL : i32 = 0x7FFFFFF;

union PerformanceValueDataINTEL {
    value32	: u32,
    value64 : u64,
    valueFloat : f32,
    valueBool : i32,
    valueString	: *const i8,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitializePerformanceApiInfoINTEL {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pUserData : *mut void,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QueryPoolPerformanceQueryCreateInfoINTEL {
	pub sType : StructureType,
	pub pNext : *const void,
	pub performanceCountersSampling : QueryPoolSamplingModeINTEL,
}

pub type QueryPoolCreateInfoINTEL = QueryPoolPerformanceQueryCreateInfoINTEL;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerformanceMarkerInfoINTEL {
	pub sType : StructureType,
	pub pNext : *const void,
	pub marker : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerformanceStreamMarkerInfoINTEL {
	pub sType : StructureType,
	pub pNext : *const void,
	pub marker : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerformanceOverrideInfoINTEL {
	pub sType : StructureType,
	pub pNext : *const void,
	pub r#type : PerformanceOverrideTypeINTEL,
	pub enable : Bool32,
	pub parameter : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerformanceConfigurationAcquireInfoINTEL {
	pub sType : StructureType,
	pub pNext : *const void,
	pub r#type : PerformanceConfigurationTypeINTEL,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePCIBusInfoPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub pciDomain : u32,
	pub pciBus : u32,
	pub pciDevice : u32,
	pub pciFunction : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DisplayNativeHdrSurfaceCapabilitiesAMD {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub localDimmingSupport : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwapchainDisplayNativeHdrCreateInfoAMD {
	pub sType : StructureType,
	pub pNext : *const void,
	pub localDimmingEnable : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFragmentDensityMapFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub fragmentDensityMap : Bool32,
	pub fragmentDensityMapDynamic : Bool32,
	pub fragmentDensityMapNonSubsampledImages : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFragmentDensityMapPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub minFragmentDensityTexelSize : Extent2D,
	pub maxFragmentDensityTexelSize : Extent2D,
	pub fragmentDensityInvocations : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassFragmentDensityMapCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub fragmentDensityMapAttachment : AttachmentReference,
}

pub type PhysicalDeviceScalarBlockLayoutFeaturesEXT = PhysicalDeviceScalarBlockLayoutFeatures;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSubgroupSizeControlFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub subgroupSizeControl : Bool32,
	pub computeFullSubgroups : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceSubgroupSizeControlPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub minSubgroupSize : u32,
	pub maxSubgroupSize : u32,
	pub maxComputeWorkgroupSubgroups : u32,
	pub requiredSubgroupSizeStages : ShaderStageFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub requiredSubgroupSize : u32,
}

pub type ShaderCorePropertiesFlagBitsAMD = i32;
pub const SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD : i32 = 0x7FFFFFF;
pub type ShaderCorePropertiesFlagsAMD = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderCoreProperties2AMD {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderCoreFeatures : ShaderCorePropertiesFlagsAMD,
	pub activeComputeUnitCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCoherentMemoryFeaturesAMD {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub deviceCoherentMemory : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMemoryBudgetPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub heapBudget : [DeviceSize;MAX_MEMORY_HEAPS],
	pub heapUsage : [DeviceSize;MAX_MEMORY_HEAPS],
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceMemoryPriorityFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub memoryPriority : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryPriorityAllocateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub priority : f32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub dedicatedAllocationImageAliasing : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceBufferDeviceAddressFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub bufferDeviceAddress : Bool32,
	pub bufferDeviceAddressCaptureReplay : Bool32,
	pub bufferDeviceAddressMultiDevice : Bool32,
}

pub type PhysicalDeviceBufferAddressFeaturesEXT = PhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub type BufferDeviceAddressInfoEXT = BufferDeviceAddressInfo;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferDeviceAddressCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub deviceAddress : DeviceAddress,
}

pub type ToolPurposeFlagBitsEXT = i32;
pub const TOOL_PURPOSE_VALIDATION_BIT_EXT : i32 = 0x00000001;
pub const TOOL_PURPOSE_PROFILING_BIT_EXT : i32 = 0x00000002;
pub const TOOL_PURPOSE_TRACING_BIT_EXT : i32 = 0x00000004;
pub const TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT : i32 = 0x00000008;
pub const TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT : i32 = 0x00000010;
pub const TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT : i32 = 0x00000020;
pub const TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT : i32 = 0x00000040;
pub const TOOL_PURPOSE_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type ToolPurposeFlagsEXT = u32;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct PhysicalDeviceToolPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub name : [i8;MAX_EXTENSION_NAME_SIZE],
	pub version : [i8;MAX_EXTENSION_NAME_SIZE],
	pub purposes : ToolPurposeFlagsEXT,
	pub description : [i8;MAX_DESCRIPTION_SIZE],
	pub layer : [i8;MAX_EXTENSION_NAME_SIZE],
}

pub type ImageStencilUsageCreateInfoEXT = ImageStencilUsageCreateInfo;
pub type ValidationFeatureEnableEXT = i32;
pub const VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT : i32 = 0;
pub const VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT : i32 = 1;
pub const VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT : i32 = 2;
pub const VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT : i32 = 3;
pub const VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type ValidationFeatureDisableEXT = i32;
pub const VALIDATION_FEATURE_DISABLE_ALL_EXT : i32 = 0;
pub const VALIDATION_FEATURE_DISABLE_SHADERS_EXT : i32 = 1;
pub const VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT : i32 = 2;
pub const VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT : i32 = 3;
pub const VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT : i32 = 4;
pub const VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT : i32 = 5;
pub const VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT : i32 = 6;
pub const VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ValidationFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub enabledValidationFeatureCount : u32,
	pub pEnabledValidationFeatures : *const ValidationFeatureEnableEXT,
	pub disabledValidationFeatureCount : u32,
	pub pDisabledValidationFeatures : *const ValidationFeatureDisableEXT,
}

pub type ComponentTypeNV = i32;
pub const COMPONENT_TYPE_FLOAT16_NV : i32 = 0;
pub const COMPONENT_TYPE_FLOAT32_NV : i32 = 1;
pub const COMPONENT_TYPE_FLOAT64_NV : i32 = 2;
pub const COMPONENT_TYPE_SINT8_NV : i32 = 3;
pub const COMPONENT_TYPE_SINT16_NV : i32 = 4;
pub const COMPONENT_TYPE_SINT32_NV : i32 = 5;
pub const COMPONENT_TYPE_SINT64_NV : i32 = 6;
pub const COMPONENT_TYPE_UINT8_NV : i32 = 7;
pub const COMPONENT_TYPE_UINT16_NV : i32 = 8;
pub const COMPONENT_TYPE_UINT32_NV : i32 = 9;
pub const COMPONENT_TYPE_UINT64_NV : i32 = 10;
pub const COMPONENT_TYPE_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type ScopeNV = i32;
pub const SCOPE_DEVICE_NV : i32 = 1;
pub const SCOPE_WORKGROUP_NV : i32 = 2;
pub const SCOPE_SUBGROUP_NV : i32 = 3;
pub const SCOPE_QUEUE_FAMILY_NV : i32 = 5;
pub const SCOPE_MAX_ENUM_NV : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CooperativeMatrixPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub MSize : u32,
	pub NSize : u32,
	pub KSize : u32,
	pub AType : ComponentTypeNV,
	pub BType : ComponentTypeNV,
	pub CType : ComponentTypeNV,
	pub DType : ComponentTypeNV,
	pub scope : ScopeNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCooperativeMatrixFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub cooperativeMatrix : Bool32,
	pub cooperativeMatrixRobustBufferAccess : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCooperativeMatrixPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub cooperativeMatrixSupportedStages : ShaderStageFlags,
}

pub type CoverageReductionModeNV = i32;
pub const COVERAGE_REDUCTION_MODE_MERGE_NV : i32 = 0;
pub const COVERAGE_REDUCTION_MODE_TRUNCATE_NV : i32 = 1;
pub const COVERAGE_REDUCTION_MODE_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type PipelineCoverageReductionStateCreateFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCoverageReductionModeFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub coverageReductionMode : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineCoverageReductionStateCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PipelineCoverageReductionStateCreateFlagsNV,
	pub coverageReductionMode : CoverageReductionModeNV,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FramebufferMixedSamplesCombinationNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub coverageReductionMode : CoverageReductionModeNV,
	pub rasterizationSamples : SampleCountFlagBits,
	pub depthStencilSamples : SampleCountFlags,
	pub colorSamples : SampleCountFlags,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub fragmentShaderSampleInterlock : Bool32,
	pub fragmentShaderPixelInterlock : Bool32,
	pub fragmentShaderShadingRateInterlock : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceYcbcrImageArraysFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub ycbcrImageArrays : Bool32,
}

pub type HeadlessSurfaceCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HeadlessSurfaceCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : HeadlessSurfaceCreateFlagsEXT,
}

pub type LineRasterizationModeEXT = i32;
pub const LINE_RASTERIZATION_MODE_DEFAULT_EXT : i32 = 0;
pub const LINE_RASTERIZATION_MODE_RECTANGULAR_EXT : i32 = 1;
pub const LINE_RASTERIZATION_MODE_BRESENHAM_EXT : i32 = 2;
pub const LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT : i32 = 3;
pub const LINE_RASTERIZATION_MODE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceLineRasterizationFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub rectangularLines : Bool32,
	pub bresenhamLines : Bool32,
	pub smoothLines : Bool32,
	pub stippledRectangularLines : Bool32,
	pub stippledBresenhamLines : Bool32,
	pub stippledSmoothLines : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceLineRasterizationPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub lineSubPixelPrecisionBits : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PipelineRasterizationLineStateCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub lineRasterizationMode : LineRasterizationModeEXT,
	pub stippledLineEnable : Bool32,
	pub lineStippleFactor : u32,
	pub lineStipplePattern : u16,
}

pub type PhysicalDeviceHostQueryResetFeaturesEXT = PhysicalDeviceHostQueryResetFeatures;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceIndexTypeUint8FeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub indexTypeUint8 : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub shaderDemoteToHelperInvocation : Bool32,
}

pub type IndirectCommandsLayoutNV = u64;
pub type IndirectCommandsTokenTypeNV = i32;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV : i32 = 0;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV : i32 = 1;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV : i32 = 2;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV : i32 = 3;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV : i32 = 4;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV : i32 = 5;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV : i32 = 6;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV : i32 = 7;
pub const INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type IndirectStateFlagBitsNV = i32;
pub const INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV : i32 = 0x00000001;
pub const INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type IndirectStateFlagsNV = u32;
pub type IndirectCommandsLayoutUsageFlagBitsNV = i32;
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV : i32 = 0x00000001;
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV : i32 = 0x00000002;
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV : i32 = 0x00000004;
pub const INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type IndirectCommandsLayoutUsageFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxGraphicsShaderGroupCount : u32,
	pub maxIndirectSequenceCount : u32,
	pub maxIndirectCommandsTokenCount : u32,
	pub maxIndirectCommandsStreamCount : u32,
	pub maxIndirectCommandsTokenOffset : u32,
	pub maxIndirectCommandsStreamStride : u32,
	pub minSequencesCountBufferOffsetAlignment : u32,
	pub minSequencesIndexBufferOffsetAlignment : u32,
	pub minIndirectCommandsBufferOffsetAlignment : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub deviceGeneratedCommands : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GraphicsShaderGroupCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub stageCount : u32,
	pub pStages : *const PipelineShaderStageCreateInfo,
	pub pVertexInputState : *const PipelineVertexInputStateCreateInfo,
	pub pTessellationState : *const PipelineTessellationStateCreateInfo,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GraphicsPipelineShaderGroupsCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub groupCount : u32,
	pub pGroups : *const GraphicsShaderGroupCreateInfoNV,
	pub pipelineCount : u32,
	pub pPipelines : *const Pipeline,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindShaderGroupIndirectCommandNV {
	pub groupIndex : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindIndexBufferIndirectCommandNV {
	pub bufferAddress : DeviceAddress,
	pub size : u32,
	pub indexType : IndexType,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindVertexBufferIndirectCommandNV {
	pub bufferAddress : DeviceAddress,
	pub size : u32,
	pub stride : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStateFlagsIndirectCommandNV {
	pub data : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndirectCommandsStreamNV {
	pub buffer : Buffer,
	pub offset : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndirectCommandsLayoutTokenNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub tokenType : IndirectCommandsTokenTypeNV,
	pub stream : u32,
	pub offset : u32,
	pub vertexBindingUnit : u32,
	pub vertexDynamicStride : Bool32,
	pub pushconstantPipelineLayout : PipelineLayout,
	pub pushconstantShaderStageFlags : ShaderStageFlags,
	pub pushconstantOffset : u32,
	pub pushconstantSize : u32,
	pub indirectStateFlags : IndirectStateFlagsNV,
	pub indexTypeCount : u32,
	pub pIndexTypes : *const IndexType,
	pub pIndexTypeValues : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IndirectCommandsLayoutCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : IndirectCommandsLayoutUsageFlagsNV,
	pub pipelineBindPoint : PipelineBindPoint,
	pub tokenCount : u32,
	pub pTokens : *const IndirectCommandsLayoutTokenNV,
	pub streamCount : u32,
	pub pStreamStrides : *const u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeneratedCommandsInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pipelineBindPoint : PipelineBindPoint,
	pub pipeline : Pipeline,
	pub indirectCommandsLayout : IndirectCommandsLayoutNV,
	pub streamCount : u32,
	pub pStreams : *const IndirectCommandsStreamNV,
	pub sequencesCount : u32,
	pub preprocessBuffer : Buffer,
	pub preprocessOffset : DeviceSize,
	pub preprocessSize : DeviceSize,
	pub sequencesCountBuffer : Buffer,
	pub sequencesCountOffset : DeviceSize,
	pub sequencesIndexBuffer : Buffer,
	pub sequencesIndexOffset : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeneratedCommandsMemoryRequirementsInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub pipelineBindPoint : PipelineBindPoint,
	pub pipeline : Pipeline,
	pub indirectCommandsLayout : IndirectCommandsLayoutNV,
	pub maxSequencesCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub texelBufferAlignment : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceTexelBufferAlignmentPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub storageTexelBufferOffsetAlignmentBytes : DeviceSize,
	pub storageTexelBufferOffsetSingleTexelAlignment : Bool32,
	pub uniformTexelBufferOffsetAlignmentBytes : DeviceSize,
	pub uniformTexelBufferOffsetSingleTexelAlignment : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderPassTransformBeginInfoQCOM {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub transform : SurfaceTransformFlagBitsKHR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CommandBufferInheritanceRenderPassTransformInfoQCOM {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub transform : SurfaceTransformFlagBitsKHR,
	pub renderArea : Rect2D,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceRobustness2FeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub robustBufferAccess2 : Bool32,
	pub robustImageAccess2 : Bool32,
	pub nullDescriptor : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceRobustness2PropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub robustStorageBufferAccessSizeAlignment : DeviceSize,
	pub robustUniformBufferAccessSizeAlignment : DeviceSize,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplerCustomBorderColorCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub customBorderColor : ClearColorValue,
	pub format : Format,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCustomBorderColorPropertiesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub maxCustomBorderColorSamplers : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceCustomBorderColorFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub customBorderColors : Bool32,
	pub customBorderColorWithoutFormat : Bool32,
}

pub type PrivateDataSlotEXT = u64;
pub type PrivateDataSlotCreateFlagBitsEXT = i32;
pub const PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM_EXT : i32 = 0x7FFFFFF;
pub type PrivateDataSlotCreateFlagsEXT = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePrivateDataFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub privateData : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DevicePrivateDataCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub privateDataSlotRequestCount : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrivateDataSlotCreateInfoEXT {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : PrivateDataSlotCreateFlagsEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDevicePipelineCreationCacheControlFeaturesEXT {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub pipelineCreationCacheControl : Bool32,
}

pub type DeviceDiagnosticsConfigFlagBitsNV = i32;
pub const DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV : i32 = 0x00000001;
pub const DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV : i32 = 0x00000002;
pub const DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV : i32 = 0x00000004;
pub const DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV : i32 = 0x7FFFFFF;
pub type DeviceDiagnosticsConfigFlagsNV = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhysicalDeviceDiagnosticsConfigFeaturesNV {
	pub sType : StructureType,
	pub pNext : *mut void,
	pub diagnosticsConfig : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceDiagnosticsConfigCreateInfoNV {
	pub sType : StructureType,
	pub pNext : *const void,
	pub flags : DeviceDiagnosticsConfigFlagsNV,
}


//WIN32
//windows types
pub type HINSTANCE = u64;
pub type HWND = u64;
pub type HANDLE = u64;
pub type DWORD = u32;
pub type LPCWSTR = *const i16;
pub type HMONITOR = u64;
pub type LPSECURITY_ATTRIBUTES = u64;

pub type Win32SurfaceCreateFlagsKHR = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Win32SurfaceCreateInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub flags : Win32SurfaceCreateFlagsKHR,
        pub hinstance : HINSTANCE,
        pub hwnd : HWND,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportMemoryWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub handleType : ExternalMemoryHandleTypeFlagBits,
        pub handle : HANDLE,
        pub name : LPCWSTR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportMemoryWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub pAttributes : LPSECURITY_ATTRIBUTES,
        pub dwAccess : DWORD,
        pub name : LPCWSTR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryWin32HandlePropertiesKHR {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub memoryTypeBits : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryGetWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub memory : DeviceMemory,
        pub handleType : ExternalMemoryHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Win32KeyedMutexAcquireReleaseInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub acquireCount : u32,
        pub pAcquireSyncs : *const DeviceMemory,
        pub pAcquireKeys : *const u64,
        pub pAcquireTimeouts : *const u32,
        pub releaseCount : u32,
        pub pReleaseSyncs : *const DeviceMemory,
        pub pReleaseKeys : *const u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportSemaphoreWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub semaphore : Semaphore,
        pub flags : SemaphoreImportFlags,
        pub handleType : ExternalSemaphoreHandleTypeFlagBits,
        pub handle : HANDLE,
        pub name : LPCWSTR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportSemaphoreWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub pAttributes : LPSECURITY_ATTRIBUTES,
        pub dwAccess : DWORD,
        pub name : LPCWSTR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12FenceSubmitInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub waitSemaphoreValuesCount : u32,
        pub pWaitSemaphoreValues : *const u64,
        pub signalSemaphoreValuesCount : u32,
        pub pSignalSemaphoreValues : *const u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SemaphoreGetWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub semaphore : Semaphore,
        pub handleType : ExternalSemaphoreHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportFenceWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub fence : Fence,
        pub flags : FenceImportFlags,
        pub handleType : ExternalFenceHandleTypeFlagBits,
        pub handle : HANDLE,
        pub name : LPCWSTR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportFenceWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub pAttributes : LPSECURITY_ATTRIBUTES,
        pub dwAccess : DWORD,
        pub name : LPCWSTR,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FenceGetWin32HandleInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub fence : Fence,
        pub handleType : ExternalFenceHandleTypeFlagBits,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportMemoryWin32HandleInfoNV {
        pub sType : StructureType,
        pub pNext : *const void,
        pub handleType : ExternalMemoryHandleTypeFlagsNV,
        pub handle : HANDLE,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExportMemoryWin32HandleInfoNV {
        pub sType : StructureType,
        pub pNext : *const void,
        pub pAttributes : LPSECURITY_ATTRIBUTES,
        pub dwAccess : DWORD,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Win32KeyedMutexAcquireReleaseInfoNV {
        pub sType : StructureType,
        pub pNext : *const void,
        pub acquireCount : u32,
        pub pAcquireSyncs : *const DeviceMemory,
        pub pAcquireKeys : *const u64,
        pub pAcquireTimeoutMilliseconds : *const u32,
        pub releaseCount : u32,
        pub pReleaseSyncs : *const DeviceMemory,
        pub pReleaseKeys : *const u64,
}

pub type FullScreenExclusiveEXT = i32;
pub const FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT : i32 = 0;
pub const FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT : i32 = 1;
pub const FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT : i32 = 2;
pub const FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT : i32 = 3;
pub const FULL_SCREEN_EXCLUSIVE_MAX_ENUM_EXT : i32 = 0x7FFFFFF;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceFullScreenExclusiveInfoEXT {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub fullScreenExclusive : FullScreenExclusiveEXT,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceCapabilitiesFullScreenExclusiveEXT {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub fullScreenExclusiveSupported : Bool32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceFullScreenExclusiveWin32InfoEXT {
        pub sType : StructureType,
        pub pNext : *const void,
        pub hmonitor : HMONITOR,
}

impl ::std::default::Default for ApplicationInfo {
    fn default() -> ApplicationInfo {
        ApplicationInfo {
            sType : STRUCTURE_TYPE_APPLICATION_INFO,
            pNext : 0 as _,
            pApplicationName : 0 as _,
            applicationVersion : 0 as _,
            pEngineName : 0 as _,
            engineVersion : 0 as _,
            apiVersion : 0 as _,
        }
    }
}
impl ::std::default::Default for InstanceCreateInfo {
    fn default() -> InstanceCreateInfo {
        InstanceCreateInfo {
            sType : STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
            pNext : 0 as _,
            flags : 0 as _,
            pApplicationInfo : 0 as _,
            enabledLayerCount : 0 as _,
            ppEnabledLayerNames : 0 as _,
            enabledExtensionCount : 0 as _,
            ppEnabledExtensionNames : 0 as _,
        }
    }
}
impl ::std::default::Default for AllocationCallbacks {
    fn default() -> AllocationCallbacks {
        AllocationCallbacks {
            pUserData : 0 as _,
            pfnAllocation : 0 as _,
            pfnReallocation : 0 as _,
            pfnFree : 0 as _,
            pfnInternalAllocation : 0 as _,
            pfnInternalFree : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFeatures {
    fn default() -> PhysicalDeviceFeatures {
        PhysicalDeviceFeatures {
            robustBufferAccess : 0 as _,
            fullDrawIndexUint32 : 0 as _,
            imageCubeArray : 0 as _,
            independentBlend : 0 as _,
            geometryShader : 0 as _,
            tessellationShader : 0 as _,
            sampleRateShading : 0 as _,
            dualSrcBlend : 0 as _,
            logicOp : 0 as _,
            multiDrawIndirect : 0 as _,
            drawIndirectFirstInstance : 0 as _,
            depthClamp : 0 as _,
            depthBiasClamp : 0 as _,
            fillModeNonSolid : 0 as _,
            depthBounds : 0 as _,
            wideLines : 0 as _,
            largePoints : 0 as _,
            alphaToOne : 0 as _,
            multiViewport : 0 as _,
            samplerAnisotropy : 0 as _,
            textureCompressionETC2 : 0 as _,
            textureCompressionASTC_LDR : 0 as _,
            textureCompressionBC : 0 as _,
            occlusionQueryPrecise : 0 as _,
            pipelineStatisticsQuery : 0 as _,
            vertexPipelineStoresAndAtomics : 0 as _,
            fragmentStoresAndAtomics : 0 as _,
            shaderTessellationAndGeometryPointSize : 0 as _,
            shaderImageGatherExtended : 0 as _,
            shaderStorageImageExtendedFormats : 0 as _,
            shaderStorageImageMultisample : 0 as _,
            shaderStorageImageReadWithoutFormat : 0 as _,
            shaderStorageImageWriteWithoutFormat : 0 as _,
            shaderUniformBufferArrayDynamicIndexing : 0 as _,
            shaderSampledImageArrayDynamicIndexing : 0 as _,
            shaderStorageBufferArrayDynamicIndexing : 0 as _,
            shaderStorageImageArrayDynamicIndexing : 0 as _,
            shaderClipDistance : 0 as _,
            shaderCullDistance : 0 as _,
            shaderFloat64 : 0 as _,
            shaderInt64 : 0 as _,
            shaderInt16 : 0 as _,
            shaderResourceResidency : 0 as _,
            shaderResourceMinLod : 0 as _,
            sparseBinding : 0 as _,
            sparseResidencyBuffer : 0 as _,
            sparseResidencyImage2D : 0 as _,
            sparseResidencyImage3D : 0 as _,
            sparseResidency2Samples : 0 as _,
            sparseResidency4Samples : 0 as _,
            sparseResidency8Samples : 0 as _,
            sparseResidency16Samples : 0 as _,
            sparseResidencyAliased : 0 as _,
            variableMultisampleRate : 0 as _,
            inheritedQueries : 0 as _,
        }
    }
}
impl ::std::default::Default for FormatProperties {
    fn default() -> FormatProperties {
        FormatProperties {
            linearTilingFeatures : Default::default(),
            optimalTilingFeatures : Default::default(),
            bufferFeatures : Default::default(),
        }
    }
}
impl ::std::default::Default for Extent3D {
    fn default() -> Extent3D {
        Extent3D {
            width : 0 as _,
            height : 0 as _,
            depth : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageFormatProperties {
    fn default() -> ImageFormatProperties {
        ImageFormatProperties {
            maxExtent : Default::default(),
            maxMipLevels : 0 as _,
            maxArrayLayers : 0 as _,
            sampleCounts : Default::default(),
            maxResourceSize : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceLimits {
    fn default() -> PhysicalDeviceLimits {
        PhysicalDeviceLimits {
            maxImageDimension1D : 0 as _,
            maxImageDimension2D : 0 as _,
            maxImageDimension3D : 0 as _,
            maxImageDimensionCube : 0 as _,
            maxImageArrayLayers : 0 as _,
            maxTexelBufferElements : 0 as _,
            maxUniformBufferRange : 0 as _,
            maxStorageBufferRange : 0 as _,
            maxPushConstantsSize : 0 as _,
            maxMemoryAllocationCount : 0 as _,
            maxSamplerAllocationCount : 0 as _,
            bufferImageGranularity : Default::default(),
            sparseAddressSpaceSize : Default::default(),
            maxBoundDescriptorSets : 0 as _,
            maxPerStageDescriptorSamplers : 0 as _,
            maxPerStageDescriptorUniformBuffers : 0 as _,
            maxPerStageDescriptorStorageBuffers : 0 as _,
            maxPerStageDescriptorSampledImages : 0 as _,
            maxPerStageDescriptorStorageImages : 0 as _,
            maxPerStageDescriptorInputAttachments : 0 as _,
            maxPerStageResources : 0 as _,
            maxDescriptorSetSamplers : 0 as _,
            maxDescriptorSetUniformBuffers : 0 as _,
            maxDescriptorSetUniformBuffersDynamic : 0 as _,
            maxDescriptorSetStorageBuffers : 0 as _,
            maxDescriptorSetStorageBuffersDynamic : 0 as _,
            maxDescriptorSetSampledImages : 0 as _,
            maxDescriptorSetStorageImages : 0 as _,
            maxDescriptorSetInputAttachments : 0 as _,
            maxVertexInputAttributes : 0 as _,
            maxVertexInputBindings : 0 as _,
            maxVertexInputAttributeOffset : 0 as _,
            maxVertexInputBindingStride : 0 as _,
            maxVertexOutputComponents : 0 as _,
            maxTessellationGenerationLevel : 0 as _,
            maxTessellationPatchSize : 0 as _,
            maxTessellationControlPerVertexInputComponents : 0 as _,
            maxTessellationControlPerVertexOutputComponents : 0 as _,
            maxTessellationControlPerPatchOutputComponents : 0 as _,
            maxTessellationControlTotalOutputComponents : 0 as _,
            maxTessellationEvaluationInputComponents : 0 as _,
            maxTessellationEvaluationOutputComponents : 0 as _,
            maxGeometryShaderInvocations : 0 as _,
            maxGeometryInputComponents : 0 as _,
            maxGeometryOutputComponents : 0 as _,
            maxGeometryOutputVertices : 0 as _,
            maxGeometryTotalOutputComponents : 0 as _,
            maxFragmentInputComponents : 0 as _,
            maxFragmentOutputAttachments : 0 as _,
            maxFragmentDualSrcAttachments : 0 as _,
            maxFragmentCombinedOutputResources : 0 as _,
            maxComputeSharedMemorySize : 0 as _,
            maxComputeWorkGroupCount : [Default::default();3],
            maxComputeWorkGroupInvocations : 0 as _,
            maxComputeWorkGroupSize : [Default::default();3],
            subPixelPrecisionBits : 0 as _,
            subTexelPrecisionBits : 0 as _,
            mipmapPrecisionBits : 0 as _,
            maxDrawIndexedIndexValue : 0 as _,
            maxDrawIndirectCount : 0 as _,
            maxSamplerLodBias : 0 as _,
            maxSamplerAnisotropy : 0 as _,
            maxViewports : 0 as _,
            maxViewportDimensions : [Default::default();2],
            viewportBoundsRange : [Default::default();2],
            viewportSubPixelBits : 0 as _,
            minMemoryMapAlignment : Default::default(),
            minTexelBufferOffsetAlignment : Default::default(),
            minUniformBufferOffsetAlignment : Default::default(),
            minStorageBufferOffsetAlignment : Default::default(),
            minTexelOffset : 0 as _,
            maxTexelOffset : 0 as _,
            minTexelGatherOffset : 0 as _,
            maxTexelGatherOffset : 0 as _,
            minInterpolationOffset : 0 as _,
            maxInterpolationOffset : 0 as _,
            subPixelInterpolationOffsetBits : 0 as _,
            maxFramebufferWidth : 0 as _,
            maxFramebufferHeight : 0 as _,
            maxFramebufferLayers : 0 as _,
            framebufferColorSampleCounts : Default::default(),
            framebufferDepthSampleCounts : Default::default(),
            framebufferStencilSampleCounts : Default::default(),
            framebufferNoAttachmentsSampleCounts : Default::default(),
            maxColorAttachments : 0 as _,
            sampledImageColorSampleCounts : Default::default(),
            sampledImageIntegerSampleCounts : Default::default(),
            sampledImageDepthSampleCounts : Default::default(),
            sampledImageStencilSampleCounts : Default::default(),
            storageImageSampleCounts : Default::default(),
            maxSampleMaskWords : 0 as _,
            timestampComputeAndGraphics : 0 as _,
            timestampPeriod : 0 as _,
            maxClipDistances : 0 as _,
            maxCullDistances : 0 as _,
            maxCombinedClipAndCullDistances : 0 as _,
            discreteQueuePriorities : 0 as _,
            pointSizeRange : [Default::default();2],
            lineWidthRange : [Default::default();2],
            pointSizeGranularity : 0 as _,
            lineWidthGranularity : 0 as _,
            strictLines : 0 as _,
            standardSampleLocations : 0 as _,
            optimalBufferCopyOffsetAlignment : Default::default(),
            optimalBufferCopyRowPitchAlignment : Default::default(),
            nonCoherentAtomSize : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSparseProperties {
    fn default() -> PhysicalDeviceSparseProperties {
        PhysicalDeviceSparseProperties {
            residencyStandard2DBlockShape : 0 as _,
            residencyStandard2DMultisampleBlockShape : 0 as _,
            residencyStandard3DBlockShape : 0 as _,
            residencyAlignedMipSize : 0 as _,
            residencyNonResidentStrict : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceProperties {
    fn default() -> PhysicalDeviceProperties {
        PhysicalDeviceProperties {
            apiVersion : 0 as _,
            driverVersion : 0 as _,
            vendorID : 0 as _,
            deviceID : 0 as _,
            deviceType : Default::default(),
            deviceName : [Default::default();MAX_PHYSICAL_DEVICE_NAME_SIZE],
            pipelineCacheUUID : [Default::default();UUID_SIZE],
            limits : Default::default(),
            sparseProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for QueueFamilyProperties {
    fn default() -> QueueFamilyProperties {
        QueueFamilyProperties {
            queueFlags : Default::default(),
            queueCount : 0 as _,
            timestampValidBits : 0 as _,
            minImageTransferGranularity : Default::default(),
        }
    }
}
impl ::std::default::Default for MemoryType {
    fn default() -> MemoryType {
        MemoryType {
            propertyFlags : Default::default(),
            heapIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryHeap {
    fn default() -> MemoryHeap {
        MemoryHeap {
            size : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMemoryProperties {
    fn default() -> PhysicalDeviceMemoryProperties {
        PhysicalDeviceMemoryProperties {
            memoryTypeCount : 0 as _,
            memoryTypes : [Default::default();MAX_MEMORY_TYPES],
            memoryHeapCount : 0 as _,
            memoryHeaps : [Default::default();MAX_MEMORY_HEAPS],
        }
    }
}
impl ::std::default::Default for DeviceQueueCreateInfo {
    fn default() -> DeviceQueueCreateInfo {
        DeviceQueueCreateInfo {
            sType : STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            queueFamilyIndex : 0 as _,
            queueCount : 0 as _,
            pQueuePriorities : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceCreateInfo {
    fn default() -> DeviceCreateInfo {
        DeviceCreateInfo {
            sType : STRUCTURE_TYPE_DEVICE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            queueCreateInfoCount : 0 as _,
            pQueueCreateInfos : 0 as _,
            enabledLayerCount : 0 as _,
            ppEnabledLayerNames : 0 as _,
            enabledExtensionCount : 0 as _,
            ppEnabledExtensionNames : 0 as _,
            pEnabledFeatures : 0 as _,
        }
    }
}
impl ::std::default::Default for ExtensionProperties {
    fn default() -> ExtensionProperties {
        ExtensionProperties {
            extensionName : [Default::default();MAX_EXTENSION_NAME_SIZE],
            specVersion : 0 as _,
        }
    }
}
impl ::std::default::Default for LayerProperties {
    fn default() -> LayerProperties {
        LayerProperties {
            layerName : [Default::default();MAX_EXTENSION_NAME_SIZE],
            specVersion : 0 as _,
            implementationVersion : 0 as _,
            description : [Default::default();MAX_DESCRIPTION_SIZE],
        }
    }
}
impl ::std::default::Default for SubmitInfo {
    fn default() -> SubmitInfo {
        SubmitInfo {
            sType : STRUCTURE_TYPE_SUBMIT_INFO,
            pNext : 0 as _,
            waitSemaphoreCount : 0 as _,
            pWaitSemaphores : 0 as _,
            pWaitDstStageMask : 0 as _,
            commandBufferCount : 0 as _,
            pCommandBuffers : 0 as _,
            signalSemaphoreCount : 0 as _,
            pSignalSemaphores : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryAllocateInfo {
    fn default() -> MemoryAllocateInfo {
        MemoryAllocateInfo {
            sType : STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
            pNext : 0 as _,
            allocationSize : Default::default(),
            memoryTypeIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for MappedMemoryRange {
    fn default() -> MappedMemoryRange {
        MappedMemoryRange {
            sType : STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
            pNext : 0 as _,
            memory : Default::default(),
            offset : Default::default(),
            size : Default::default(),
        }
    }
}
impl ::std::default::Default for MemoryRequirements {
    fn default() -> MemoryRequirements {
        MemoryRequirements {
            size : Default::default(),
            alignment : Default::default(),
            memoryTypeBits : 0 as _,
        }
    }
}
impl ::std::default::Default for SparseImageFormatProperties {
    fn default() -> SparseImageFormatProperties {
        SparseImageFormatProperties {
            aspectMask : Default::default(),
            imageGranularity : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for SparseImageMemoryRequirements {
    fn default() -> SparseImageMemoryRequirements {
        SparseImageMemoryRequirements {
            formatProperties : Default::default(),
            imageMipTailFirstLod : 0 as _,
            imageMipTailSize : Default::default(),
            imageMipTailOffset : Default::default(),
            imageMipTailStride : Default::default(),
        }
    }
}
impl ::std::default::Default for SparseMemoryBind {
    fn default() -> SparseMemoryBind {
        SparseMemoryBind {
            resourceOffset : Default::default(),
            size : Default::default(),
            memory : Default::default(),
            memoryOffset : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for SparseBufferMemoryBindInfo {
    fn default() -> SparseBufferMemoryBindInfo {
        SparseBufferMemoryBindInfo {
            buffer : Default::default(),
            bindCount : 0 as _,
            pBinds : 0 as _,
        }
    }
}
impl ::std::default::Default for SparseImageOpaqueMemoryBindInfo {
    fn default() -> SparseImageOpaqueMemoryBindInfo {
        SparseImageOpaqueMemoryBindInfo {
            image : Default::default(),
            bindCount : 0 as _,
            pBinds : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageSubresource {
    fn default() -> ImageSubresource {
        ImageSubresource {
            aspectMask : Default::default(),
            mipLevel : 0 as _,
            arrayLayer : 0 as _,
        }
    }
}
impl ::std::default::Default for Offset3D {
    fn default() -> Offset3D {
        Offset3D {
            x : 0 as _,
            y : 0 as _,
            z : 0 as _,
        }
    }
}
impl ::std::default::Default for SparseImageMemoryBind {
    fn default() -> SparseImageMemoryBind {
        SparseImageMemoryBind {
            subresource : Default::default(),
            offset : Default::default(),
            extent : Default::default(),
            memory : Default::default(),
            memoryOffset : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for SparseImageMemoryBindInfo {
    fn default() -> SparseImageMemoryBindInfo {
        SparseImageMemoryBindInfo {
            image : Default::default(),
            bindCount : 0 as _,
            pBinds : 0 as _,
        }
    }
}
impl ::std::default::Default for BindSparseInfo {
    fn default() -> BindSparseInfo {
        BindSparseInfo {
            sType : STRUCTURE_TYPE_BIND_SPARSE_INFO,
            pNext : 0 as _,
            waitSemaphoreCount : 0 as _,
            pWaitSemaphores : 0 as _,
            bufferBindCount : 0 as _,
            pBufferBinds : 0 as _,
            imageOpaqueBindCount : 0 as _,
            pImageOpaqueBinds : 0 as _,
            imageBindCount : 0 as _,
            pImageBinds : 0 as _,
            signalSemaphoreCount : 0 as _,
            pSignalSemaphores : 0 as _,
        }
    }
}
impl ::std::default::Default for FenceCreateInfo {
    fn default() -> FenceCreateInfo {
        FenceCreateInfo {
            sType : STRUCTURE_TYPE_FENCE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for SemaphoreCreateInfo {
    fn default() -> SemaphoreCreateInfo {
        SemaphoreCreateInfo {
            sType : STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for EventCreateInfo {
    fn default() -> EventCreateInfo {
        EventCreateInfo {
            sType : STRUCTURE_TYPE_EVENT_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for QueryPoolCreateInfo {
    fn default() -> QueryPoolCreateInfo {
        QueryPoolCreateInfo {
            sType : STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            queryType : Default::default(),
            queryCount : 0 as _,
            pipelineStatistics : Default::default(),
        }
    }
}
impl ::std::default::Default for BufferCreateInfo {
    fn default() -> BufferCreateInfo {
        BufferCreateInfo {
            sType : STRUCTURE_TYPE_BUFFER_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            size : Default::default(),
            usage : Default::default(),
            sharingMode : Default::default(),
            queueFamilyIndexCount : 0 as _,
            pQueueFamilyIndices : 0 as _,
        }
    }
}
impl ::std::default::Default for BufferViewCreateInfo {
    fn default() -> BufferViewCreateInfo {
        BufferViewCreateInfo {
            sType : STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            buffer : Default::default(),
            format : Default::default(),
            offset : Default::default(),
            range : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageCreateInfo {
    fn default() -> ImageCreateInfo {
        ImageCreateInfo {
            sType : STRUCTURE_TYPE_IMAGE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            imageType : Default::default(),
            format : Default::default(),
            extent : Default::default(),
            mipLevels : 0 as _,
            arrayLayers : 0 as _,
            samples : Default::default(),
            tiling : Default::default(),
            usage : Default::default(),
            sharingMode : Default::default(),
            queueFamilyIndexCount : 0 as _,
            pQueueFamilyIndices : 0 as _,
            initialLayout : Default::default(),
        }
    }
}
impl ::std::default::Default for SubresourceLayout {
    fn default() -> SubresourceLayout {
        SubresourceLayout {
            offset : Default::default(),
            size : Default::default(),
            rowPitch : Default::default(),
            arrayPitch : Default::default(),
            depthPitch : Default::default(),
        }
    }
}
impl ::std::default::Default for ComponentMapping {
    fn default() -> ComponentMapping {
        ComponentMapping {
            r : Default::default(),
            g : Default::default(),
            b : Default::default(),
            a : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageSubresourceRange {
    fn default() -> ImageSubresourceRange {
        ImageSubresourceRange {
            aspectMask : Default::default(),
            baseMipLevel : 0 as _,
            levelCount : 0 as _,
            baseArrayLayer : 0 as _,
            layerCount : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageViewCreateInfo {
    fn default() -> ImageViewCreateInfo {
        ImageViewCreateInfo {
            sType : STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            image : Default::default(),
            viewType : Default::default(),
            format : Default::default(),
            components : Default::default(),
            subresourceRange : Default::default(),
        }
    }
}
impl ::std::default::Default for ShaderModuleCreateInfo {
    fn default() -> ShaderModuleCreateInfo {
        ShaderModuleCreateInfo {
            sType : STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            codeSize : Default::default(),
            pCode : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineCacheCreateInfo {
    fn default() -> PipelineCacheCreateInfo {
        PipelineCacheCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            initialDataSize : Default::default(),
            pInitialData : 0 as _,
        }
    }
}
impl ::std::default::Default for SpecializationMapEntry {
    fn default() -> SpecializationMapEntry {
        SpecializationMapEntry {
            constantID : 0 as _,
            offset : 0 as _,
            size : Default::default(),
        }
    }
}
impl ::std::default::Default for SpecializationInfo {
    fn default() -> SpecializationInfo {
        SpecializationInfo {
            mapEntryCount : 0 as _,
            pMapEntries : 0 as _,
            dataSize : Default::default(),
            pData : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineShaderStageCreateInfo {
    fn default() -> PipelineShaderStageCreateInfo {
        PipelineShaderStageCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            stage : Default::default(),
            module : Default::default(),
            pName : 0 as _,
            pSpecializationInfo : 0 as _,
        }
    }
}
impl ::std::default::Default for VertexInputBindingDescription {
    fn default() -> VertexInputBindingDescription {
        VertexInputBindingDescription {
            binding : 0 as _,
            stride : 0 as _,
            inputRate : Default::default(),
        }
    }
}
impl ::std::default::Default for VertexInputAttributeDescription {
    fn default() -> VertexInputAttributeDescription {
        VertexInputAttributeDescription {
            location : 0 as _,
            binding : 0 as _,
            format : Default::default(),
            offset : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineVertexInputStateCreateInfo {
    fn default() -> PipelineVertexInputStateCreateInfo {
        PipelineVertexInputStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            vertexBindingDescriptionCount : 0 as _,
            pVertexBindingDescriptions : 0 as _,
            vertexAttributeDescriptionCount : 0 as _,
            pVertexAttributeDescriptions : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineInputAssemblyStateCreateInfo {
    fn default() -> PipelineInputAssemblyStateCreateInfo {
        PipelineInputAssemblyStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            topology : Default::default(),
            primitiveRestartEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineTessellationStateCreateInfo {
    fn default() -> PipelineTessellationStateCreateInfo {
        PipelineTessellationStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            patchControlPoints : 0 as _,
        }
    }
}
impl ::std::default::Default for Viewport {
    fn default() -> Viewport {
        Viewport {
            x : 0 as _,
            y : 0 as _,
            width : 0 as _,
            height : 0 as _,
            minDepth : 0 as _,
            maxDepth : 0 as _,
        }
    }
}
impl ::std::default::Default for Offset2D {
    fn default() -> Offset2D {
        Offset2D {
            x : 0 as _,
            y : 0 as _,
        }
    }
}
impl ::std::default::Default for Extent2D {
    fn default() -> Extent2D {
        Extent2D {
            width : 0 as _,
            height : 0 as _,
        }
    }
}
impl ::std::default::Default for Rect2D {
    fn default() -> Rect2D {
        Rect2D {
            offset : Default::default(),
            extent : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineViewportStateCreateInfo {
    fn default() -> PipelineViewportStateCreateInfo {
        PipelineViewportStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            viewportCount : 0 as _,
            pViewports : 0 as _,
            scissorCount : 0 as _,
            pScissors : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRasterizationStateCreateInfo {
    fn default() -> PipelineRasterizationStateCreateInfo {
        PipelineRasterizationStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            depthClampEnable : 0 as _,
            rasterizerDiscardEnable : 0 as _,
            polygonMode : Default::default(),
            cullMode : Default::default(),
            frontFace : Default::default(),
            depthBiasEnable : 0 as _,
            depthBiasConstantFactor : 0 as _,
            depthBiasClamp : 0 as _,
            depthBiasSlopeFactor : 0 as _,
            lineWidth : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineMultisampleStateCreateInfo {
    fn default() -> PipelineMultisampleStateCreateInfo {
        PipelineMultisampleStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            rasterizationSamples : Default::default(),
            sampleShadingEnable : 0 as _,
            minSampleShading : 0 as _,
            pSampleMask : 0 as _,
            alphaToCoverageEnable : 0 as _,
            alphaToOneEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for StencilOpState {
    fn default() -> StencilOpState {
        StencilOpState {
            failOp : Default::default(),
            passOp : Default::default(),
            depthFailOp : Default::default(),
            compareOp : Default::default(),
            compareMask : 0 as _,
            writeMask : 0 as _,
            reference : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineDepthStencilStateCreateInfo {
    fn default() -> PipelineDepthStencilStateCreateInfo {
        PipelineDepthStencilStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            depthTestEnable : 0 as _,
            depthWriteEnable : 0 as _,
            depthCompareOp : Default::default(),
            depthBoundsTestEnable : 0 as _,
            stencilTestEnable : 0 as _,
            front : Default::default(),
            back : Default::default(),
            minDepthBounds : 0 as _,
            maxDepthBounds : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineColorBlendAttachmentState {
    fn default() -> PipelineColorBlendAttachmentState {
        PipelineColorBlendAttachmentState {
            blendEnable : 0 as _,
            srcColorBlendFactor : Default::default(),
            dstColorBlendFactor : Default::default(),
            colorBlendOp : Default::default(),
            srcAlphaBlendFactor : Default::default(),
            dstAlphaBlendFactor : Default::default(),
            alphaBlendOp : Default::default(),
            colorWriteMask : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineColorBlendStateCreateInfo {
    fn default() -> PipelineColorBlendStateCreateInfo {
        PipelineColorBlendStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            logicOpEnable : 0 as _,
            logicOp : Default::default(),
            attachmentCount : 0 as _,
            pAttachments : 0 as _,
            blendConstants : [Default::default();4],
        }
    }
}
impl ::std::default::Default for PipelineDynamicStateCreateInfo {
    fn default() -> PipelineDynamicStateCreateInfo {
        PipelineDynamicStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            dynamicStateCount : 0 as _,
            pDynamicStates : 0 as _,
        }
    }
}
impl ::std::default::Default for GraphicsPipelineCreateInfo {
    fn default() -> GraphicsPipelineCreateInfo {
        GraphicsPipelineCreateInfo {
            sType : STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            stageCount : 0 as _,
            pStages : 0 as _,
            pVertexInputState : 0 as _,
            pInputAssemblyState : 0 as _,
            pTessellationState : 0 as _,
            pViewportState : 0 as _,
            pRasterizationState : 0 as _,
            pMultisampleState : 0 as _,
            pDepthStencilState : 0 as _,
            pColorBlendState : 0 as _,
            pDynamicState : 0 as _,
            layout : Default::default(),
            renderPass : Default::default(),
            subpass : 0 as _,
            basePipelineHandle : Default::default(),
            basePipelineIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for ComputePipelineCreateInfo {
    fn default() -> ComputePipelineCreateInfo {
        ComputePipelineCreateInfo {
            sType : STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            stage : Default::default(),
            layout : Default::default(),
            basePipelineHandle : Default::default(),
            basePipelineIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for PushConstantRange {
    fn default() -> PushConstantRange {
        PushConstantRange {
            stageFlags : Default::default(),
            offset : 0 as _,
            size : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineLayoutCreateInfo {
    fn default() -> PipelineLayoutCreateInfo {
        PipelineLayoutCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            setLayoutCount : 0 as _,
            pSetLayouts : 0 as _,
            pushConstantRangeCount : 0 as _,
            pPushConstantRanges : 0 as _,
        }
    }
}
impl ::std::default::Default for SamplerCreateInfo {
    fn default() -> SamplerCreateInfo {
        SamplerCreateInfo {
            sType : STRUCTURE_TYPE_SAMPLER_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            magFilter : Default::default(),
            minFilter : Default::default(),
            mipmapMode : Default::default(),
            addressModeU : Default::default(),
            addressModeV : Default::default(),
            addressModeW : Default::default(),
            mipLodBias : 0 as _,
            anisotropyEnable : 0 as _,
            maxAnisotropy : 0 as _,
            compareEnable : 0 as _,
            compareOp : Default::default(),
            minLod : 0 as _,
            maxLod : 0 as _,
            borderColor : Default::default(),
            unnormalizedCoordinates : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorSetLayoutBinding {
    fn default() -> DescriptorSetLayoutBinding {
        DescriptorSetLayoutBinding {
            binding : 0 as _,
            descriptorType : Default::default(),
            descriptorCount : 0 as _,
            stageFlags : Default::default(),
            pImmutableSamplers : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorSetLayoutCreateInfo {
    fn default() -> DescriptorSetLayoutCreateInfo {
        DescriptorSetLayoutCreateInfo {
            sType : STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            bindingCount : 0 as _,
            pBindings : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorPoolSize {
    fn default() -> DescriptorPoolSize {
        DescriptorPoolSize {
            r#type : Default::default(),
            descriptorCount : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorPoolCreateInfo {
    fn default() -> DescriptorPoolCreateInfo {
        DescriptorPoolCreateInfo {
            sType : STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            maxSets : 0 as _,
            poolSizeCount : 0 as _,
            pPoolSizes : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorSetAllocateInfo {
    fn default() -> DescriptorSetAllocateInfo {
        DescriptorSetAllocateInfo {
            sType : STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
            pNext : 0 as _,
            descriptorPool : Default::default(),
            descriptorSetCount : 0 as _,
            pSetLayouts : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorImageInfo {
    fn default() -> DescriptorImageInfo {
        DescriptorImageInfo {
            sampler : Default::default(),
            imageView : Default::default(),
            imageLayout : Default::default(),
        }
    }
}
impl ::std::default::Default for DescriptorBufferInfo {
    fn default() -> DescriptorBufferInfo {
        DescriptorBufferInfo {
            buffer : Default::default(),
            offset : Default::default(),
            range : Default::default(),
        }
    }
}
impl ::std::default::Default for WriteDescriptorSet {
    fn default() -> WriteDescriptorSet {
        WriteDescriptorSet {
            sType : STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
            pNext : 0 as _,
            dstSet : Default::default(),
            dstBinding : 0 as _,
            dstArrayElement : 0 as _,
            descriptorCount : 0 as _,
            descriptorType : Default::default(),
            pImageInfo : 0 as _,
            pBufferInfo : 0 as _,
            pTexelBufferView : 0 as _,
        }
    }
}
impl ::std::default::Default for CopyDescriptorSet {
    fn default() -> CopyDescriptorSet {
        CopyDescriptorSet {
            sType : STRUCTURE_TYPE_COPY_DESCRIPTOR_SET,
            pNext : 0 as _,
            srcSet : Default::default(),
            srcBinding : 0 as _,
            srcArrayElement : 0 as _,
            dstSet : Default::default(),
            dstBinding : 0 as _,
            dstArrayElement : 0 as _,
            descriptorCount : 0 as _,
        }
    }
}
impl ::std::default::Default for FramebufferCreateInfo {
    fn default() -> FramebufferCreateInfo {
        FramebufferCreateInfo {
            sType : STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            renderPass : Default::default(),
            attachmentCount : 0 as _,
            pAttachments : 0 as _,
            width : 0 as _,
            height : 0 as _,
            layers : 0 as _,
        }
    }
}
impl ::std::default::Default for AttachmentDescription {
    fn default() -> AttachmentDescription {
        AttachmentDescription {
            flags : Default::default(),
            format : Default::default(),
            samples : Default::default(),
            loadOp : Default::default(),
            storeOp : Default::default(),
            stencilLoadOp : Default::default(),
            stencilStoreOp : Default::default(),
            initialLayout : Default::default(),
            finalLayout : Default::default(),
        }
    }
}
impl ::std::default::Default for AttachmentReference {
    fn default() -> AttachmentReference {
        AttachmentReference {
            attachment : 0 as _,
            layout : Default::default(),
        }
    }
}
impl ::std::default::Default for SubpassDescription {
    fn default() -> SubpassDescription {
        SubpassDescription {
            flags : Default::default(),
            pipelineBindPoint : Default::default(),
            inputAttachmentCount : 0 as _,
            pInputAttachments : 0 as _,
            colorAttachmentCount : 0 as _,
            pColorAttachments : 0 as _,
            pResolveAttachments : 0 as _,
            pDepthStencilAttachment : 0 as _,
            preserveAttachmentCount : 0 as _,
            pPreserveAttachments : 0 as _,
        }
    }
}
impl ::std::default::Default for SubpassDependency {
    fn default() -> SubpassDependency {
        SubpassDependency {
            srcSubpass : 0 as _,
            dstSubpass : 0 as _,
            srcStageMask : Default::default(),
            dstStageMask : Default::default(),
            srcAccessMask : Default::default(),
            dstAccessMask : Default::default(),
            dependencyFlags : Default::default(),
        }
    }
}
impl ::std::default::Default for RenderPassCreateInfo {
    fn default() -> RenderPassCreateInfo {
        RenderPassCreateInfo {
            sType : STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            attachmentCount : 0 as _,
            pAttachments : 0 as _,
            subpassCount : 0 as _,
            pSubpasses : 0 as _,
            dependencyCount : 0 as _,
            pDependencies : 0 as _,
        }
    }
}
impl ::std::default::Default for CommandPoolCreateInfo {
    fn default() -> CommandPoolCreateInfo {
        CommandPoolCreateInfo {
            sType : STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            queueFamilyIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for CommandBufferAllocateInfo {
    fn default() -> CommandBufferAllocateInfo {
        CommandBufferAllocateInfo {
            sType : STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
            pNext : 0 as _,
            commandPool : Default::default(),
            level : Default::default(),
            commandBufferCount : 0 as _,
        }
    }
}
impl ::std::default::Default for CommandBufferInheritanceInfo {
    fn default() -> CommandBufferInheritanceInfo {
        CommandBufferInheritanceInfo {
            sType : STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,
            pNext : 0 as _,
            renderPass : Default::default(),
            subpass : 0 as _,
            framebuffer : Default::default(),
            occlusionQueryEnable : 0 as _,
            queryFlags : Default::default(),
            pipelineStatistics : Default::default(),
        }
    }
}
impl ::std::default::Default for CommandBufferBeginInfo {
    fn default() -> CommandBufferBeginInfo {
        CommandBufferBeginInfo {
            sType : STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            pInheritanceInfo : 0 as _,
        }
    }
}
impl ::std::default::Default for BufferCopy {
    fn default() -> BufferCopy {
        BufferCopy {
            srcOffset : Default::default(),
            dstOffset : Default::default(),
            size : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageSubresourceLayers {
    fn default() -> ImageSubresourceLayers {
        ImageSubresourceLayers {
            aspectMask : Default::default(),
            mipLevel : 0 as _,
            baseArrayLayer : 0 as _,
            layerCount : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageCopy {
    fn default() -> ImageCopy {
        ImageCopy {
            srcSubresource : Default::default(),
            srcOffset : Default::default(),
            dstSubresource : Default::default(),
            dstOffset : Default::default(),
            extent : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageBlit {
    fn default() -> ImageBlit {
        ImageBlit {
            srcSubresource : Default::default(),
            srcOffsets : [Default::default();2],
            dstSubresource : Default::default(),
            dstOffsets : [Default::default();2],
        }
    }
}
impl ::std::default::Default for BufferImageCopy {
    fn default() -> BufferImageCopy {
        BufferImageCopy {
            bufferOffset : Default::default(),
            bufferRowLength : 0 as _,
            bufferImageHeight : 0 as _,
            imageSubresource : Default::default(),
            imageOffset : Default::default(),
            imageExtent : Default::default(),
        }
    }
}
impl ::std::default::Default for ClearDepthStencilValue {
    fn default() -> ClearDepthStencilValue {
        ClearDepthStencilValue {
            depth : 0 as _,
            stencil : 0 as _,
        }
    }
}
impl ::std::default::Default for ClearAttachment {
    fn default() -> ClearAttachment {
        ClearAttachment {
            aspectMask : Default::default(),
            colorAttachment : 0 as _,
            clearValue : Default::default(),
        }
    }
}
impl ::std::default::Default for ClearRect {
    fn default() -> ClearRect {
        ClearRect {
            rect : Default::default(),
            baseArrayLayer : 0 as _,
            layerCount : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageResolve {
    fn default() -> ImageResolve {
        ImageResolve {
            srcSubresource : Default::default(),
            srcOffset : Default::default(),
            dstSubresource : Default::default(),
            dstOffset : Default::default(),
            extent : Default::default(),
        }
    }
}
impl ::std::default::Default for MemoryBarrier {
    fn default() -> MemoryBarrier {
        MemoryBarrier {
            sType : STRUCTURE_TYPE_MEMORY_BARRIER,
            pNext : 0 as _,
            srcAccessMask : Default::default(),
            dstAccessMask : Default::default(),
        }
    }
}
impl ::std::default::Default for BufferMemoryBarrier {
    fn default() -> BufferMemoryBarrier {
        BufferMemoryBarrier {
            sType : STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,
            pNext : 0 as _,
            srcAccessMask : Default::default(),
            dstAccessMask : Default::default(),
            srcQueueFamilyIndex : 0 as _,
            dstQueueFamilyIndex : 0 as _,
            buffer : Default::default(),
            offset : Default::default(),
            size : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageMemoryBarrier {
    fn default() -> ImageMemoryBarrier {
        ImageMemoryBarrier {
            sType : STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,
            pNext : 0 as _,
            srcAccessMask : Default::default(),
            dstAccessMask : Default::default(),
            oldLayout : Default::default(),
            newLayout : Default::default(),
            srcQueueFamilyIndex : 0 as _,
            dstQueueFamilyIndex : 0 as _,
            image : Default::default(),
            subresourceRange : Default::default(),
        }
    }
}
impl ::std::default::Default for RenderPassBeginInfo {
    fn default() -> RenderPassBeginInfo {
        RenderPassBeginInfo {
            sType : STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
            pNext : 0 as _,
            renderPass : Default::default(),
            framebuffer : Default::default(),
            renderArea : Default::default(),
            clearValueCount : 0 as _,
            pClearValues : 0 as _,
        }
    }
}
impl ::std::default::Default for DispatchIndirectCommand {
    fn default() -> DispatchIndirectCommand {
        DispatchIndirectCommand {
            x : 0 as _,
            y : 0 as _,
            z : 0 as _,
        }
    }
}
impl ::std::default::Default for DrawIndexedIndirectCommand {
    fn default() -> DrawIndexedIndirectCommand {
        DrawIndexedIndirectCommand {
            indexCount : 0 as _,
            instanceCount : 0 as _,
            firstIndex : 0 as _,
            vertexOffset : 0 as _,
            firstInstance : 0 as _,
        }
    }
}
impl ::std::default::Default for DrawIndirectCommand {
    fn default() -> DrawIndirectCommand {
        DrawIndirectCommand {
            vertexCount : 0 as _,
            instanceCount : 0 as _,
            firstVertex : 0 as _,
            firstInstance : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSubgroupProperties {
    fn default() -> PhysicalDeviceSubgroupProperties {
        PhysicalDeviceSubgroupProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES,
            pNext : 0 as _,
            subgroupSize : 0 as _,
            supportedStages : Default::default(),
            supportedOperations : Default::default(),
            quadOperationsInAllStages : 0 as _,
        }
    }
}
impl ::std::default::Default for BindBufferMemoryInfo {
    fn default() -> BindBufferMemoryInfo {
        BindBufferMemoryInfo {
            sType : STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
            pNext : 0 as _,
            buffer : Default::default(),
            memory : Default::default(),
            memoryOffset : Default::default(),
        }
    }
}
impl ::std::default::Default for BindImageMemoryInfo {
    fn default() -> BindImageMemoryInfo {
        BindImageMemoryInfo {
            sType : STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
            pNext : 0 as _,
            image : Default::default(),
            memory : Default::default(),
            memoryOffset : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDevice16BitStorageFeatures {
    fn default() -> PhysicalDevice16BitStorageFeatures {
        PhysicalDevice16BitStorageFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
            pNext : 0 as _,
            storageBuffer16BitAccess : 0 as _,
            uniformAndStorageBuffer16BitAccess : 0 as _,
            storagePushConstant16 : 0 as _,
            storageInputOutput16 : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryDedicatedRequirements {
    fn default() -> MemoryDedicatedRequirements {
        MemoryDedicatedRequirements {
            sType : STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
            pNext : 0 as _,
            prefersDedicatedAllocation : 0 as _,
            requiresDedicatedAllocation : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryDedicatedAllocateInfo {
    fn default() -> MemoryDedicatedAllocateInfo {
        MemoryDedicatedAllocateInfo {
            sType : STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
            pNext : 0 as _,
            image : Default::default(),
            buffer : Default::default(),
        }
    }
}
impl ::std::default::Default for MemoryAllocateFlagsInfo {
    fn default() -> MemoryAllocateFlagsInfo {
        MemoryAllocateFlagsInfo {
            sType : STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            deviceMask : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceGroupRenderPassBeginInfo {
    fn default() -> DeviceGroupRenderPassBeginInfo {
        DeviceGroupRenderPassBeginInfo {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
            pNext : 0 as _,
            deviceMask : 0 as _,
            deviceRenderAreaCount : 0 as _,
            pDeviceRenderAreas : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceGroupCommandBufferBeginInfo {
    fn default() -> DeviceGroupCommandBufferBeginInfo {
        DeviceGroupCommandBufferBeginInfo {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
            pNext : 0 as _,
            deviceMask : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceGroupSubmitInfo {
    fn default() -> DeviceGroupSubmitInfo {
        DeviceGroupSubmitInfo {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
            pNext : 0 as _,
            waitSemaphoreCount : 0 as _,
            pWaitSemaphoreDeviceIndices : 0 as _,
            commandBufferCount : 0 as _,
            pCommandBufferDeviceMasks : 0 as _,
            signalSemaphoreCount : 0 as _,
            pSignalSemaphoreDeviceIndices : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceGroupBindSparseInfo {
    fn default() -> DeviceGroupBindSparseInfo {
        DeviceGroupBindSparseInfo {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
            pNext : 0 as _,
            resourceDeviceIndex : 0 as _,
            memoryDeviceIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for BindBufferMemoryDeviceGroupInfo {
    fn default() -> BindBufferMemoryDeviceGroupInfo {
        BindBufferMemoryDeviceGroupInfo {
            sType : STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
            pNext : 0 as _,
            deviceIndexCount : 0 as _,
            pDeviceIndices : 0 as _,
        }
    }
}
impl ::std::default::Default for BindImageMemoryDeviceGroupInfo {
    fn default() -> BindImageMemoryDeviceGroupInfo {
        BindImageMemoryDeviceGroupInfo {
            sType : STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
            pNext : 0 as _,
            deviceIndexCount : 0 as _,
            pDeviceIndices : 0 as _,
            splitInstanceBindRegionCount : 0 as _,
            pSplitInstanceBindRegions : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceGroupProperties {
    fn default() -> PhysicalDeviceGroupProperties {
        PhysicalDeviceGroupProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
            pNext : 0 as _,
            physicalDeviceCount : 0 as _,
            physicalDevices : [Default::default();MAX_DEVICE_GROUP_SIZE],
            subsetAllocation : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceGroupDeviceCreateInfo {
    fn default() -> DeviceGroupDeviceCreateInfo {
        DeviceGroupDeviceCreateInfo {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
            pNext : 0 as _,
            physicalDeviceCount : 0 as _,
            pPhysicalDevices : 0 as _,
        }
    }
}
impl ::std::default::Default for BufferMemoryRequirementsInfo2 {
    fn default() -> BufferMemoryRequirementsInfo2 {
        BufferMemoryRequirementsInfo2 {
            sType : STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
            pNext : 0 as _,
            buffer : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageMemoryRequirementsInfo2 {
    fn default() -> ImageMemoryRequirementsInfo2 {
        ImageMemoryRequirementsInfo2 {
            sType : STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
            pNext : 0 as _,
            image : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageSparseMemoryRequirementsInfo2 {
    fn default() -> ImageSparseMemoryRequirementsInfo2 {
        ImageSparseMemoryRequirementsInfo2 {
            sType : STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
            pNext : 0 as _,
            image : Default::default(),
        }
    }
}
impl ::std::default::Default for MemoryRequirements2 {
    fn default() -> MemoryRequirements2 {
        MemoryRequirements2 {
            sType : STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
            pNext : 0 as _,
            memoryRequirements : Default::default(),
        }
    }
}
impl ::std::default::Default for SparseImageMemoryRequirements2 {
    fn default() -> SparseImageMemoryRequirements2 {
        SparseImageMemoryRequirements2 {
            sType : STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
            pNext : 0 as _,
            memoryRequirements : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFeatures2 {
    fn default() -> PhysicalDeviceFeatures2 {
        PhysicalDeviceFeatures2 {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
            pNext : 0 as _,
            features : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceProperties2 {
    fn default() -> PhysicalDeviceProperties2 {
        PhysicalDeviceProperties2 {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
            pNext : 0 as _,
            properties : Default::default(),
        }
    }
}
impl ::std::default::Default for FormatProperties2 {
    fn default() -> FormatProperties2 {
        FormatProperties2 {
            sType : STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
            pNext : 0 as _,
            formatProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageFormatProperties2 {
    fn default() -> ImageFormatProperties2 {
        ImageFormatProperties2 {
            sType : STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
            pNext : 0 as _,
            imageFormatProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceImageFormatInfo2 {
    fn default() -> PhysicalDeviceImageFormatInfo2 {
        PhysicalDeviceImageFormatInfo2 {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
            pNext : 0 as _,
            format : Default::default(),
            r#type : Default::default(),
            tiling : Default::default(),
            usage : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for QueueFamilyProperties2 {
    fn default() -> QueueFamilyProperties2 {
        QueueFamilyProperties2 {
            sType : STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
            pNext : 0 as _,
            queueFamilyProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMemoryProperties2 {
    fn default() -> PhysicalDeviceMemoryProperties2 {
        PhysicalDeviceMemoryProperties2 {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
            pNext : 0 as _,
            memoryProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for SparseImageFormatProperties2 {
    fn default() -> SparseImageFormatProperties2 {
        SparseImageFormatProperties2 {
            sType : STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
            pNext : 0 as _,
            properties : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSparseImageFormatInfo2 {
    fn default() -> PhysicalDeviceSparseImageFormatInfo2 {
        PhysicalDeviceSparseImageFormatInfo2 {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
            pNext : 0 as _,
            format : Default::default(),
            r#type : Default::default(),
            samples : Default::default(),
            usage : Default::default(),
            tiling : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDevicePointClippingProperties {
    fn default() -> PhysicalDevicePointClippingProperties {
        PhysicalDevicePointClippingProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
            pNext : 0 as _,
            pointClippingBehavior : Default::default(),
        }
    }
}
impl ::std::default::Default for InputAttachmentAspectReference {
    fn default() -> InputAttachmentAspectReference {
        InputAttachmentAspectReference {
            subpass : 0 as _,
            inputAttachmentIndex : 0 as _,
            aspectMask : Default::default(),
        }
    }
}
impl ::std::default::Default for RenderPassInputAttachmentAspectCreateInfo {
    fn default() -> RenderPassInputAttachmentAspectCreateInfo {
        RenderPassInputAttachmentAspectCreateInfo {
            sType : STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
            pNext : 0 as _,
            aspectReferenceCount : 0 as _,
            pAspectReferences : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageViewUsageCreateInfo {
    fn default() -> ImageViewUsageCreateInfo {
        ImageViewUsageCreateInfo {
            sType : STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
            pNext : 0 as _,
            usage : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineTessellationDomainOriginStateCreateInfo {
    fn default() -> PipelineTessellationDomainOriginStateCreateInfo {
        PipelineTessellationDomainOriginStateCreateInfo {
            sType : STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
            pNext : 0 as _,
            domainOrigin : Default::default(),
        }
    }
}
impl ::std::default::Default for RenderPassMultiviewCreateInfo {
    fn default() -> RenderPassMultiviewCreateInfo {
        RenderPassMultiviewCreateInfo {
            sType : STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
            pNext : 0 as _,
            subpassCount : 0 as _,
            pViewMasks : 0 as _,
            dependencyCount : 0 as _,
            pViewOffsets : 0 as _,
            correlationMaskCount : 0 as _,
            pCorrelationMasks : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMultiviewFeatures {
    fn default() -> PhysicalDeviceMultiviewFeatures {
        PhysicalDeviceMultiviewFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
            pNext : 0 as _,
            multiview : 0 as _,
            multiviewGeometryShader : 0 as _,
            multiviewTessellationShader : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMultiviewProperties {
    fn default() -> PhysicalDeviceMultiviewProperties {
        PhysicalDeviceMultiviewProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
            pNext : 0 as _,
            maxMultiviewViewCount : 0 as _,
            maxMultiviewInstanceIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVariablePointersFeatures {
    fn default() -> PhysicalDeviceVariablePointersFeatures {
        PhysicalDeviceVariablePointersFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
            pNext : 0 as _,
            variablePointersStorageBuffer : 0 as _,
            variablePointers : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceProtectedMemoryFeatures {
    fn default() -> PhysicalDeviceProtectedMemoryFeatures {
        PhysicalDeviceProtectedMemoryFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES,
            pNext : 0 as _,
            protectedMemory : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceProtectedMemoryProperties {
    fn default() -> PhysicalDeviceProtectedMemoryProperties {
        PhysicalDeviceProtectedMemoryProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES,
            pNext : 0 as _,
            protectedNoFault : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceQueueInfo2 {
    fn default() -> DeviceQueueInfo2 {
        DeviceQueueInfo2 {
            sType : STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2,
            pNext : 0 as _,
            flags : Default::default(),
            queueFamilyIndex : 0 as _,
            queueIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for ProtectedSubmitInfo {
    fn default() -> ProtectedSubmitInfo {
        ProtectedSubmitInfo {
            sType : STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,
            pNext : 0 as _,
            protectedSubmit : 0 as _,
        }
    }
}
impl ::std::default::Default for SamplerYcbcrConversionCreateInfo {
    fn default() -> SamplerYcbcrConversionCreateInfo {
        SamplerYcbcrConversionCreateInfo {
            sType : STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
            pNext : 0 as _,
            format : Default::default(),
            ycbcrModel : Default::default(),
            ycbcrRange : Default::default(),
            components : Default::default(),
            xChromaOffset : Default::default(),
            yChromaOffset : Default::default(),
            chromaFilter : Default::default(),
            forceExplicitReconstruction : 0 as _,
        }
    }
}
impl ::std::default::Default for SamplerYcbcrConversionInfo {
    fn default() -> SamplerYcbcrConversionInfo {
        SamplerYcbcrConversionInfo {
            sType : STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
            pNext : 0 as _,
            conversion : Default::default(),
        }
    }
}
impl ::std::default::Default for BindImagePlaneMemoryInfo {
    fn default() -> BindImagePlaneMemoryInfo {
        BindImagePlaneMemoryInfo {
            sType : STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
            pNext : 0 as _,
            planeAspect : Default::default(),
        }
    }
}
impl ::std::default::Default for ImagePlaneMemoryRequirementsInfo {
    fn default() -> ImagePlaneMemoryRequirementsInfo {
        ImagePlaneMemoryRequirementsInfo {
            sType : STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
            pNext : 0 as _,
            planeAspect : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSamplerYcbcrConversionFeatures {
    fn default() -> PhysicalDeviceSamplerYcbcrConversionFeatures {
        PhysicalDeviceSamplerYcbcrConversionFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
            pNext : 0 as _,
            samplerYcbcrConversion : 0 as _,
        }
    }
}
impl ::std::default::Default for SamplerYcbcrConversionImageFormatProperties {
    fn default() -> SamplerYcbcrConversionImageFormatProperties {
        SamplerYcbcrConversionImageFormatProperties {
            sType : STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
            pNext : 0 as _,
            combinedImageSamplerDescriptorCount : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorUpdateTemplateEntry {
    fn default() -> DescriptorUpdateTemplateEntry {
        DescriptorUpdateTemplateEntry {
            dstBinding : 0 as _,
            dstArrayElement : 0 as _,
            descriptorCount : 0 as _,
            descriptorType : Default::default(),
            offset : Default::default(),
            stride : Default::default(),
        }
    }
}
impl ::std::default::Default for DescriptorUpdateTemplateCreateInfo {
    fn default() -> DescriptorUpdateTemplateCreateInfo {
        DescriptorUpdateTemplateCreateInfo {
            sType : STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            descriptorUpdateEntryCount : 0 as _,
            pDescriptorUpdateEntries : 0 as _,
            templateType : Default::default(),
            descriptorSetLayout : Default::default(),
            pipelineBindPoint : Default::default(),
            pipelineLayout : Default::default(),
            set : 0 as _,
        }
    }
}
impl ::std::default::Default for ExternalMemoryProperties {
    fn default() -> ExternalMemoryProperties {
        ExternalMemoryProperties {
            externalMemoryFeatures : Default::default(),
            exportFromImportedHandleTypes : Default::default(),
            compatibleHandleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceExternalImageFormatInfo {
    fn default() -> PhysicalDeviceExternalImageFormatInfo {
        PhysicalDeviceExternalImageFormatInfo {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
            pNext : 0 as _,
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ExternalImageFormatProperties {
    fn default() -> ExternalImageFormatProperties {
        ExternalImageFormatProperties {
            sType : STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
            pNext : 0 as _,
            externalMemoryProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceExternalBufferInfo {
    fn default() -> PhysicalDeviceExternalBufferInfo {
        PhysicalDeviceExternalBufferInfo {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            usage : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ExternalBufferProperties {
    fn default() -> ExternalBufferProperties {
        ExternalBufferProperties {
            sType : STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
            pNext : 0 as _,
            externalMemoryProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceIDProperties {
    fn default() -> PhysicalDeviceIDProperties {
        PhysicalDeviceIDProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
            pNext : 0 as _,
            deviceUUID : [Default::default();UUID_SIZE],
            driverUUID : [Default::default();UUID_SIZE],
            deviceLUID : [Default::default();LUID_SIZE],
            deviceNodeMask : 0 as _,
            deviceLUIDValid : 0 as _,
        }
    }
}
impl ::std::default::Default for ExternalMemoryImageCreateInfo {
    fn default() -> ExternalMemoryImageCreateInfo {
        ExternalMemoryImageCreateInfo {
            sType : STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for ExternalMemoryBufferCreateInfo {
    fn default() -> ExternalMemoryBufferCreateInfo {
        ExternalMemoryBufferCreateInfo {
            sType : STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for ExportMemoryAllocateInfo {
    fn default() -> ExportMemoryAllocateInfo {
        ExportMemoryAllocateInfo {
            sType : STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceExternalFenceInfo {
    fn default() -> PhysicalDeviceExternalFenceInfo {
        PhysicalDeviceExternalFenceInfo {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
            pNext : 0 as _,
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ExternalFenceProperties {
    fn default() -> ExternalFenceProperties {
        ExternalFenceProperties {
            sType : STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
            pNext : 0 as _,
            exportFromImportedHandleTypes : Default::default(),
            compatibleHandleTypes : Default::default(),
            externalFenceFeatures : Default::default(),
        }
    }
}
impl ::std::default::Default for ExportFenceCreateInfo {
    fn default() -> ExportFenceCreateInfo {
        ExportFenceCreateInfo {
            sType : STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for ExportSemaphoreCreateInfo {
    fn default() -> ExportSemaphoreCreateInfo {
        ExportSemaphoreCreateInfo {
            sType : STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceExternalSemaphoreInfo {
    fn default() -> PhysicalDeviceExternalSemaphoreInfo {
        PhysicalDeviceExternalSemaphoreInfo {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
            pNext : 0 as _,
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ExternalSemaphoreProperties {
    fn default() -> ExternalSemaphoreProperties {
        ExternalSemaphoreProperties {
            sType : STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
            pNext : 0 as _,
            exportFromImportedHandleTypes : Default::default(),
            compatibleHandleTypes : Default::default(),
            externalSemaphoreFeatures : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMaintenance3Properties {
    fn default() -> PhysicalDeviceMaintenance3Properties {
        PhysicalDeviceMaintenance3Properties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
            pNext : 0 as _,
            maxPerSetDescriptors : 0 as _,
            maxMemoryAllocationSize : Default::default(),
        }
    }
}
impl ::std::default::Default for DescriptorSetLayoutSupport {
    fn default() -> DescriptorSetLayoutSupport {
        DescriptorSetLayoutSupport {
            sType : STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
            pNext : 0 as _,
            supported : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderDrawParametersFeatures {
    fn default() -> PhysicalDeviceShaderDrawParametersFeatures {
        PhysicalDeviceShaderDrawParametersFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
            pNext : 0 as _,
            shaderDrawParameters : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVulkan11Features {
    fn default() -> PhysicalDeviceVulkan11Features {
        PhysicalDeviceVulkan11Features {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES,
            pNext : 0 as _,
            storageBuffer16BitAccess : 0 as _,
            uniformAndStorageBuffer16BitAccess : 0 as _,
            storagePushConstant16 : 0 as _,
            storageInputOutput16 : 0 as _,
            multiview : 0 as _,
            multiviewGeometryShader : 0 as _,
            multiviewTessellationShader : 0 as _,
            variablePointersStorageBuffer : 0 as _,
            variablePointers : 0 as _,
            protectedMemory : 0 as _,
            samplerYcbcrConversion : 0 as _,
            shaderDrawParameters : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVulkan11Properties {
    fn default() -> PhysicalDeviceVulkan11Properties {
        PhysicalDeviceVulkan11Properties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES,
            pNext : 0 as _,
            deviceUUID : [Default::default();UUID_SIZE],
            driverUUID : [Default::default();UUID_SIZE],
            deviceLUID : [Default::default();LUID_SIZE],
            deviceNodeMask : 0 as _,
            deviceLUIDValid : 0 as _,
            subgroupSize : 0 as _,
            subgroupSupportedStages : Default::default(),
            subgroupSupportedOperations : Default::default(),
            subgroupQuadOperationsInAllStages : 0 as _,
            pointClippingBehavior : Default::default(),
            maxMultiviewViewCount : 0 as _,
            maxMultiviewInstanceIndex : 0 as _,
            protectedNoFault : 0 as _,
            maxPerSetDescriptors : 0 as _,
            maxMemoryAllocationSize : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVulkan12Features {
    fn default() -> PhysicalDeviceVulkan12Features {
        PhysicalDeviceVulkan12Features {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES,
            pNext : 0 as _,
            samplerMirrorClampToEdge : 0 as _,
            drawIndirectCount : 0 as _,
            storageBuffer8BitAccess : 0 as _,
            uniformAndStorageBuffer8BitAccess : 0 as _,
            storagePushConstant8 : 0 as _,
            shaderBufferInt64Atomics : 0 as _,
            shaderSharedInt64Atomics : 0 as _,
            shaderFloat16 : 0 as _,
            shaderInt8 : 0 as _,
            descriptorIndexing : 0 as _,
            shaderInputAttachmentArrayDynamicIndexing : 0 as _,
            shaderUniformTexelBufferArrayDynamicIndexing : 0 as _,
            shaderStorageTexelBufferArrayDynamicIndexing : 0 as _,
            shaderUniformBufferArrayNonUniformIndexing : 0 as _,
            shaderSampledImageArrayNonUniformIndexing : 0 as _,
            shaderStorageBufferArrayNonUniformIndexing : 0 as _,
            shaderStorageImageArrayNonUniformIndexing : 0 as _,
            shaderInputAttachmentArrayNonUniformIndexing : 0 as _,
            shaderUniformTexelBufferArrayNonUniformIndexing : 0 as _,
            shaderStorageTexelBufferArrayNonUniformIndexing : 0 as _,
            descriptorBindingUniformBufferUpdateAfterBind : 0 as _,
            descriptorBindingSampledImageUpdateAfterBind : 0 as _,
            descriptorBindingStorageImageUpdateAfterBind : 0 as _,
            descriptorBindingStorageBufferUpdateAfterBind : 0 as _,
            descriptorBindingUniformTexelBufferUpdateAfterBind : 0 as _,
            descriptorBindingStorageTexelBufferUpdateAfterBind : 0 as _,
            descriptorBindingUpdateUnusedWhilePending : 0 as _,
            descriptorBindingPartiallyBound : 0 as _,
            descriptorBindingVariableDescriptorCount : 0 as _,
            runtimeDescriptorArray : 0 as _,
            samplerFilterMinmax : 0 as _,
            scalarBlockLayout : 0 as _,
            imagelessFramebuffer : 0 as _,
            uniformBufferStandardLayout : 0 as _,
            shaderSubgroupExtendedTypes : 0 as _,
            separateDepthStencilLayouts : 0 as _,
            hostQueryReset : 0 as _,
            timelineSemaphore : 0 as _,
            bufferDeviceAddress : 0 as _,
            bufferDeviceAddressCaptureReplay : 0 as _,
            bufferDeviceAddressMultiDevice : 0 as _,
            vulkanMemoryModel : 0 as _,
            vulkanMemoryModelDeviceScope : 0 as _,
            vulkanMemoryModelAvailabilityVisibilityChains : 0 as _,
            shaderOutputViewportIndex : 0 as _,
            shaderOutputLayer : 0 as _,
            subgroupBroadcastDynamicId : 0 as _,
        }
    }
}
impl ::std::default::Default for ConformanceVersion {
    fn default() -> ConformanceVersion {
        ConformanceVersion {
            major : Default::default(),
            minor : Default::default(),
            subminor : Default::default(),
            patch : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVulkan12Properties {
    fn default() -> PhysicalDeviceVulkan12Properties {
        PhysicalDeviceVulkan12Properties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES,
            pNext : 0 as _,
            driverID : Default::default(),
            driverName : [Default::default();MAX_DRIVER_NAME_SIZE],
            driverInfo : [Default::default();MAX_DRIVER_INFO_SIZE],
            conformanceVersion : Default::default(),
            denormBehaviorIndependence : Default::default(),
            roundingModeIndependence : Default::default(),
            shaderSignedZeroInfNanPreserveFloat16 : 0 as _,
            shaderSignedZeroInfNanPreserveFloat32 : 0 as _,
            shaderSignedZeroInfNanPreserveFloat64 : 0 as _,
            shaderDenormPreserveFloat16 : 0 as _,
            shaderDenormPreserveFloat32 : 0 as _,
            shaderDenormPreserveFloat64 : 0 as _,
            shaderDenormFlushToZeroFloat16 : 0 as _,
            shaderDenormFlushToZeroFloat32 : 0 as _,
            shaderDenormFlushToZeroFloat64 : 0 as _,
            shaderRoundingModeRTEFloat16 : 0 as _,
            shaderRoundingModeRTEFloat32 : 0 as _,
            shaderRoundingModeRTEFloat64 : 0 as _,
            shaderRoundingModeRTZFloat16 : 0 as _,
            shaderRoundingModeRTZFloat32 : 0 as _,
            shaderRoundingModeRTZFloat64 : 0 as _,
            maxUpdateAfterBindDescriptorsInAllPools : 0 as _,
            shaderUniformBufferArrayNonUniformIndexingNative : 0 as _,
            shaderSampledImageArrayNonUniformIndexingNative : 0 as _,
            shaderStorageBufferArrayNonUniformIndexingNative : 0 as _,
            shaderStorageImageArrayNonUniformIndexingNative : 0 as _,
            shaderInputAttachmentArrayNonUniformIndexingNative : 0 as _,
            robustBufferAccessUpdateAfterBind : 0 as _,
            quadDivergentImplicitLod : 0 as _,
            maxPerStageDescriptorUpdateAfterBindSamplers : 0 as _,
            maxPerStageDescriptorUpdateAfterBindUniformBuffers : 0 as _,
            maxPerStageDescriptorUpdateAfterBindStorageBuffers : 0 as _,
            maxPerStageDescriptorUpdateAfterBindSampledImages : 0 as _,
            maxPerStageDescriptorUpdateAfterBindStorageImages : 0 as _,
            maxPerStageDescriptorUpdateAfterBindInputAttachments : 0 as _,
            maxPerStageUpdateAfterBindResources : 0 as _,
            maxDescriptorSetUpdateAfterBindSamplers : 0 as _,
            maxDescriptorSetUpdateAfterBindUniformBuffers : 0 as _,
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : 0 as _,
            maxDescriptorSetUpdateAfterBindStorageBuffers : 0 as _,
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : 0 as _,
            maxDescriptorSetUpdateAfterBindSampledImages : 0 as _,
            maxDescriptorSetUpdateAfterBindStorageImages : 0 as _,
            maxDescriptorSetUpdateAfterBindInputAttachments : 0 as _,
            supportedDepthResolveModes : Default::default(),
            supportedStencilResolveModes : Default::default(),
            independentResolveNone : 0 as _,
            independentResolve : 0 as _,
            filterMinmaxSingleComponentFormats : 0 as _,
            filterMinmaxImageComponentMapping : 0 as _,
            maxTimelineSemaphoreValueDifference : 0 as _,
            framebufferIntegerColorSampleCounts : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageFormatListCreateInfo {
    fn default() -> ImageFormatListCreateInfo {
        ImageFormatListCreateInfo {
            sType : STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
            pNext : 0 as _,
            viewFormatCount : 0 as _,
            pViewFormats : 0 as _,
        }
    }
}
impl ::std::default::Default for AttachmentDescription2 {
    fn default() -> AttachmentDescription2 {
        AttachmentDescription2 {
            sType : STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
            pNext : 0 as _,
            flags : Default::default(),
            format : Default::default(),
            samples : Default::default(),
            loadOp : Default::default(),
            storeOp : Default::default(),
            stencilLoadOp : Default::default(),
            stencilStoreOp : Default::default(),
            initialLayout : Default::default(),
            finalLayout : Default::default(),
        }
    }
}
impl ::std::default::Default for AttachmentReference2 {
    fn default() -> AttachmentReference2 {
        AttachmentReference2 {
            sType : STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
            pNext : 0 as _,
            attachment : 0 as _,
            layout : Default::default(),
            aspectMask : Default::default(),
        }
    }
}
impl ::std::default::Default for SubpassDescription2 {
    fn default() -> SubpassDescription2 {
        SubpassDescription2 {
            sType : STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
            pNext : 0 as _,
            flags : Default::default(),
            pipelineBindPoint : Default::default(),
            viewMask : 0 as _,
            inputAttachmentCount : 0 as _,
            pInputAttachments : 0 as _,
            colorAttachmentCount : 0 as _,
            pColorAttachments : 0 as _,
            pResolveAttachments : 0 as _,
            pDepthStencilAttachment : 0 as _,
            preserveAttachmentCount : 0 as _,
            pPreserveAttachments : 0 as _,
        }
    }
}
impl ::std::default::Default for SubpassDependency2 {
    fn default() -> SubpassDependency2 {
        SubpassDependency2 {
            sType : STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
            pNext : 0 as _,
            srcSubpass : 0 as _,
            dstSubpass : 0 as _,
            srcStageMask : Default::default(),
            dstStageMask : Default::default(),
            srcAccessMask : Default::default(),
            dstAccessMask : Default::default(),
            dependencyFlags : Default::default(),
            viewOffset : 0 as _,
        }
    }
}
impl ::std::default::Default for RenderPassCreateInfo2 {
    fn default() -> RenderPassCreateInfo2 {
        RenderPassCreateInfo2 {
            sType : STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
            pNext : 0 as _,
            flags : Default::default(),
            attachmentCount : 0 as _,
            pAttachments : 0 as _,
            subpassCount : 0 as _,
            pSubpasses : 0 as _,
            dependencyCount : 0 as _,
            pDependencies : 0 as _,
            correlatedViewMaskCount : 0 as _,
            pCorrelatedViewMasks : 0 as _,
        }
    }
}
impl ::std::default::Default for SubpassBeginInfo {
    fn default() -> SubpassBeginInfo {
        SubpassBeginInfo {
            sType : STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
            pNext : 0 as _,
            contents : Default::default(),
        }
    }
}
impl ::std::default::Default for SubpassEndInfo {
    fn default() -> SubpassEndInfo {
        SubpassEndInfo {
            sType : STRUCTURE_TYPE_SUBPASS_END_INFO,
            pNext : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDevice8BitStorageFeatures {
    fn default() -> PhysicalDevice8BitStorageFeatures {
        PhysicalDevice8BitStorageFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
            pNext : 0 as _,
            storageBuffer8BitAccess : 0 as _,
            uniformAndStorageBuffer8BitAccess : 0 as _,
            storagePushConstant8 : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDriverProperties {
    fn default() -> PhysicalDeviceDriverProperties {
        PhysicalDeviceDriverProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
            pNext : 0 as _,
            driverID : Default::default(),
            driverName : [Default::default();MAX_DRIVER_NAME_SIZE],
            driverInfo : [Default::default();MAX_DRIVER_INFO_SIZE],
            conformanceVersion : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderAtomicInt64Features {
    fn default() -> PhysicalDeviceShaderAtomicInt64Features {
        PhysicalDeviceShaderAtomicInt64Features {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
            pNext : 0 as _,
            shaderBufferInt64Atomics : 0 as _,
            shaderSharedInt64Atomics : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderFloat16Int8Features {
    fn default() -> PhysicalDeviceShaderFloat16Int8Features {
        PhysicalDeviceShaderFloat16Int8Features {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
            pNext : 0 as _,
            shaderFloat16 : 0 as _,
            shaderInt8 : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFloatControlsProperties {
    fn default() -> PhysicalDeviceFloatControlsProperties {
        PhysicalDeviceFloatControlsProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
            pNext : 0 as _,
            denormBehaviorIndependence : Default::default(),
            roundingModeIndependence : Default::default(),
            shaderSignedZeroInfNanPreserveFloat16 : 0 as _,
            shaderSignedZeroInfNanPreserveFloat32 : 0 as _,
            shaderSignedZeroInfNanPreserveFloat64 : 0 as _,
            shaderDenormPreserveFloat16 : 0 as _,
            shaderDenormPreserveFloat32 : 0 as _,
            shaderDenormPreserveFloat64 : 0 as _,
            shaderDenormFlushToZeroFloat16 : 0 as _,
            shaderDenormFlushToZeroFloat32 : 0 as _,
            shaderDenormFlushToZeroFloat64 : 0 as _,
            shaderRoundingModeRTEFloat16 : 0 as _,
            shaderRoundingModeRTEFloat32 : 0 as _,
            shaderRoundingModeRTEFloat64 : 0 as _,
            shaderRoundingModeRTZFloat16 : 0 as _,
            shaderRoundingModeRTZFloat32 : 0 as _,
            shaderRoundingModeRTZFloat64 : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorSetLayoutBindingFlagsCreateInfo {
    fn default() -> DescriptorSetLayoutBindingFlagsCreateInfo {
        DescriptorSetLayoutBindingFlagsCreateInfo {
            sType : STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
            pNext : 0 as _,
            bindingCount : 0 as _,
            pBindingFlags : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDescriptorIndexingFeatures {
    fn default() -> PhysicalDeviceDescriptorIndexingFeatures {
        PhysicalDeviceDescriptorIndexingFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
            pNext : 0 as _,
            shaderInputAttachmentArrayDynamicIndexing : 0 as _,
            shaderUniformTexelBufferArrayDynamicIndexing : 0 as _,
            shaderStorageTexelBufferArrayDynamicIndexing : 0 as _,
            shaderUniformBufferArrayNonUniformIndexing : 0 as _,
            shaderSampledImageArrayNonUniformIndexing : 0 as _,
            shaderStorageBufferArrayNonUniformIndexing : 0 as _,
            shaderStorageImageArrayNonUniformIndexing : 0 as _,
            shaderInputAttachmentArrayNonUniformIndexing : 0 as _,
            shaderUniformTexelBufferArrayNonUniformIndexing : 0 as _,
            shaderStorageTexelBufferArrayNonUniformIndexing : 0 as _,
            descriptorBindingUniformBufferUpdateAfterBind : 0 as _,
            descriptorBindingSampledImageUpdateAfterBind : 0 as _,
            descriptorBindingStorageImageUpdateAfterBind : 0 as _,
            descriptorBindingStorageBufferUpdateAfterBind : 0 as _,
            descriptorBindingUniformTexelBufferUpdateAfterBind : 0 as _,
            descriptorBindingStorageTexelBufferUpdateAfterBind : 0 as _,
            descriptorBindingUpdateUnusedWhilePending : 0 as _,
            descriptorBindingPartiallyBound : 0 as _,
            descriptorBindingVariableDescriptorCount : 0 as _,
            runtimeDescriptorArray : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDescriptorIndexingProperties {
    fn default() -> PhysicalDeviceDescriptorIndexingProperties {
        PhysicalDeviceDescriptorIndexingProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
            pNext : 0 as _,
            maxUpdateAfterBindDescriptorsInAllPools : 0 as _,
            shaderUniformBufferArrayNonUniformIndexingNative : 0 as _,
            shaderSampledImageArrayNonUniformIndexingNative : 0 as _,
            shaderStorageBufferArrayNonUniformIndexingNative : 0 as _,
            shaderStorageImageArrayNonUniformIndexingNative : 0 as _,
            shaderInputAttachmentArrayNonUniformIndexingNative : 0 as _,
            robustBufferAccessUpdateAfterBind : 0 as _,
            quadDivergentImplicitLod : 0 as _,
            maxPerStageDescriptorUpdateAfterBindSamplers : 0 as _,
            maxPerStageDescriptorUpdateAfterBindUniformBuffers : 0 as _,
            maxPerStageDescriptorUpdateAfterBindStorageBuffers : 0 as _,
            maxPerStageDescriptorUpdateAfterBindSampledImages : 0 as _,
            maxPerStageDescriptorUpdateAfterBindStorageImages : 0 as _,
            maxPerStageDescriptorUpdateAfterBindInputAttachments : 0 as _,
            maxPerStageUpdateAfterBindResources : 0 as _,
            maxDescriptorSetUpdateAfterBindSamplers : 0 as _,
            maxDescriptorSetUpdateAfterBindUniformBuffers : 0 as _,
            maxDescriptorSetUpdateAfterBindUniformBuffersDynamic : 0 as _,
            maxDescriptorSetUpdateAfterBindStorageBuffers : 0 as _,
            maxDescriptorSetUpdateAfterBindStorageBuffersDynamic : 0 as _,
            maxDescriptorSetUpdateAfterBindSampledImages : 0 as _,
            maxDescriptorSetUpdateAfterBindStorageImages : 0 as _,
            maxDescriptorSetUpdateAfterBindInputAttachments : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorSetVariableDescriptorCountAllocateInfo {
    fn default() -> DescriptorSetVariableDescriptorCountAllocateInfo {
        DescriptorSetVariableDescriptorCountAllocateInfo {
            sType : STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
            pNext : 0 as _,
            descriptorSetCount : 0 as _,
            pDescriptorCounts : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorSetVariableDescriptorCountLayoutSupport {
    fn default() -> DescriptorSetVariableDescriptorCountLayoutSupport {
        DescriptorSetVariableDescriptorCountLayoutSupport {
            sType : STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
            pNext : 0 as _,
            maxVariableDescriptorCount : 0 as _,
        }
    }
}
impl ::std::default::Default for SubpassDescriptionDepthStencilResolve {
    fn default() -> SubpassDescriptionDepthStencilResolve {
        SubpassDescriptionDepthStencilResolve {
            sType : STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
            pNext : 0 as _,
            depthResolveMode : Default::default(),
            stencilResolveMode : Default::default(),
            pDepthStencilResolveAttachment : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDepthStencilResolveProperties {
    fn default() -> PhysicalDeviceDepthStencilResolveProperties {
        PhysicalDeviceDepthStencilResolveProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
            pNext : 0 as _,
            supportedDepthResolveModes : Default::default(),
            supportedStencilResolveModes : Default::default(),
            independentResolveNone : 0 as _,
            independentResolve : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceScalarBlockLayoutFeatures {
    fn default() -> PhysicalDeviceScalarBlockLayoutFeatures {
        PhysicalDeviceScalarBlockLayoutFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
            pNext : 0 as _,
            scalarBlockLayout : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageStencilUsageCreateInfo {
    fn default() -> ImageStencilUsageCreateInfo {
        ImageStencilUsageCreateInfo {
            sType : STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
            pNext : 0 as _,
            stencilUsage : Default::default(),
        }
    }
}
impl ::std::default::Default for SamplerReductionModeCreateInfo {
    fn default() -> SamplerReductionModeCreateInfo {
        SamplerReductionModeCreateInfo {
            sType : STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
            pNext : 0 as _,
            reductionMode : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSamplerFilterMinmaxProperties {
    fn default() -> PhysicalDeviceSamplerFilterMinmaxProperties {
        PhysicalDeviceSamplerFilterMinmaxProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
            pNext : 0 as _,
            filterMinmaxSingleComponentFormats : 0 as _,
            filterMinmaxImageComponentMapping : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVulkanMemoryModelFeatures {
    fn default() -> PhysicalDeviceVulkanMemoryModelFeatures {
        PhysicalDeviceVulkanMemoryModelFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
            pNext : 0 as _,
            vulkanMemoryModel : 0 as _,
            vulkanMemoryModelDeviceScope : 0 as _,
            vulkanMemoryModelAvailabilityVisibilityChains : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceImagelessFramebufferFeatures {
    fn default() -> PhysicalDeviceImagelessFramebufferFeatures {
        PhysicalDeviceImagelessFramebufferFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
            pNext : 0 as _,
            imagelessFramebuffer : 0 as _,
        }
    }
}
impl ::std::default::Default for FramebufferAttachmentImageInfo {
    fn default() -> FramebufferAttachmentImageInfo {
        FramebufferAttachmentImageInfo {
            sType : STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            usage : Default::default(),
            width : 0 as _,
            height : 0 as _,
            layerCount : 0 as _,
            viewFormatCount : 0 as _,
            pViewFormats : 0 as _,
        }
    }
}
impl ::std::default::Default for FramebufferAttachmentsCreateInfo {
    fn default() -> FramebufferAttachmentsCreateInfo {
        FramebufferAttachmentsCreateInfo {
            sType : STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
            pNext : 0 as _,
            attachmentImageInfoCount : 0 as _,
            pAttachmentImageInfos : 0 as _,
        }
    }
}
impl ::std::default::Default for RenderPassAttachmentBeginInfo {
    fn default() -> RenderPassAttachmentBeginInfo {
        RenderPassAttachmentBeginInfo {
            sType : STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
            pNext : 0 as _,
            attachmentCount : 0 as _,
            pAttachments : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceUniformBufferStandardLayoutFeatures {
    fn default() -> PhysicalDeviceUniformBufferStandardLayoutFeatures {
        PhysicalDeviceUniformBufferStandardLayoutFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
            pNext : 0 as _,
            uniformBufferStandardLayout : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    fn default() -> PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
        PhysicalDeviceShaderSubgroupExtendedTypesFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
            pNext : 0 as _,
            shaderSubgroupExtendedTypes : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    fn default() -> PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
        PhysicalDeviceSeparateDepthStencilLayoutsFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
            pNext : 0 as _,
            separateDepthStencilLayouts : 0 as _,
        }
    }
}
impl ::std::default::Default for AttachmentReferenceStencilLayout {
    fn default() -> AttachmentReferenceStencilLayout {
        AttachmentReferenceStencilLayout {
            sType : STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
            pNext : 0 as _,
            stencilLayout : Default::default(),
        }
    }
}
impl ::std::default::Default for AttachmentDescriptionStencilLayout {
    fn default() -> AttachmentDescriptionStencilLayout {
        AttachmentDescriptionStencilLayout {
            sType : STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
            pNext : 0 as _,
            stencilInitialLayout : Default::default(),
            stencilFinalLayout : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceHostQueryResetFeatures {
    fn default() -> PhysicalDeviceHostQueryResetFeatures {
        PhysicalDeviceHostQueryResetFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
            pNext : 0 as _,
            hostQueryReset : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTimelineSemaphoreFeatures {
    fn default() -> PhysicalDeviceTimelineSemaphoreFeatures {
        PhysicalDeviceTimelineSemaphoreFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
            pNext : 0 as _,
            timelineSemaphore : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTimelineSemaphoreProperties {
    fn default() -> PhysicalDeviceTimelineSemaphoreProperties {
        PhysicalDeviceTimelineSemaphoreProperties {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
            pNext : 0 as _,
            maxTimelineSemaphoreValueDifference : 0 as _,
        }
    }
}
impl ::std::default::Default for SemaphoreTypeCreateInfo {
    fn default() -> SemaphoreTypeCreateInfo {
        SemaphoreTypeCreateInfo {
            sType : STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
            pNext : 0 as _,
            semaphoreType : Default::default(),
            initialValue : 0 as _,
        }
    }
}
impl ::std::default::Default for TimelineSemaphoreSubmitInfo {
    fn default() -> TimelineSemaphoreSubmitInfo {
        TimelineSemaphoreSubmitInfo {
            sType : STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
            pNext : 0 as _,
            waitSemaphoreValueCount : 0 as _,
            pWaitSemaphoreValues : 0 as _,
            signalSemaphoreValueCount : 0 as _,
            pSignalSemaphoreValues : 0 as _,
        }
    }
}
impl ::std::default::Default for SemaphoreWaitInfo {
    fn default() -> SemaphoreWaitInfo {
        SemaphoreWaitInfo {
            sType : STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
            pNext : 0 as _,
            flags : Default::default(),
            semaphoreCount : 0 as _,
            pSemaphores : 0 as _,
            pValues : 0 as _,
        }
    }
}
impl ::std::default::Default for SemaphoreSignalInfo {
    fn default() -> SemaphoreSignalInfo {
        SemaphoreSignalInfo {
            sType : STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
            pNext : 0 as _,
            semaphore : Default::default(),
            value : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceBufferDeviceAddressFeatures {
    fn default() -> PhysicalDeviceBufferDeviceAddressFeatures {
        PhysicalDeviceBufferDeviceAddressFeatures {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
            pNext : 0 as _,
            bufferDeviceAddress : 0 as _,
            bufferDeviceAddressCaptureReplay : 0 as _,
            bufferDeviceAddressMultiDevice : 0 as _,
        }
    }
}
impl ::std::default::Default for BufferDeviceAddressInfo {
    fn default() -> BufferDeviceAddressInfo {
        BufferDeviceAddressInfo {
            sType : STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
            pNext : 0 as _,
            buffer : Default::default(),
        }
    }
}
impl ::std::default::Default for BufferOpaqueCaptureAddressCreateInfo {
    fn default() -> BufferOpaqueCaptureAddressCreateInfo {
        BufferOpaqueCaptureAddressCreateInfo {
            sType : STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
            pNext : 0 as _,
            opaqueCaptureAddress : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryOpaqueCaptureAddressAllocateInfo {
    fn default() -> MemoryOpaqueCaptureAddressAllocateInfo {
        MemoryOpaqueCaptureAddressAllocateInfo {
            sType : STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
            pNext : 0 as _,
            opaqueCaptureAddress : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceMemoryOpaqueCaptureAddressInfo {
    fn default() -> DeviceMemoryOpaqueCaptureAddressInfo {
        DeviceMemoryOpaqueCaptureAddressInfo {
            sType : STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
            pNext : 0 as _,
            memory : Default::default(),
        }
    }
}
impl ::std::default::Default for SurfaceCapabilitiesKHR {
    fn default() -> SurfaceCapabilitiesKHR {
        SurfaceCapabilitiesKHR {
            minImageCount : 0 as _,
            maxImageCount : 0 as _,
            currentExtent : Default::default(),
            minImageExtent : Default::default(),
            maxImageExtent : Default::default(),
            maxImageArrayLayers : 0 as _,
            supportedTransforms : Default::default(),
            currentTransform : Default::default(),
            supportedCompositeAlpha : Default::default(),
            supportedUsageFlags : Default::default(),
        }
    }
}
impl ::std::default::Default for SurfaceFormatKHR {
    fn default() -> SurfaceFormatKHR {
        SurfaceFormatKHR {
            format : Default::default(),
            colorSpace : Default::default(),
        }
    }
}
impl ::std::default::Default for SwapchainCreateInfoKHR {
    fn default() -> SwapchainCreateInfoKHR {
        SwapchainCreateInfoKHR {
            sType : STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
            surface : Default::default(),
            minImageCount : 0 as _,
            imageFormat : Default::default(),
            imageColorSpace : Default::default(),
            imageExtent : Default::default(),
            imageArrayLayers : 0 as _,
            imageUsage : Default::default(),
            imageSharingMode : Default::default(),
            queueFamilyIndexCount : 0 as _,
            pQueueFamilyIndices : 0 as _,
            preTransform : Default::default(),
            compositeAlpha : Default::default(),
            presentMode : Default::default(),
            clipped : 0 as _,
            oldSwapchain : Default::default(),
        }
    }
}
impl ::std::default::Default for PresentInfoKHR {
    fn default() -> PresentInfoKHR {
        PresentInfoKHR {
            sType : STRUCTURE_TYPE_PRESENT_INFO_KHR,
            pNext : 0 as _,
            waitSemaphoreCount : 0 as _,
            pWaitSemaphores : 0 as _,
            swapchainCount : 0 as _,
            pSwapchains : 0 as _,
            pImageIndices : 0 as _,
            pResults : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageSwapchainCreateInfoKHR {
    fn default() -> ImageSwapchainCreateInfoKHR {
        ImageSwapchainCreateInfoKHR {
            sType : STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR,
            pNext : 0 as _,
            swapchain : Default::default(),
        }
    }
}
impl ::std::default::Default for BindImageMemorySwapchainInfoKHR {
    fn default() -> BindImageMemorySwapchainInfoKHR {
        BindImageMemorySwapchainInfoKHR {
            sType : STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR,
            pNext : 0 as _,
            swapchain : Default::default(),
            imageIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for AcquireNextImageInfoKHR {
    fn default() -> AcquireNextImageInfoKHR {
        AcquireNextImageInfoKHR {
            sType : STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR,
            pNext : 0 as _,
            swapchain : Default::default(),
            timeout : 0 as _,
            semaphore : Default::default(),
            fence : Default::default(),
            deviceMask : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceGroupPresentCapabilitiesKHR {
    fn default() -> DeviceGroupPresentCapabilitiesKHR {
        DeviceGroupPresentCapabilitiesKHR {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR,
            pNext : 0 as _,
            presentMask : [Default::default();MAX_DEVICE_GROUP_SIZE],
            modes : Default::default(),
        }
    }
}
impl ::std::default::Default for DeviceGroupPresentInfoKHR {
    fn default() -> DeviceGroupPresentInfoKHR {
        DeviceGroupPresentInfoKHR {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR,
            pNext : 0 as _,
            swapchainCount : 0 as _,
            pDeviceMasks : 0 as _,
            mode : Default::default(),
        }
    }
}
impl ::std::default::Default for DeviceGroupSwapchainCreateInfoKHR {
    fn default() -> DeviceGroupSwapchainCreateInfoKHR {
        DeviceGroupSwapchainCreateInfoKHR {
            sType : STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR,
            pNext : 0 as _,
            modes : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPropertiesKHR {
    fn default() -> DisplayPropertiesKHR {
        DisplayPropertiesKHR {
            display : Default::default(),
            displayName : 0 as _,
            physicalDimensions : Default::default(),
            physicalResolution : Default::default(),
            supportedTransforms : Default::default(),
            planeReorderPossible : 0 as _,
            persistentContent : 0 as _,
        }
    }
}
impl ::std::default::Default for DisplayModeParametersKHR {
    fn default() -> DisplayModeParametersKHR {
        DisplayModeParametersKHR {
            visibleRegion : Default::default(),
            refreshRate : 0 as _,
        }
    }
}
impl ::std::default::Default for DisplayModePropertiesKHR {
    fn default() -> DisplayModePropertiesKHR {
        DisplayModePropertiesKHR {
            displayMode : Default::default(),
            parameters : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayModeCreateInfoKHR {
    fn default() -> DisplayModeCreateInfoKHR {
        DisplayModeCreateInfoKHR {
            sType : STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
            parameters : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPlaneCapabilitiesKHR {
    fn default() -> DisplayPlaneCapabilitiesKHR {
        DisplayPlaneCapabilitiesKHR {
            supportedAlpha : Default::default(),
            minSrcPosition : Default::default(),
            maxSrcPosition : Default::default(),
            minSrcExtent : Default::default(),
            maxSrcExtent : Default::default(),
            minDstPosition : Default::default(),
            maxDstPosition : Default::default(),
            minDstExtent : Default::default(),
            maxDstExtent : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPlanePropertiesKHR {
    fn default() -> DisplayPlanePropertiesKHR {
        DisplayPlanePropertiesKHR {
            currentDisplay : Default::default(),
            currentStackIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for DisplaySurfaceCreateInfoKHR {
    fn default() -> DisplaySurfaceCreateInfoKHR {
        DisplaySurfaceCreateInfoKHR {
            sType : STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
            displayMode : Default::default(),
            planeIndex : 0 as _,
            planeStackIndex : 0 as _,
            transform : Default::default(),
            globalAlpha : 0 as _,
            alphaMode : Default::default(),
            imageExtent : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPresentInfoKHR {
    fn default() -> DisplayPresentInfoKHR {
        DisplayPresentInfoKHR {
            sType : STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR,
            pNext : 0 as _,
            srcRect : Default::default(),
            dstRect : Default::default(),
            persistent : 0 as _,
        }
    }
}
impl ::std::default::Default for ImportMemoryFdInfoKHR {
    fn default() -> ImportMemoryFdInfoKHR {
        ImportMemoryFdInfoKHR {
            sType : STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR,
            pNext : 0 as _,
            handleType : Default::default(),
            fd : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryFdPropertiesKHR {
    fn default() -> MemoryFdPropertiesKHR {
        MemoryFdPropertiesKHR {
            sType : STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR,
            pNext : 0 as _,
            memoryTypeBits : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryGetFdInfoKHR {
    fn default() -> MemoryGetFdInfoKHR {
        MemoryGetFdInfoKHR {
            sType : STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR,
            pNext : 0 as _,
            memory : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ImportSemaphoreFdInfoKHR {
    fn default() -> ImportSemaphoreFdInfoKHR {
        ImportSemaphoreFdInfoKHR {
            sType : STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR,
            pNext : 0 as _,
            semaphore : Default::default(),
            flags : Default::default(),
            handleType : Default::default(),
            fd : 0 as _,
        }
    }
}
impl ::std::default::Default for SemaphoreGetFdInfoKHR {
    fn default() -> SemaphoreGetFdInfoKHR {
        SemaphoreGetFdInfoKHR {
            sType : STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR,
            pNext : 0 as _,
            semaphore : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDevicePushDescriptorPropertiesKHR {
    fn default() -> PhysicalDevicePushDescriptorPropertiesKHR {
        PhysicalDevicePushDescriptorPropertiesKHR {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR,
            pNext : 0 as _,
            maxPushDescriptors : 0 as _,
        }
    }
}
impl ::std::default::Default for RectLayerKHR {
    fn default() -> RectLayerKHR {
        RectLayerKHR {
            offset : Default::default(),
            extent : Default::default(),
            layer : 0 as _,
        }
    }
}
impl ::std::default::Default for PresentRegionKHR {
    fn default() -> PresentRegionKHR {
        PresentRegionKHR {
            rectangleCount : 0 as _,
            pRectangles : 0 as _,
        }
    }
}
impl ::std::default::Default for PresentRegionsKHR {
    fn default() -> PresentRegionsKHR {
        PresentRegionsKHR {
            sType : STRUCTURE_TYPE_PRESENT_REGIONS_KHR,
            pNext : 0 as _,
            swapchainCount : 0 as _,
            pRegions : 0 as _,
        }
    }
}
impl ::std::default::Default for SharedPresentSurfaceCapabilitiesKHR {
    fn default() -> SharedPresentSurfaceCapabilitiesKHR {
        SharedPresentSurfaceCapabilitiesKHR {
            sType : STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR,
            pNext : 0 as _,
            sharedPresentSupportedUsageFlags : Default::default(),
        }
    }
}
impl ::std::default::Default for ImportFenceFdInfoKHR {
    fn default() -> ImportFenceFdInfoKHR {
        ImportFenceFdInfoKHR {
            sType : STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR,
            pNext : 0 as _,
            fence : Default::default(),
            flags : Default::default(),
            handleType : Default::default(),
            fd : 0 as _,
        }
    }
}
impl ::std::default::Default for FenceGetFdInfoKHR {
    fn default() -> FenceGetFdInfoKHR {
        FenceGetFdInfoKHR {
            sType : STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR,
            pNext : 0 as _,
            fence : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDevicePerformanceQueryFeaturesKHR {
    fn default() -> PhysicalDevicePerformanceQueryFeaturesKHR {
        PhysicalDevicePerformanceQueryFeaturesKHR {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR,
            pNext : 0 as _,
            performanceCounterQueryPools : 0 as _,
            performanceCounterMultipleQueryPools : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDevicePerformanceQueryPropertiesKHR {
    fn default() -> PhysicalDevicePerformanceQueryPropertiesKHR {
        PhysicalDevicePerformanceQueryPropertiesKHR {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR,
            pNext : 0 as _,
            allowCommandBufferQueryCopies : 0 as _,
        }
    }
}
impl ::std::default::Default for PerformanceCounterKHR {
    fn default() -> PerformanceCounterKHR {
        PerformanceCounterKHR {
            sType : STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR,
            pNext : 0 as _,
            unit : Default::default(),
            scope : Default::default(),
            storage : Default::default(),
            uuid : [Default::default();UUID_SIZE],
        }
    }
}
impl ::std::default::Default for PerformanceCounterDescriptionKHR {
    fn default() -> PerformanceCounterDescriptionKHR {
        PerformanceCounterDescriptionKHR {
            sType : STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR,
            pNext : 0 as _,
            flags : Default::default(),
            name : [Default::default();MAX_DESCRIPTION_SIZE],
            category : [Default::default();MAX_DESCRIPTION_SIZE],
            description : [Default::default();MAX_DESCRIPTION_SIZE],
        }
    }
}
impl ::std::default::Default for QueryPoolPerformanceCreateInfoKHR {
    fn default() -> QueryPoolPerformanceCreateInfoKHR {
        QueryPoolPerformanceCreateInfoKHR {
            sType : STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR,
            pNext : 0 as _,
            queueFamilyIndex : 0 as _,
            counterIndexCount : 0 as _,
            pCounterIndices : 0 as _,
        }
    }
}
impl ::std::default::Default for AcquireProfilingLockInfoKHR {
    fn default() -> AcquireProfilingLockInfoKHR {
        AcquireProfilingLockInfoKHR {
            sType : STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
            timeout : 0 as _,
        }
    }
}
impl ::std::default::Default for PerformanceQuerySubmitInfoKHR {
    fn default() -> PerformanceQuerySubmitInfoKHR {
        PerformanceQuerySubmitInfoKHR {
            sType : STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR,
            pNext : 0 as _,
            counterPassIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSurfaceInfo2KHR {
    fn default() -> PhysicalDeviceSurfaceInfo2KHR {
        PhysicalDeviceSurfaceInfo2KHR {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR,
            pNext : 0 as _,
            surface : Default::default(),
        }
    }
}
impl ::std::default::Default for SurfaceCapabilities2KHR {
    fn default() -> SurfaceCapabilities2KHR {
        SurfaceCapabilities2KHR {
            sType : STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR,
            pNext : 0 as _,
            surfaceCapabilities : Default::default(),
        }
    }
}
impl ::std::default::Default for SurfaceFormat2KHR {
    fn default() -> SurfaceFormat2KHR {
        SurfaceFormat2KHR {
            sType : STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR,
            pNext : 0 as _,
            surfaceFormat : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayProperties2KHR {
    fn default() -> DisplayProperties2KHR {
        DisplayProperties2KHR {
            sType : STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR,
            pNext : 0 as _,
            displayProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPlaneProperties2KHR {
    fn default() -> DisplayPlaneProperties2KHR {
        DisplayPlaneProperties2KHR {
            sType : STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR,
            pNext : 0 as _,
            displayPlaneProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayModeProperties2KHR {
    fn default() -> DisplayModeProperties2KHR {
        DisplayModeProperties2KHR {
            sType : STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR,
            pNext : 0 as _,
            displayModeProperties : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPlaneInfo2KHR {
    fn default() -> DisplayPlaneInfo2KHR {
        DisplayPlaneInfo2KHR {
            sType : STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR,
            pNext : 0 as _,
            mode : Default::default(),
            planeIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for DisplayPlaneCapabilities2KHR {
    fn default() -> DisplayPlaneCapabilities2KHR {
        DisplayPlaneCapabilities2KHR {
            sType : STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR,
            pNext : 0 as _,
            capabilities : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderClockFeaturesKHR {
    fn default() -> PhysicalDeviceShaderClockFeaturesKHR {
        PhysicalDeviceShaderClockFeaturesKHR {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR,
            pNext : 0 as _,
            shaderSubgroupClock : 0 as _,
            shaderDeviceClock : 0 as _,
        }
    }
}
impl ::std::default::Default for SurfaceProtectedCapabilitiesKHR {
    fn default() -> SurfaceProtectedCapabilitiesKHR {
        SurfaceProtectedCapabilitiesKHR {
            sType : STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR,
            pNext : 0 as _,
            supportsProtected : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    fn default() -> PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
        PhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR,
            pNext : 0 as _,
            pipelineExecutableInfo : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineInfoKHR {
    fn default() -> PipelineInfoKHR {
        PipelineInfoKHR {
            sType : STRUCTURE_TYPE_PIPELINE_INFO_KHR,
            pNext : 0 as _,
            pipeline : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineExecutablePropertiesKHR {
    fn default() -> PipelineExecutablePropertiesKHR {
        PipelineExecutablePropertiesKHR {
            sType : STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR,
            pNext : 0 as _,
            stages : Default::default(),
            name : [Default::default();MAX_DESCRIPTION_SIZE],
            description : [Default::default();MAX_DESCRIPTION_SIZE],
            subgroupSize : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineExecutableInfoKHR {
    fn default() -> PipelineExecutableInfoKHR {
        PipelineExecutableInfoKHR {
            sType : STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR,
            pNext : 0 as _,
            pipeline : Default::default(),
            executableIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineExecutableInternalRepresentationKHR {
    fn default() -> PipelineExecutableInternalRepresentationKHR {
        PipelineExecutableInternalRepresentationKHR {
            sType : STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR,
            pNext : 0 as _,
            name : [Default::default();MAX_DESCRIPTION_SIZE],
            description : [Default::default();MAX_DESCRIPTION_SIZE],
            isText : 0 as _,
            dataSize : Default::default(),
            pData : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugReportCallbackCreateInfoEXT {
    fn default() -> DebugReportCallbackCreateInfoEXT {
        DebugReportCallbackCreateInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            pfnCallback : 0 as _,
            pUserData : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRasterizationStateRasterizationOrderAMD {
    fn default() -> PipelineRasterizationStateRasterizationOrderAMD {
        PipelineRasterizationStateRasterizationOrderAMD {
            sType : STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD,
            pNext : 0 as _,
            rasterizationOrder : Default::default(),
        }
    }
}
impl ::std::default::Default for DebugMarkerObjectNameInfoEXT {
    fn default() -> DebugMarkerObjectNameInfoEXT {
        DebugMarkerObjectNameInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT,
            pNext : 0 as _,
            objectType : Default::default(),
            object : 0 as _,
            pObjectName : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugMarkerObjectTagInfoEXT {
    fn default() -> DebugMarkerObjectTagInfoEXT {
        DebugMarkerObjectTagInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT,
            pNext : 0 as _,
            objectType : Default::default(),
            object : 0 as _,
            tagName : 0 as _,
            tagSize : Default::default(),
            pTag : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugMarkerMarkerInfoEXT {
    fn default() -> DebugMarkerMarkerInfoEXT {
        DebugMarkerMarkerInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT,
            pNext : 0 as _,
            pMarkerName : 0 as _,
            color : [Default::default();4],
        }
    }
}
impl ::std::default::Default for DedicatedAllocationImageCreateInfoNV {
    fn default() -> DedicatedAllocationImageCreateInfoNV {
        DedicatedAllocationImageCreateInfoNV {
            sType : STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV,
            pNext : 0 as _,
            dedicatedAllocation : 0 as _,
        }
    }
}
impl ::std::default::Default for DedicatedAllocationBufferCreateInfoNV {
    fn default() -> DedicatedAllocationBufferCreateInfoNV {
        DedicatedAllocationBufferCreateInfoNV {
            sType : STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV,
            pNext : 0 as _,
            dedicatedAllocation : 0 as _,
        }
    }
}
impl ::std::default::Default for DedicatedAllocationMemoryAllocateInfoNV {
    fn default() -> DedicatedAllocationMemoryAllocateInfoNV {
        DedicatedAllocationMemoryAllocateInfoNV {
            sType : STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV,
            pNext : 0 as _,
            image : Default::default(),
            buffer : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTransformFeedbackFeaturesEXT {
    fn default() -> PhysicalDeviceTransformFeedbackFeaturesEXT {
        PhysicalDeviceTransformFeedbackFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT,
            pNext : 0 as _,
            transformFeedback : 0 as _,
            geometryStreams : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTransformFeedbackPropertiesEXT {
    fn default() -> PhysicalDeviceTransformFeedbackPropertiesEXT {
        PhysicalDeviceTransformFeedbackPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT,
            pNext : 0 as _,
            maxTransformFeedbackStreams : 0 as _,
            maxTransformFeedbackBuffers : 0 as _,
            maxTransformFeedbackBufferSize : Default::default(),
            maxTransformFeedbackStreamDataSize : 0 as _,
            maxTransformFeedbackBufferDataSize : 0 as _,
            maxTransformFeedbackBufferDataStride : 0 as _,
            transformFeedbackQueries : 0 as _,
            transformFeedbackStreamsLinesTriangles : 0 as _,
            transformFeedbackRasterizationStreamSelect : 0 as _,
            transformFeedbackDraw : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRasterizationStateStreamCreateInfoEXT {
    fn default() -> PipelineRasterizationStateStreamCreateInfoEXT {
        PipelineRasterizationStateStreamCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            rasterizationStream : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageViewHandleInfoNVX {
    fn default() -> ImageViewHandleInfoNVX {
        ImageViewHandleInfoNVX {
            sType : STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX,
            pNext : 0 as _,
            imageView : Default::default(),
            descriptorType : Default::default(),
            sampler : Default::default(),
        }
    }
}
impl ::std::default::Default for ImageViewAddressPropertiesNVX {
    fn default() -> ImageViewAddressPropertiesNVX {
        ImageViewAddressPropertiesNVX {
            sType : STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX,
            pNext : 0 as _,
            deviceAddress : Default::default(),
            size : Default::default(),
        }
    }
}
impl ::std::default::Default for TextureLODGatherFormatPropertiesAMD {
    fn default() -> TextureLODGatherFormatPropertiesAMD {
        TextureLODGatherFormatPropertiesAMD {
            sType : STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD,
            pNext : 0 as _,
            supportsTextureGatherLODBiasAMD : 0 as _,
        }
    }
}
impl ::std::default::Default for ShaderResourceUsageAMD {
    fn default() -> ShaderResourceUsageAMD {
        ShaderResourceUsageAMD {
            numUsedVgprs : 0 as _,
            numUsedSgprs : 0 as _,
            ldsSizePerLocalWorkGroup : 0 as _,
            ldsUsageSizeInBytes : Default::default(),
            scratchMemUsageInBytes : Default::default(),
        }
    }
}
impl ::std::default::Default for ShaderStatisticsInfoAMD {
    fn default() -> ShaderStatisticsInfoAMD {
        ShaderStatisticsInfoAMD {
            shaderStageMask : Default::default(),
            resourceUsage : Default::default(),
            numPhysicalVgprs : 0 as _,
            numPhysicalSgprs : 0 as _,
            numAvailableVgprs : 0 as _,
            numAvailableSgprs : 0 as _,
            computeWorkGroupSize : [Default::default();3],
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCornerSampledImageFeaturesNV {
    fn default() -> PhysicalDeviceCornerSampledImageFeaturesNV {
        PhysicalDeviceCornerSampledImageFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV,
            pNext : 0 as _,
            cornerSampledImage : 0 as _,
        }
    }
}
impl ::std::default::Default for ExternalImageFormatPropertiesNV {
    fn default() -> ExternalImageFormatPropertiesNV {
        ExternalImageFormatPropertiesNV {
            imageFormatProperties : Default::default(),
            externalMemoryFeatures : Default::default(),
            exportFromImportedHandleTypes : Default::default(),
            compatibleHandleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for ExternalMemoryImageCreateInfoNV {
    fn default() -> ExternalMemoryImageCreateInfoNV {
        ExternalMemoryImageCreateInfoNV {
            sType : STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for ExportMemoryAllocateInfoNV {
    fn default() -> ExportMemoryAllocateInfoNV {
        ExportMemoryAllocateInfoNV {
            sType : STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV,
            pNext : 0 as _,
            handleTypes : Default::default(),
        }
    }
}
impl ::std::default::Default for ValidationFlagsEXT {
    fn default() -> ValidationFlagsEXT {
        ValidationFlagsEXT {
            sType : STRUCTURE_TYPE_VALIDATION_FLAGS_EXT,
            pNext : 0 as _,
            disabledValidationCheckCount : 0 as _,
            pDisabledValidationChecks : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
    fn default() -> PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
        PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT,
            pNext : 0 as _,
            textureCompressionASTC_HDR : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageViewASTCDecodeModeEXT {
    fn default() -> ImageViewASTCDecodeModeEXT {
        ImageViewASTCDecodeModeEXT {
            sType : STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT,
            pNext : 0 as _,
            decodeMode : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceASTCDecodeFeaturesEXT {
    fn default() -> PhysicalDeviceASTCDecodeFeaturesEXT {
        PhysicalDeviceASTCDecodeFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT,
            pNext : 0 as _,
            decodeModeSharedExponent : 0 as _,
        }
    }
}
impl ::std::default::Default for ConditionalRenderingBeginInfoEXT {
    fn default() -> ConditionalRenderingBeginInfoEXT {
        ConditionalRenderingBeginInfoEXT {
            sType : STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT,
            pNext : 0 as _,
            buffer : Default::default(),
            offset : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceConditionalRenderingFeaturesEXT {
    fn default() -> PhysicalDeviceConditionalRenderingFeaturesEXT {
        PhysicalDeviceConditionalRenderingFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT,
            pNext : 0 as _,
            conditionalRendering : 0 as _,
            inheritedConditionalRendering : 0 as _,
        }
    }
}
impl ::std::default::Default for CommandBufferInheritanceConditionalRenderingInfoEXT {
    fn default() -> CommandBufferInheritanceConditionalRenderingInfoEXT {
        CommandBufferInheritanceConditionalRenderingInfoEXT {
            sType : STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT,
            pNext : 0 as _,
            conditionalRenderingEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for ViewportWScalingNV {
    fn default() -> ViewportWScalingNV {
        ViewportWScalingNV {
            xcoeff : 0 as _,
            ycoeff : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineViewportWScalingStateCreateInfoNV {
    fn default() -> PipelineViewportWScalingStateCreateInfoNV {
        PipelineViewportWScalingStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            viewportWScalingEnable : 0 as _,
            viewportCount : 0 as _,
            pViewportWScalings : 0 as _,
        }
    }
}
impl ::std::default::Default for SurfaceCapabilities2EXT {
    fn default() -> SurfaceCapabilities2EXT {
        SurfaceCapabilities2EXT {
            sType : STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
            pNext : 0 as _,
            minImageCount : 0 as _,
            maxImageCount : 0 as _,
            currentExtent : Default::default(),
            minImageExtent : Default::default(),
            maxImageExtent : Default::default(),
            maxImageArrayLayers : 0 as _,
            supportedTransforms : Default::default(),
            currentTransform : Default::default(),
            supportedCompositeAlpha : Default::default(),
            supportedUsageFlags : Default::default(),
            supportedSurfaceCounters : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayPowerInfoEXT {
    fn default() -> DisplayPowerInfoEXT {
        DisplayPowerInfoEXT {
            sType : STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT,
            pNext : 0 as _,
            powerState : Default::default(),
        }
    }
}
impl ::std::default::Default for DeviceEventInfoEXT {
    fn default() -> DeviceEventInfoEXT {
        DeviceEventInfoEXT {
            sType : STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT,
            pNext : 0 as _,
            deviceEvent : Default::default(),
        }
    }
}
impl ::std::default::Default for DisplayEventInfoEXT {
    fn default() -> DisplayEventInfoEXT {
        DisplayEventInfoEXT {
            sType : STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT,
            pNext : 0 as _,
            displayEvent : Default::default(),
        }
    }
}
impl ::std::default::Default for SwapchainCounterCreateInfoEXT {
    fn default() -> SwapchainCounterCreateInfoEXT {
        SwapchainCounterCreateInfoEXT {
            sType : STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT,
            pNext : 0 as _,
            surfaceCounters : Default::default(),
        }
    }
}
impl ::std::default::Default for RefreshCycleDurationGOOGLE {
    fn default() -> RefreshCycleDurationGOOGLE {
        RefreshCycleDurationGOOGLE {
            refreshDuration : 0 as _,
        }
    }
}
impl ::std::default::Default for PastPresentationTimingGOOGLE {
    fn default() -> PastPresentationTimingGOOGLE {
        PastPresentationTimingGOOGLE {
            presentID : 0 as _,
            desiredPresentTime : 0 as _,
            actualPresentTime : 0 as _,
            earliestPresentTime : 0 as _,
            presentMargin : 0 as _,
        }
    }
}
impl ::std::default::Default for PresentTimeGOOGLE {
    fn default() -> PresentTimeGOOGLE {
        PresentTimeGOOGLE {
            presentID : 0 as _,
            desiredPresentTime : 0 as _,
        }
    }
}
impl ::std::default::Default for PresentTimesInfoGOOGLE {
    fn default() -> PresentTimesInfoGOOGLE {
        PresentTimesInfoGOOGLE {
            sType : STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE,
            pNext : 0 as _,
            swapchainCount : 0 as _,
            pTimes : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    fn default() -> PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
        PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX,
            pNext : 0 as _,
            perViewPositionAllComponents : 0 as _,
        }
    }
}
impl ::std::default::Default for ViewportSwizzleNV {
    fn default() -> ViewportSwizzleNV {
        ViewportSwizzleNV {
            x : Default::default(),
            y : Default::default(),
            z : Default::default(),
            w : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineViewportSwizzleStateCreateInfoNV {
    fn default() -> PipelineViewportSwizzleStateCreateInfoNV {
        PipelineViewportSwizzleStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
            viewportCount : 0 as _,
            pViewportSwizzles : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDiscardRectanglePropertiesEXT {
    fn default() -> PhysicalDeviceDiscardRectanglePropertiesEXT {
        PhysicalDeviceDiscardRectanglePropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT,
            pNext : 0 as _,
            maxDiscardRectangles : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineDiscardRectangleStateCreateInfoEXT {
    fn default() -> PipelineDiscardRectangleStateCreateInfoEXT {
        PipelineDiscardRectangleStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            discardRectangleMode : Default::default(),
            discardRectangleCount : 0 as _,
            pDiscardRectangles : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceConservativeRasterizationPropertiesEXT {
    fn default() -> PhysicalDeviceConservativeRasterizationPropertiesEXT {
        PhysicalDeviceConservativeRasterizationPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT,
            pNext : 0 as _,
            primitiveOverestimationSize : 0 as _,
            maxExtraPrimitiveOverestimationSize : 0 as _,
            extraPrimitiveOverestimationSizeGranularity : 0 as _,
            primitiveUnderestimation : 0 as _,
            conservativePointAndLineRasterization : 0 as _,
            degenerateTrianglesRasterized : 0 as _,
            degenerateLinesRasterized : 0 as _,
            fullyCoveredFragmentShaderInputVariable : 0 as _,
            conservativeRasterizationPostDepthCoverage : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRasterizationConservativeStateCreateInfoEXT {
    fn default() -> PipelineRasterizationConservativeStateCreateInfoEXT {
        PipelineRasterizationConservativeStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            conservativeRasterizationMode : Default::default(),
            extraPrimitiveOverestimationSize : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDepthClipEnableFeaturesEXT {
    fn default() -> PhysicalDeviceDepthClipEnableFeaturesEXT {
        PhysicalDeviceDepthClipEnableFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT,
            pNext : 0 as _,
            depthClipEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRasterizationDepthClipStateCreateInfoEXT {
    fn default() -> PipelineRasterizationDepthClipStateCreateInfoEXT {
        PipelineRasterizationDepthClipStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            depthClipEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for XYColorEXT {
    fn default() -> XYColorEXT {
        XYColorEXT {
            x : 0 as _,
            y : 0 as _,
        }
    }
}
impl ::std::default::Default for HdrMetadataEXT {
    fn default() -> HdrMetadataEXT {
        HdrMetadataEXT {
            sType : STRUCTURE_TYPE_HDR_METADATA_EXT,
            pNext : 0 as _,
            displayPrimaryRed : Default::default(),
            displayPrimaryGreen : Default::default(),
            displayPrimaryBlue : Default::default(),
            whitePoint : Default::default(),
            maxLuminance : 0 as _,
            minLuminance : 0 as _,
            maxContentLightLevel : 0 as _,
            maxFrameAverageLightLevel : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugUtilsLabelEXT {
    fn default() -> DebugUtilsLabelEXT {
        DebugUtilsLabelEXT {
            sType : STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT,
            pNext : 0 as _,
            pLabelName : 0 as _,
            color : [Default::default();4],
        }
    }
}
impl ::std::default::Default for DebugUtilsObjectNameInfoEXT {
    fn default() -> DebugUtilsObjectNameInfoEXT {
        DebugUtilsObjectNameInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT,
            pNext : 0 as _,
            objectType : Default::default(),
            objectHandle : 0 as _,
            pObjectName : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugUtilsMessengerCallbackDataEXT {
    fn default() -> DebugUtilsMessengerCallbackDataEXT {
        DebugUtilsMessengerCallbackDataEXT {
            sType : STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            pMessageIdName : 0 as _,
            messageIdNumber : 0 as _,
            pMessage : 0 as _,
            queueLabelCount : 0 as _,
            pQueueLabels : 0 as _,
            cmdBufLabelCount : 0 as _,
            pCmdBufLabels : 0 as _,
            objectCount : 0 as _,
            pObjects : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugUtilsObjectTagInfoEXT {
    fn default() -> DebugUtilsObjectTagInfoEXT {
        DebugUtilsObjectTagInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT,
            pNext : 0 as _,
            objectType : Default::default(),
            objectHandle : 0 as _,
            tagName : 0 as _,
            tagSize : Default::default(),
            pTag : 0 as _,
        }
    }
}
impl ::std::default::Default for DebugUtilsMessengerCreateInfoEXT {
    fn default() -> DebugUtilsMessengerCreateInfoEXT {
        DebugUtilsMessengerCreateInfoEXT {
            sType : STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            messageSeverity : Default::default(),
            messageType : Default::default(),
            pfnUserCallback : 0 as _,
            pUserData : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceInlineUniformBlockFeaturesEXT {
    fn default() -> PhysicalDeviceInlineUniformBlockFeaturesEXT {
        PhysicalDeviceInlineUniformBlockFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT,
            pNext : 0 as _,
            inlineUniformBlock : 0 as _,
            descriptorBindingInlineUniformBlockUpdateAfterBind : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceInlineUniformBlockPropertiesEXT {
    fn default() -> PhysicalDeviceInlineUniformBlockPropertiesEXT {
        PhysicalDeviceInlineUniformBlockPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT,
            pNext : 0 as _,
            maxInlineUniformBlockSize : 0 as _,
            maxPerStageDescriptorInlineUniformBlocks : 0 as _,
            maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks : 0 as _,
            maxDescriptorSetInlineUniformBlocks : 0 as _,
            maxDescriptorSetUpdateAfterBindInlineUniformBlocks : 0 as _,
        }
    }
}
impl ::std::default::Default for WriteDescriptorSetInlineUniformBlockEXT {
    fn default() -> WriteDescriptorSetInlineUniformBlockEXT {
        WriteDescriptorSetInlineUniformBlockEXT {
            sType : STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT,
            pNext : 0 as _,
            dataSize : 0 as _,
            pData : 0 as _,
        }
    }
}
impl ::std::default::Default for DescriptorPoolInlineUniformBlockCreateInfoEXT {
    fn default() -> DescriptorPoolInlineUniformBlockCreateInfoEXT {
        DescriptorPoolInlineUniformBlockCreateInfoEXT {
            sType : STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT,
            pNext : 0 as _,
            maxInlineUniformBlockBindings : 0 as _,
        }
    }
}
impl ::std::default::Default for SampleLocationEXT {
    fn default() -> SampleLocationEXT {
        SampleLocationEXT {
            x : 0 as _,
            y : 0 as _,
        }
    }
}
impl ::std::default::Default for SampleLocationsInfoEXT {
    fn default() -> SampleLocationsInfoEXT {
        SampleLocationsInfoEXT {
            sType : STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT,
            pNext : 0 as _,
            sampleLocationsPerPixel : Default::default(),
            sampleLocationGridSize : Default::default(),
            sampleLocationsCount : 0 as _,
            pSampleLocations : 0 as _,
        }
    }
}
impl ::std::default::Default for AttachmentSampleLocationsEXT {
    fn default() -> AttachmentSampleLocationsEXT {
        AttachmentSampleLocationsEXT {
            attachmentIndex : 0 as _,
            sampleLocationsInfo : Default::default(),
        }
    }
}
impl ::std::default::Default for SubpassSampleLocationsEXT {
    fn default() -> SubpassSampleLocationsEXT {
        SubpassSampleLocationsEXT {
            subpassIndex : 0 as _,
            sampleLocationsInfo : Default::default(),
        }
    }
}
impl ::std::default::Default for RenderPassSampleLocationsBeginInfoEXT {
    fn default() -> RenderPassSampleLocationsBeginInfoEXT {
        RenderPassSampleLocationsBeginInfoEXT {
            sType : STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT,
            pNext : 0 as _,
            attachmentInitialSampleLocationsCount : 0 as _,
            pAttachmentInitialSampleLocations : 0 as _,
            postSubpassSampleLocationsCount : 0 as _,
            pPostSubpassSampleLocations : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineSampleLocationsStateCreateInfoEXT {
    fn default() -> PipelineSampleLocationsStateCreateInfoEXT {
        PipelineSampleLocationsStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            sampleLocationsEnable : 0 as _,
            sampleLocationsInfo : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSampleLocationsPropertiesEXT {
    fn default() -> PhysicalDeviceSampleLocationsPropertiesEXT {
        PhysicalDeviceSampleLocationsPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT,
            pNext : 0 as _,
            sampleLocationSampleCounts : Default::default(),
            maxSampleLocationGridSize : Default::default(),
            sampleLocationCoordinateRange : [Default::default();2],
            sampleLocationSubPixelBits : 0 as _,
            variableSampleLocations : 0 as _,
        }
    }
}
impl ::std::default::Default for MultisamplePropertiesEXT {
    fn default() -> MultisamplePropertiesEXT {
        MultisamplePropertiesEXT {
            sType : STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT,
            pNext : 0 as _,
            maxSampleLocationGridSize : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    fn default() -> PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
        PhysicalDeviceBlendOperationAdvancedFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT,
            pNext : 0 as _,
            advancedBlendCoherentOperations : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    fn default() -> PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
        PhysicalDeviceBlendOperationAdvancedPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT,
            pNext : 0 as _,
            advancedBlendMaxColorAttachments : 0 as _,
            advancedBlendIndependentBlend : 0 as _,
            advancedBlendNonPremultipliedSrcColor : 0 as _,
            advancedBlendNonPremultipliedDstColor : 0 as _,
            advancedBlendCorrelatedOverlap : 0 as _,
            advancedBlendAllOperations : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineColorBlendAdvancedStateCreateInfoEXT {
    fn default() -> PipelineColorBlendAdvancedStateCreateInfoEXT {
        PipelineColorBlendAdvancedStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            srcPremultiplied : 0 as _,
            dstPremultiplied : 0 as _,
            blendOverlap : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineCoverageToColorStateCreateInfoNV {
    fn default() -> PipelineCoverageToColorStateCreateInfoNV {
        PipelineCoverageToColorStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
            coverageToColorEnable : 0 as _,
            coverageToColorLocation : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineCoverageModulationStateCreateInfoNV {
    fn default() -> PipelineCoverageModulationStateCreateInfoNV {
        PipelineCoverageModulationStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
            coverageModulationMode : Default::default(),
            coverageModulationTableEnable : 0 as _,
            coverageModulationTableCount : 0 as _,
            pCoverageModulationTable : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderSMBuiltinsPropertiesNV {
    fn default() -> PhysicalDeviceShaderSMBuiltinsPropertiesNV {
        PhysicalDeviceShaderSMBuiltinsPropertiesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV,
            pNext : 0 as _,
            shaderSMCount : 0 as _,
            shaderWarpsPerSM : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderSMBuiltinsFeaturesNV {
    fn default() -> PhysicalDeviceShaderSMBuiltinsFeaturesNV {
        PhysicalDeviceShaderSMBuiltinsFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV,
            pNext : 0 as _,
            shaderSMBuiltins : 0 as _,
        }
    }
}
impl ::std::default::Default for DrmFormatModifierPropertiesEXT {
    fn default() -> DrmFormatModifierPropertiesEXT {
        DrmFormatModifierPropertiesEXT {
            drmFormatModifier : 0 as _,
            drmFormatModifierPlaneCount : 0 as _,
            drmFormatModifierTilingFeatures : Default::default(),
        }
    }
}
impl ::std::default::Default for DrmFormatModifierPropertiesListEXT {
    fn default() -> DrmFormatModifierPropertiesListEXT {
        DrmFormatModifierPropertiesListEXT {
            sType : STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT,
            pNext : 0 as _,
            drmFormatModifierCount : 0 as _,
            pDrmFormatModifierProperties : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceImageDrmFormatModifierInfoEXT {
    fn default() -> PhysicalDeviceImageDrmFormatModifierInfoEXT {
        PhysicalDeviceImageDrmFormatModifierInfoEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT,
            pNext : 0 as _,
            drmFormatModifier : 0 as _,
            sharingMode : Default::default(),
            queueFamilyIndexCount : 0 as _,
            pQueueFamilyIndices : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageDrmFormatModifierListCreateInfoEXT {
    fn default() -> ImageDrmFormatModifierListCreateInfoEXT {
        ImageDrmFormatModifierListCreateInfoEXT {
            sType : STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT,
            pNext : 0 as _,
            drmFormatModifierCount : 0 as _,
            pDrmFormatModifiers : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageDrmFormatModifierExplicitCreateInfoEXT {
    fn default() -> ImageDrmFormatModifierExplicitCreateInfoEXT {
        ImageDrmFormatModifierExplicitCreateInfoEXT {
            sType : STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT,
            pNext : 0 as _,
            drmFormatModifier : 0 as _,
            drmFormatModifierPlaneCount : 0 as _,
            pPlaneLayouts : 0 as _,
        }
    }
}
impl ::std::default::Default for ImageDrmFormatModifierPropertiesEXT {
    fn default() -> ImageDrmFormatModifierPropertiesEXT {
        ImageDrmFormatModifierPropertiesEXT {
            sType : STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT,
            pNext : 0 as _,
            drmFormatModifier : 0 as _,
        }
    }
}
impl ::std::default::Default for ValidationCacheCreateInfoEXT {
    fn default() -> ValidationCacheCreateInfoEXT {
        ValidationCacheCreateInfoEXT {
            sType : STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
            initialDataSize : Default::default(),
            pInitialData : 0 as _,
        }
    }
}
impl ::std::default::Default for ShaderModuleValidationCacheCreateInfoEXT {
    fn default() -> ShaderModuleValidationCacheCreateInfoEXT {
        ShaderModuleValidationCacheCreateInfoEXT {
            sType : STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT,
            pNext : 0 as _,
            validationCache : Default::default(),
        }
    }
}
impl ::std::default::Default for ShadingRatePaletteNV {
    fn default() -> ShadingRatePaletteNV {
        ShadingRatePaletteNV {
            shadingRatePaletteEntryCount : 0 as _,
            pShadingRatePaletteEntries : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineViewportShadingRateImageStateCreateInfoNV {
    fn default() -> PipelineViewportShadingRateImageStateCreateInfoNV {
        PipelineViewportShadingRateImageStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            shadingRateImageEnable : 0 as _,
            viewportCount : 0 as _,
            pShadingRatePalettes : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShadingRateImageFeaturesNV {
    fn default() -> PhysicalDeviceShadingRateImageFeaturesNV {
        PhysicalDeviceShadingRateImageFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV,
            pNext : 0 as _,
            shadingRateImage : 0 as _,
            shadingRateCoarseSampleOrder : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShadingRateImagePropertiesNV {
    fn default() -> PhysicalDeviceShadingRateImagePropertiesNV {
        PhysicalDeviceShadingRateImagePropertiesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV,
            pNext : 0 as _,
            shadingRateTexelSize : Default::default(),
            shadingRatePaletteSize : 0 as _,
            shadingRateMaxCoarseSamples : 0 as _,
        }
    }
}
impl ::std::default::Default for CoarseSampleLocationNV {
    fn default() -> CoarseSampleLocationNV {
        CoarseSampleLocationNV {
            pixelX : 0 as _,
            pixelY : 0 as _,
            sample : 0 as _,
        }
    }
}
impl ::std::default::Default for CoarseSampleOrderCustomNV {
    fn default() -> CoarseSampleOrderCustomNV {
        CoarseSampleOrderCustomNV {
            shadingRate : Default::default(),
            sampleCount : 0 as _,
            sampleLocationCount : 0 as _,
            pSampleLocations : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineViewportCoarseSampleOrderStateCreateInfoNV {
    fn default() -> PipelineViewportCoarseSampleOrderStateCreateInfoNV {
        PipelineViewportCoarseSampleOrderStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            sampleOrderType : Default::default(),
            customSampleOrderCount : 0 as _,
            pCustomSampleOrders : 0 as _,
        }
    }
}
impl ::std::default::Default for RayTracingShaderGroupCreateInfoNV {
    fn default() -> RayTracingShaderGroupCreateInfoNV {
        RayTracingShaderGroupCreateInfoNV {
            sType : STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV,
            pNext : 0 as _,
            r#type : Default::default(),
            generalShader : 0 as _,
            closestHitShader : 0 as _,
            anyHitShader : 0 as _,
            intersectionShader : 0 as _,
        }
    }
}
impl ::std::default::Default for RayTracingPipelineCreateInfoNV {
    fn default() -> RayTracingPipelineCreateInfoNV {
        RayTracingPipelineCreateInfoNV {
            sType : STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
            stageCount : 0 as _,
            pStages : 0 as _,
            groupCount : 0 as _,
            pGroups : 0 as _,
            maxRecursionDepth : 0 as _,
            layout : Default::default(),
            basePipelineHandle : Default::default(),
            basePipelineIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for GeometryTrianglesNV {
    fn default() -> GeometryTrianglesNV {
        GeometryTrianglesNV {
            sType : STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV,
            pNext : 0 as _,
            vertexData : Default::default(),
            vertexOffset : Default::default(),
            vertexCount : 0 as _,
            vertexStride : Default::default(),
            vertexFormat : Default::default(),
            indexData : Default::default(),
            indexOffset : Default::default(),
            indexCount : 0 as _,
            indexType : Default::default(),
            transformData : Default::default(),
            transformOffset : Default::default(),
        }
    }
}
impl ::std::default::Default for GeometryAABBNV {
    fn default() -> GeometryAABBNV {
        GeometryAABBNV {
            sType : STRUCTURE_TYPE_GEOMETRY_AABB_NV,
            pNext : 0 as _,
            aabbData : Default::default(),
            numAABBs : 0 as _,
            stride : 0 as _,
            offset : Default::default(),
        }
    }
}
impl ::std::default::Default for GeometryDataNV {
    fn default() -> GeometryDataNV {
        GeometryDataNV {
            triangles : Default::default(),
            aabbs : Default::default(),
        }
    }
}
impl ::std::default::Default for GeometryNV {
    fn default() -> GeometryNV {
        GeometryNV {
            sType : STRUCTURE_TYPE_GEOMETRY_NV,
            pNext : 0 as _,
            geometryType : Default::default(),
            geometry : Default::default(),
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for AccelerationStructureInfoNV {
    fn default() -> AccelerationStructureInfoNV {
        AccelerationStructureInfoNV {
            sType : STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV,
            pNext : 0 as _,
            r#type : Default::default(),
            flags : Default::default(),
            instanceCount : 0 as _,
            geometryCount : 0 as _,
            pGeometries : 0 as _,
        }
    }
}
impl ::std::default::Default for AccelerationStructureCreateInfoNV {
    fn default() -> AccelerationStructureCreateInfoNV {
        AccelerationStructureCreateInfoNV {
            sType : STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV,
            pNext : 0 as _,
            compactedSize : Default::default(),
            info : Default::default(),
        }
    }
}
impl ::std::default::Default for BindAccelerationStructureMemoryInfoKHR {
    fn default() -> BindAccelerationStructureMemoryInfoKHR {
        BindAccelerationStructureMemoryInfoKHR {
            sType : STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_KHR,
            pNext : 0 as _,
            accelerationStructure : Default::default(),
            memory : Default::default(),
            memoryOffset : Default::default(),
            deviceIndexCount : 0 as _,
            pDeviceIndices : 0 as _,
        }
    }
}
impl ::std::default::Default for WriteDescriptorSetAccelerationStructureKHR {
    fn default() -> WriteDescriptorSetAccelerationStructureKHR {
        WriteDescriptorSetAccelerationStructureKHR {
            sType : STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR,
            pNext : 0 as _,
            accelerationStructureCount : 0 as _,
            pAccelerationStructures : 0 as _,
        }
    }
}
impl ::std::default::Default for AccelerationStructureMemoryRequirementsInfoNV {
    fn default() -> AccelerationStructureMemoryRequirementsInfoNV {
        AccelerationStructureMemoryRequirementsInfoNV {
            sType : STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV,
            pNext : 0 as _,
            r#type : Default::default(),
            accelerationStructure : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceRayTracingPropertiesNV {
    fn default() -> PhysicalDeviceRayTracingPropertiesNV {
        PhysicalDeviceRayTracingPropertiesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV,
            pNext : 0 as _,
            shaderGroupHandleSize : 0 as _,
            maxRecursionDepth : 0 as _,
            maxShaderGroupStride : 0 as _,
            shaderGroupBaseAlignment : 0 as _,
            maxGeometryCount : 0 as _,
            maxInstanceCount : 0 as _,
            maxTriangleCount : 0 as _,
            maxDescriptorSetAccelerationStructures : 0 as _,
        }
    }
}
impl ::std::default::Default for TransformMatrixKHR {
    fn default() -> TransformMatrixKHR {
        TransformMatrixKHR {
            matrix : [Default::default();12],
        }
    }
}
impl ::std::default::Default for AabbPositionsKHR {
    fn default() -> AabbPositionsKHR {
        AabbPositionsKHR {
            minX : 0 as _,
            minY : 0 as _,
            minZ : 0 as _,
            maxX : 0 as _,
            maxY : 0 as _,
            maxZ : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    fn default() -> PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
        PhysicalDeviceRepresentativeFragmentTestFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV,
            pNext : 0 as _,
            representativeFragmentTest : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRepresentativeFragmentTestStateCreateInfoNV {
    fn default() -> PipelineRepresentativeFragmentTestStateCreateInfoNV {
        PipelineRepresentativeFragmentTestStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            representativeFragmentTestEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceImageViewImageFormatInfoEXT {
    fn default() -> PhysicalDeviceImageViewImageFormatInfoEXT {
        PhysicalDeviceImageViewImageFormatInfoEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT,
            pNext : 0 as _,
            imageViewType : Default::default(),
        }
    }
}
impl ::std::default::Default for FilterCubicImageViewImageFormatPropertiesEXT {
    fn default() -> FilterCubicImageViewImageFormatPropertiesEXT {
        FilterCubicImageViewImageFormatPropertiesEXT {
            sType : STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT,
            pNext : 0 as _,
            filterCubic : 0 as _,
            filterCubicMinmax : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceQueueGlobalPriorityCreateInfoEXT {
    fn default() -> DeviceQueueGlobalPriorityCreateInfoEXT {
        DeviceQueueGlobalPriorityCreateInfoEXT {
            sType : STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT,
            pNext : 0 as _,
            globalPriority : Default::default(),
        }
    }
}
impl ::std::default::Default for ImportMemoryHostPointerInfoEXT {
    fn default() -> ImportMemoryHostPointerInfoEXT {
        ImportMemoryHostPointerInfoEXT {
            sType : STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT,
            pNext : 0 as _,
            handleType : Default::default(),
            pHostPointer : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryHostPointerPropertiesEXT {
    fn default() -> MemoryHostPointerPropertiesEXT {
        MemoryHostPointerPropertiesEXT {
            sType : STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT,
            pNext : 0 as _,
            memoryTypeBits : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceExternalMemoryHostPropertiesEXT {
    fn default() -> PhysicalDeviceExternalMemoryHostPropertiesEXT {
        PhysicalDeviceExternalMemoryHostPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT,
            pNext : 0 as _,
            minImportedHostPointerAlignment : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineCompilerControlCreateInfoAMD {
    fn default() -> PipelineCompilerControlCreateInfoAMD {
        PipelineCompilerControlCreateInfoAMD {
            sType : STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD,
            pNext : 0 as _,
            compilerControlFlags : Default::default(),
        }
    }
}
impl ::std::default::Default for CalibratedTimestampInfoEXT {
    fn default() -> CalibratedTimestampInfoEXT {
        CalibratedTimestampInfoEXT {
            sType : STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT,
            pNext : 0 as _,
            timeDomain : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderCorePropertiesAMD {
    fn default() -> PhysicalDeviceShaderCorePropertiesAMD {
        PhysicalDeviceShaderCorePropertiesAMD {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD,
            pNext : 0 as _,
            shaderEngineCount : 0 as _,
            shaderArraysPerEngineCount : 0 as _,
            computeUnitsPerShaderArray : 0 as _,
            simdPerComputeUnit : 0 as _,
            wavefrontsPerSimd : 0 as _,
            wavefrontSize : 0 as _,
            sgprsPerSimd : 0 as _,
            minSgprAllocation : 0 as _,
            maxSgprAllocation : 0 as _,
            sgprAllocationGranularity : 0 as _,
            vgprsPerSimd : 0 as _,
            minVgprAllocation : 0 as _,
            maxVgprAllocation : 0 as _,
            vgprAllocationGranularity : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceMemoryOverallocationCreateInfoAMD {
    fn default() -> DeviceMemoryOverallocationCreateInfoAMD {
        DeviceMemoryOverallocationCreateInfoAMD {
            sType : STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD,
            pNext : 0 as _,
            overallocationBehavior : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    fn default() -> PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
        PhysicalDeviceVertexAttributeDivisorPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT,
            pNext : 0 as _,
            maxVertexAttribDivisor : 0 as _,
        }
    }
}
impl ::std::default::Default for VertexInputBindingDivisorDescriptionEXT {
    fn default() -> VertexInputBindingDivisorDescriptionEXT {
        VertexInputBindingDivisorDescriptionEXT {
            binding : 0 as _,
            divisor : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineVertexInputDivisorStateCreateInfoEXT {
    fn default() -> PipelineVertexInputDivisorStateCreateInfoEXT {
        PipelineVertexInputDivisorStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            vertexBindingDivisorCount : 0 as _,
            pVertexBindingDivisors : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    fn default() -> PhysicalDeviceVertexAttributeDivisorFeaturesEXT {
        PhysicalDeviceVertexAttributeDivisorFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT,
            pNext : 0 as _,
            vertexAttributeInstanceRateDivisor : 0 as _,
            vertexAttributeInstanceRateZeroDivisor : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineCreationFeedbackEXT {
    fn default() -> PipelineCreationFeedbackEXT {
        PipelineCreationFeedbackEXT {
            flags : Default::default(),
            duration : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineCreationFeedbackCreateInfoEXT {
    fn default() -> PipelineCreationFeedbackCreateInfoEXT {
        PipelineCreationFeedbackCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT,
            pNext : 0 as _,
            pPipelineCreationFeedback : 0 as _,
            pipelineStageCreationFeedbackCount : 0 as _,
            pPipelineStageCreationFeedbacks : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceComputeShaderDerivativesFeaturesNV {
    fn default() -> PhysicalDeviceComputeShaderDerivativesFeaturesNV {
        PhysicalDeviceComputeShaderDerivativesFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV,
            pNext : 0 as _,
            computeDerivativeGroupQuads : 0 as _,
            computeDerivativeGroupLinear : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMeshShaderFeaturesNV {
    fn default() -> PhysicalDeviceMeshShaderFeaturesNV {
        PhysicalDeviceMeshShaderFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV,
            pNext : 0 as _,
            taskShader : 0 as _,
            meshShader : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMeshShaderPropertiesNV {
    fn default() -> PhysicalDeviceMeshShaderPropertiesNV {
        PhysicalDeviceMeshShaderPropertiesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV,
            pNext : 0 as _,
            maxDrawMeshTasksCount : 0 as _,
            maxTaskWorkGroupInvocations : 0 as _,
            maxTaskWorkGroupSize : [Default::default();3],
            maxTaskTotalMemorySize : 0 as _,
            maxTaskOutputCount : 0 as _,
            maxMeshWorkGroupInvocations : 0 as _,
            maxMeshWorkGroupSize : [Default::default();3],
            maxMeshTotalMemorySize : 0 as _,
            maxMeshOutputVertices : 0 as _,
            maxMeshOutputPrimitives : 0 as _,
            maxMeshMultiviewViewCount : 0 as _,
            meshOutputPerVertexGranularity : 0 as _,
            meshOutputPerPrimitiveGranularity : 0 as _,
        }
    }
}
impl ::std::default::Default for DrawMeshTasksIndirectCommandNV {
    fn default() -> DrawMeshTasksIndirectCommandNV {
        DrawMeshTasksIndirectCommandNV {
            taskCount : 0 as _,
            firstTask : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    fn default() -> PhysicalDeviceFragmentShaderBarycentricFeaturesNV {
        PhysicalDeviceFragmentShaderBarycentricFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV,
            pNext : 0 as _,
            fragmentShaderBarycentric : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderImageFootprintFeaturesNV {
    fn default() -> PhysicalDeviceShaderImageFootprintFeaturesNV {
        PhysicalDeviceShaderImageFootprintFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV,
            pNext : 0 as _,
            imageFootprint : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineViewportExclusiveScissorStateCreateInfoNV {
    fn default() -> PipelineViewportExclusiveScissorStateCreateInfoNV {
        PipelineViewportExclusiveScissorStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            exclusiveScissorCount : 0 as _,
            pExclusiveScissors : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceExclusiveScissorFeaturesNV {
    fn default() -> PhysicalDeviceExclusiveScissorFeaturesNV {
        PhysicalDeviceExclusiveScissorFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV,
            pNext : 0 as _,
            exclusiveScissor : 0 as _,
        }
    }
}
impl ::std::default::Default for QueueFamilyCheckpointPropertiesNV {
    fn default() -> QueueFamilyCheckpointPropertiesNV {
        QueueFamilyCheckpointPropertiesNV {
            sType : STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV,
            pNext : 0 as _,
            checkpointExecutionStageMask : Default::default(),
        }
    }
}
impl ::std::default::Default for CheckpointDataNV {
    fn default() -> CheckpointDataNV {
        CheckpointDataNV {
            sType : STRUCTURE_TYPE_CHECKPOINT_DATA_NV,
            pNext : 0 as _,
            stage : Default::default(),
            pCheckpointMarker : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    fn default() -> PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
        PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL,
            pNext : 0 as _,
            shaderIntegerFunctions2 : 0 as _,
        }
    }
}
impl ::std::default::Default for InitializePerformanceApiInfoINTEL {
    fn default() -> InitializePerformanceApiInfoINTEL {
        InitializePerformanceApiInfoINTEL {
            sType : STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL,
            pNext : 0 as _,
            pUserData : 0 as _,
        }
    }
}
impl ::std::default::Default for QueryPoolPerformanceQueryCreateInfoINTEL {
    fn default() -> QueryPoolPerformanceQueryCreateInfoINTEL {
        QueryPoolPerformanceQueryCreateInfoINTEL {
            sType : STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
            pNext : 0 as _,
            performanceCountersSampling : Default::default(),
        }
    }
}
impl ::std::default::Default for PerformanceMarkerInfoINTEL {
    fn default() -> PerformanceMarkerInfoINTEL {
        PerformanceMarkerInfoINTEL {
            sType : STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL,
            pNext : 0 as _,
            marker : 0 as _,
        }
    }
}
impl ::std::default::Default for PerformanceStreamMarkerInfoINTEL {
    fn default() -> PerformanceStreamMarkerInfoINTEL {
        PerformanceStreamMarkerInfoINTEL {
            sType : STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL,
            pNext : 0 as _,
            marker : 0 as _,
        }
    }
}
impl ::std::default::Default for PerformanceOverrideInfoINTEL {
    fn default() -> PerformanceOverrideInfoINTEL {
        PerformanceOverrideInfoINTEL {
            sType : STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL,
            pNext : 0 as _,
            r#type : Default::default(),
            enable : 0 as _,
            parameter : 0 as _,
        }
    }
}
impl ::std::default::Default for PerformanceConfigurationAcquireInfoINTEL {
    fn default() -> PerformanceConfigurationAcquireInfoINTEL {
        PerformanceConfigurationAcquireInfoINTEL {
            sType : STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL,
            pNext : 0 as _,
            r#type : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDevicePCIBusInfoPropertiesEXT {
    fn default() -> PhysicalDevicePCIBusInfoPropertiesEXT {
        PhysicalDevicePCIBusInfoPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT,
            pNext : 0 as _,
            pciDomain : 0 as _,
            pciBus : 0 as _,
            pciDevice : 0 as _,
            pciFunction : 0 as _,
        }
    }
}
impl ::std::default::Default for DisplayNativeHdrSurfaceCapabilitiesAMD {
    fn default() -> DisplayNativeHdrSurfaceCapabilitiesAMD {
        DisplayNativeHdrSurfaceCapabilitiesAMD {
            sType : STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD,
            pNext : 0 as _,
            localDimmingSupport : 0 as _,
        }
    }
}
impl ::std::default::Default for SwapchainDisplayNativeHdrCreateInfoAMD {
    fn default() -> SwapchainDisplayNativeHdrCreateInfoAMD {
        SwapchainDisplayNativeHdrCreateInfoAMD {
            sType : STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD,
            pNext : 0 as _,
            localDimmingEnable : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFragmentDensityMapFeaturesEXT {
    fn default() -> PhysicalDeviceFragmentDensityMapFeaturesEXT {
        PhysicalDeviceFragmentDensityMapFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT,
            pNext : 0 as _,
            fragmentDensityMap : 0 as _,
            fragmentDensityMapDynamic : 0 as _,
            fragmentDensityMapNonSubsampledImages : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFragmentDensityMapPropertiesEXT {
    fn default() -> PhysicalDeviceFragmentDensityMapPropertiesEXT {
        PhysicalDeviceFragmentDensityMapPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT,
            pNext : 0 as _,
            minFragmentDensityTexelSize : Default::default(),
            maxFragmentDensityTexelSize : Default::default(),
            fragmentDensityInvocations : 0 as _,
        }
    }
}
impl ::std::default::Default for RenderPassFragmentDensityMapCreateInfoEXT {
    fn default() -> RenderPassFragmentDensityMapCreateInfoEXT {
        RenderPassFragmentDensityMapCreateInfoEXT {
            sType : STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT,
            pNext : 0 as _,
            fragmentDensityMapAttachment : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSubgroupSizeControlFeaturesEXT {
    fn default() -> PhysicalDeviceSubgroupSizeControlFeaturesEXT {
        PhysicalDeviceSubgroupSizeControlFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT,
            pNext : 0 as _,
            subgroupSizeControl : 0 as _,
            computeFullSubgroups : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceSubgroupSizeControlPropertiesEXT {
    fn default() -> PhysicalDeviceSubgroupSizeControlPropertiesEXT {
        PhysicalDeviceSubgroupSizeControlPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT,
            pNext : 0 as _,
            minSubgroupSize : 0 as _,
            maxSubgroupSize : 0 as _,
            maxComputeWorkgroupSubgroups : 0 as _,
            requiredSubgroupSizeStages : Default::default(),
        }
    }
}
impl ::std::default::Default for PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
    fn default() -> PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
        PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT,
            pNext : 0 as _,
            requiredSubgroupSize : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderCoreProperties2AMD {
    fn default() -> PhysicalDeviceShaderCoreProperties2AMD {
        PhysicalDeviceShaderCoreProperties2AMD {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD,
            pNext : 0 as _,
            shaderCoreFeatures : Default::default(),
            activeComputeUnitCount : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCoherentMemoryFeaturesAMD {
    fn default() -> PhysicalDeviceCoherentMemoryFeaturesAMD {
        PhysicalDeviceCoherentMemoryFeaturesAMD {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD,
            pNext : 0 as _,
            deviceCoherentMemory : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMemoryBudgetPropertiesEXT {
    fn default() -> PhysicalDeviceMemoryBudgetPropertiesEXT {
        PhysicalDeviceMemoryBudgetPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT,
            pNext : 0 as _,
            heapBudget : [Default::default();MAX_MEMORY_HEAPS],
            heapUsage : [Default::default();MAX_MEMORY_HEAPS],
        }
    }
}
impl ::std::default::Default for PhysicalDeviceMemoryPriorityFeaturesEXT {
    fn default() -> PhysicalDeviceMemoryPriorityFeaturesEXT {
        PhysicalDeviceMemoryPriorityFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT,
            pNext : 0 as _,
            memoryPriority : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryPriorityAllocateInfoEXT {
    fn default() -> MemoryPriorityAllocateInfoEXT {
        MemoryPriorityAllocateInfoEXT {
            sType : STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT,
            pNext : 0 as _,
            priority : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    fn default() -> PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
        PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV,
            pNext : 0 as _,
            dedicatedAllocationImageAliasing : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceBufferDeviceAddressFeaturesEXT {
    fn default() -> PhysicalDeviceBufferDeviceAddressFeaturesEXT {
        PhysicalDeviceBufferDeviceAddressFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
            pNext : 0 as _,
            bufferDeviceAddress : 0 as _,
            bufferDeviceAddressCaptureReplay : 0 as _,
            bufferDeviceAddressMultiDevice : 0 as _,
        }
    }
}
impl ::std::default::Default for BufferDeviceAddressCreateInfoEXT {
    fn default() -> BufferDeviceAddressCreateInfoEXT {
        BufferDeviceAddressCreateInfoEXT {
            sType : STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT,
            pNext : 0 as _,
            deviceAddress : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceToolPropertiesEXT {
    fn default() -> PhysicalDeviceToolPropertiesEXT {
        PhysicalDeviceToolPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT,
            pNext : 0 as _,
            name : [Default::default();MAX_EXTENSION_NAME_SIZE],
            version : [Default::default();MAX_EXTENSION_NAME_SIZE],
            purposes : Default::default(),
            description : [Default::default();MAX_DESCRIPTION_SIZE],
            layer : [Default::default();MAX_EXTENSION_NAME_SIZE],
        }
    }
}
impl ::std::default::Default for ValidationFeaturesEXT {
    fn default() -> ValidationFeaturesEXT {
        ValidationFeaturesEXT {
            sType : STRUCTURE_TYPE_VALIDATION_FEATURES_EXT,
            pNext : 0 as _,
            enabledValidationFeatureCount : 0 as _,
            pEnabledValidationFeatures : 0 as _,
            disabledValidationFeatureCount : 0 as _,
            pDisabledValidationFeatures : 0 as _,
        }
    }
}
impl ::std::default::Default for CooperativeMatrixPropertiesNV {
    fn default() -> CooperativeMatrixPropertiesNV {
        CooperativeMatrixPropertiesNV {
            sType : STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV,
            pNext : 0 as _,
            MSize : 0 as _,
            NSize : 0 as _,
            KSize : 0 as _,
            AType : Default::default(),
            BType : Default::default(),
            CType : Default::default(),
            DType : Default::default(),
            scope : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCooperativeMatrixFeaturesNV {
    fn default() -> PhysicalDeviceCooperativeMatrixFeaturesNV {
        PhysicalDeviceCooperativeMatrixFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV,
            pNext : 0 as _,
            cooperativeMatrix : 0 as _,
            cooperativeMatrixRobustBufferAccess : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCooperativeMatrixPropertiesNV {
    fn default() -> PhysicalDeviceCooperativeMatrixPropertiesNV {
        PhysicalDeviceCooperativeMatrixPropertiesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV,
            pNext : 0 as _,
            cooperativeMatrixSupportedStages : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCoverageReductionModeFeaturesNV {
    fn default() -> PhysicalDeviceCoverageReductionModeFeaturesNV {
        PhysicalDeviceCoverageReductionModeFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV,
            pNext : 0 as _,
            coverageReductionMode : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineCoverageReductionStateCreateInfoNV {
    fn default() -> PipelineCoverageReductionStateCreateInfoNV {
        PipelineCoverageReductionStateCreateInfoNV {
            sType : STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
            coverageReductionMode : Default::default(),
        }
    }
}
impl ::std::default::Default for FramebufferMixedSamplesCombinationNV {
    fn default() -> FramebufferMixedSamplesCombinationNV {
        FramebufferMixedSamplesCombinationNV {
            sType : STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV,
            pNext : 0 as _,
            coverageReductionMode : Default::default(),
            rasterizationSamples : Default::default(),
            depthStencilSamples : Default::default(),
            colorSamples : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    fn default() -> PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
        PhysicalDeviceFragmentShaderInterlockFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT,
            pNext : 0 as _,
            fragmentShaderSampleInterlock : 0 as _,
            fragmentShaderPixelInterlock : 0 as _,
            fragmentShaderShadingRateInterlock : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceYcbcrImageArraysFeaturesEXT {
    fn default() -> PhysicalDeviceYcbcrImageArraysFeaturesEXT {
        PhysicalDeviceYcbcrImageArraysFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT,
            pNext : 0 as _,
            ycbcrImageArrays : 0 as _,
        }
    }
}
impl ::std::default::Default for HeadlessSurfaceCreateInfoEXT {
    fn default() -> HeadlessSurfaceCreateInfoEXT {
        HeadlessSurfaceCreateInfoEXT {
            sType : STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceLineRasterizationFeaturesEXT {
    fn default() -> PhysicalDeviceLineRasterizationFeaturesEXT {
        PhysicalDeviceLineRasterizationFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT,
            pNext : 0 as _,
            rectangularLines : 0 as _,
            bresenhamLines : 0 as _,
            smoothLines : 0 as _,
            stippledRectangularLines : 0 as _,
            stippledBresenhamLines : 0 as _,
            stippledSmoothLines : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceLineRasterizationPropertiesEXT {
    fn default() -> PhysicalDeviceLineRasterizationPropertiesEXT {
        PhysicalDeviceLineRasterizationPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT,
            pNext : 0 as _,
            lineSubPixelPrecisionBits : 0 as _,
        }
    }
}
impl ::std::default::Default for PipelineRasterizationLineStateCreateInfoEXT {
    fn default() -> PipelineRasterizationLineStateCreateInfoEXT {
        PipelineRasterizationLineStateCreateInfoEXT {
            sType : STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT,
            pNext : 0 as _,
            lineRasterizationMode : Default::default(),
            stippledLineEnable : 0 as _,
            lineStippleFactor : 0 as _,
            lineStipplePattern : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceIndexTypeUint8FeaturesEXT {
    fn default() -> PhysicalDeviceIndexTypeUint8FeaturesEXT {
        PhysicalDeviceIndexTypeUint8FeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT,
            pNext : 0 as _,
            indexTypeUint8 : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
    fn default() -> PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
        PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT,
            pNext : 0 as _,
            shaderDemoteToHelperInvocation : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    fn default() -> PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
        PhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV,
            pNext : 0 as _,
            maxGraphicsShaderGroupCount : 0 as _,
            maxIndirectSequenceCount : 0 as _,
            maxIndirectCommandsTokenCount : 0 as _,
            maxIndirectCommandsStreamCount : 0 as _,
            maxIndirectCommandsTokenOffset : 0 as _,
            maxIndirectCommandsStreamStride : 0 as _,
            minSequencesCountBufferOffsetAlignment : 0 as _,
            minSequencesIndexBufferOffsetAlignment : 0 as _,
            minIndirectCommandsBufferOffsetAlignment : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    fn default() -> PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
        PhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV,
            pNext : 0 as _,
            deviceGeneratedCommands : 0 as _,
        }
    }
}
impl ::std::default::Default for GraphicsShaderGroupCreateInfoNV {
    fn default() -> GraphicsShaderGroupCreateInfoNV {
        GraphicsShaderGroupCreateInfoNV {
            sType : STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV,
            pNext : 0 as _,
            stageCount : 0 as _,
            pStages : 0 as _,
            pVertexInputState : 0 as _,
            pTessellationState : 0 as _,
        }
    }
}
impl ::std::default::Default for GraphicsPipelineShaderGroupsCreateInfoNV {
    fn default() -> GraphicsPipelineShaderGroupsCreateInfoNV {
        GraphicsPipelineShaderGroupsCreateInfoNV {
            sType : STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV,
            pNext : 0 as _,
            groupCount : 0 as _,
            pGroups : 0 as _,
            pipelineCount : 0 as _,
            pPipelines : 0 as _,
        }
    }
}
impl ::std::default::Default for BindShaderGroupIndirectCommandNV {
    fn default() -> BindShaderGroupIndirectCommandNV {
        BindShaderGroupIndirectCommandNV {
            groupIndex : 0 as _,
        }
    }
}
impl ::std::default::Default for BindIndexBufferIndirectCommandNV {
    fn default() -> BindIndexBufferIndirectCommandNV {
        BindIndexBufferIndirectCommandNV {
            bufferAddress : Default::default(),
            size : 0 as _,
            indexType : Default::default(),
        }
    }
}
impl ::std::default::Default for BindVertexBufferIndirectCommandNV {
    fn default() -> BindVertexBufferIndirectCommandNV {
        BindVertexBufferIndirectCommandNV {
            bufferAddress : Default::default(),
            size : 0 as _,
            stride : 0 as _,
        }
    }
}
impl ::std::default::Default for SetStateFlagsIndirectCommandNV {
    fn default() -> SetStateFlagsIndirectCommandNV {
        SetStateFlagsIndirectCommandNV {
            data : 0 as _,
        }
    }
}
impl ::std::default::Default for IndirectCommandsStreamNV {
    fn default() -> IndirectCommandsStreamNV {
        IndirectCommandsStreamNV {
            buffer : Default::default(),
            offset : Default::default(),
        }
    }
}
impl ::std::default::Default for IndirectCommandsLayoutTokenNV {
    fn default() -> IndirectCommandsLayoutTokenNV {
        IndirectCommandsLayoutTokenNV {
            sType : STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV,
            pNext : 0 as _,
            tokenType : Default::default(),
            stream : 0 as _,
            offset : 0 as _,
            vertexBindingUnit : 0 as _,
            vertexDynamicStride : 0 as _,
            pushconstantPipelineLayout : Default::default(),
            pushconstantShaderStageFlags : Default::default(),
            pushconstantOffset : 0 as _,
            pushconstantSize : 0 as _,
            indirectStateFlags : Default::default(),
            indexTypeCount : 0 as _,
            pIndexTypes : 0 as _,
            pIndexTypeValues : 0 as _,
        }
    }
}
impl ::std::default::Default for IndirectCommandsLayoutCreateInfoNV {
    fn default() -> IndirectCommandsLayoutCreateInfoNV {
        IndirectCommandsLayoutCreateInfoNV {
            sType : STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
            pipelineBindPoint : Default::default(),
            tokenCount : 0 as _,
            pTokens : 0 as _,
            streamCount : 0 as _,
            pStreamStrides : 0 as _,
        }
    }
}
impl ::std::default::Default for GeneratedCommandsInfoNV {
    fn default() -> GeneratedCommandsInfoNV {
        GeneratedCommandsInfoNV {
            sType : STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV,
            pNext : 0 as _,
            pipelineBindPoint : Default::default(),
            pipeline : Default::default(),
            indirectCommandsLayout : Default::default(),
            streamCount : 0 as _,
            pStreams : 0 as _,
            sequencesCount : 0 as _,
            preprocessBuffer : Default::default(),
            preprocessOffset : Default::default(),
            preprocessSize : Default::default(),
            sequencesCountBuffer : Default::default(),
            sequencesCountOffset : Default::default(),
            sequencesIndexBuffer : Default::default(),
            sequencesIndexOffset : Default::default(),
        }
    }
}
impl ::std::default::Default for GeneratedCommandsMemoryRequirementsInfoNV {
    fn default() -> GeneratedCommandsMemoryRequirementsInfoNV {
        GeneratedCommandsMemoryRequirementsInfoNV {
            sType : STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV,
            pNext : 0 as _,
            pipelineBindPoint : Default::default(),
            pipeline : Default::default(),
            indirectCommandsLayout : Default::default(),
            maxSequencesCount : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    fn default() -> PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
        PhysicalDeviceTexelBufferAlignmentFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT,
            pNext : 0 as _,
            texelBufferAlignment : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceTexelBufferAlignmentPropertiesEXT {
    fn default() -> PhysicalDeviceTexelBufferAlignmentPropertiesEXT {
        PhysicalDeviceTexelBufferAlignmentPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT,
            pNext : 0 as _,
            storageTexelBufferOffsetAlignmentBytes : Default::default(),
            storageTexelBufferOffsetSingleTexelAlignment : 0 as _,
            uniformTexelBufferOffsetAlignmentBytes : Default::default(),
            uniformTexelBufferOffsetSingleTexelAlignment : 0 as _,
        }
    }
}
impl ::std::default::Default for RenderPassTransformBeginInfoQCOM {
    fn default() -> RenderPassTransformBeginInfoQCOM {
        RenderPassTransformBeginInfoQCOM {
            sType : STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM,
            pNext : 0 as _,
            transform : Default::default(),
        }
    }
}
impl ::std::default::Default for CommandBufferInheritanceRenderPassTransformInfoQCOM {
    fn default() -> CommandBufferInheritanceRenderPassTransformInfoQCOM {
        CommandBufferInheritanceRenderPassTransformInfoQCOM {
            sType : STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM,
            pNext : 0 as _,
            transform : Default::default(),
            renderArea : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceRobustness2FeaturesEXT {
    fn default() -> PhysicalDeviceRobustness2FeaturesEXT {
        PhysicalDeviceRobustness2FeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT,
            pNext : 0 as _,
            robustBufferAccess2 : 0 as _,
            robustImageAccess2 : 0 as _,
            nullDescriptor : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceRobustness2PropertiesEXT {
    fn default() -> PhysicalDeviceRobustness2PropertiesEXT {
        PhysicalDeviceRobustness2PropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT,
            pNext : 0 as _,
            robustStorageBufferAccessSizeAlignment : Default::default(),
            robustUniformBufferAccessSizeAlignment : Default::default(),
        }
    }
}
impl ::std::default::Default for SamplerCustomBorderColorCreateInfoEXT {
    fn default() -> SamplerCustomBorderColorCreateInfoEXT {
        SamplerCustomBorderColorCreateInfoEXT {
            sType : STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT,
            pNext : 0 as _,
            customBorderColor : Default::default(),
            format : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCustomBorderColorPropertiesEXT {
    fn default() -> PhysicalDeviceCustomBorderColorPropertiesEXT {
        PhysicalDeviceCustomBorderColorPropertiesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT,
            pNext : 0 as _,
            maxCustomBorderColorSamplers : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceCustomBorderColorFeaturesEXT {
    fn default() -> PhysicalDeviceCustomBorderColorFeaturesEXT {
        PhysicalDeviceCustomBorderColorFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT,
            pNext : 0 as _,
            customBorderColors : 0 as _,
            customBorderColorWithoutFormat : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDevicePrivateDataFeaturesEXT {
    fn default() -> PhysicalDevicePrivateDataFeaturesEXT {
        PhysicalDevicePrivateDataFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT,
            pNext : 0 as _,
            privateData : 0 as _,
        }
    }
}
impl ::std::default::Default for DevicePrivateDataCreateInfoEXT {
    fn default() -> DevicePrivateDataCreateInfoEXT {
        DevicePrivateDataCreateInfoEXT {
            sType : STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT,
            pNext : 0 as _,
            privateDataSlotRequestCount : 0 as _,
        }
    }
}
impl ::std::default::Default for PrivateDataSlotCreateInfoEXT {
    fn default() -> PrivateDataSlotCreateInfoEXT {
        PrivateDataSlotCreateInfoEXT {
            sType : STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT,
            pNext : 0 as _,
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for PhysicalDevicePipelineCreationCacheControlFeaturesEXT {
    fn default() -> PhysicalDevicePipelineCreationCacheControlFeaturesEXT {
        PhysicalDevicePipelineCreationCacheControlFeaturesEXT {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT,
            pNext : 0 as _,
            pipelineCreationCacheControl : 0 as _,
        }
    }
}
impl ::std::default::Default for PhysicalDeviceDiagnosticsConfigFeaturesNV {
    fn default() -> PhysicalDeviceDiagnosticsConfigFeaturesNV {
        PhysicalDeviceDiagnosticsConfigFeaturesNV {
            sType : STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV,
            pNext : 0 as _,
            diagnosticsConfig : 0 as _,
        }
    }
}
impl ::std::default::Default for DeviceDiagnosticsConfigCreateInfoNV {
    fn default() -> DeviceDiagnosticsConfigCreateInfoNV {
        DeviceDiagnosticsConfigCreateInfoNV {
            sType : STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV,
            pNext : 0 as _,
            flags : Default::default(),
        }
    }
}
impl ::std::default::Default for Win32SurfaceCreateInfoKHR {
    fn default() -> Win32SurfaceCreateInfoKHR {
        Win32SurfaceCreateInfoKHR {
            sType : STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
            hinstance : 0 as _,
            hwnd : 0 as _,
        }
    }
}
impl ::std::default::Default for ImportMemoryWin32HandleInfoKHR {
    fn default() -> ImportMemoryWin32HandleInfoKHR {
        ImportMemoryWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            handleType : Default::default(),
            handle : 0 as _,
            name : 0 as _,
        }
    }
}
impl ::std::default::Default for ExportMemoryWin32HandleInfoKHR {
    fn default() -> ExportMemoryWin32HandleInfoKHR {
        ExportMemoryWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            pAttributes : 0 as _,
            dwAccess : 0 as _,
            name : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryWin32HandlePropertiesKHR {
    fn default() -> MemoryWin32HandlePropertiesKHR {
        MemoryWin32HandlePropertiesKHR {
            sType : STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR,
            pNext : 0 as _,
            memoryTypeBits : 0 as _,
        }
    }
}
impl ::std::default::Default for MemoryGetWin32HandleInfoKHR {
    fn default() -> MemoryGetWin32HandleInfoKHR {
        MemoryGetWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            memory : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for Win32KeyedMutexAcquireReleaseInfoKHR {
    fn default() -> Win32KeyedMutexAcquireReleaseInfoKHR {
        Win32KeyedMutexAcquireReleaseInfoKHR {
            sType : STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR,
            pNext : 0 as _,
            acquireCount : 0 as _,
            pAcquireSyncs : 0 as _,
            pAcquireKeys : 0 as _,
            pAcquireTimeouts : 0 as _,
            releaseCount : 0 as _,
            pReleaseSyncs : 0 as _,
            pReleaseKeys : 0 as _,
        }
    }
}
impl ::std::default::Default for ImportSemaphoreWin32HandleInfoKHR {
    fn default() -> ImportSemaphoreWin32HandleInfoKHR {
        ImportSemaphoreWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            semaphore : Default::default(),
            flags : Default::default(),
            handleType : Default::default(),
            handle : 0 as _,
            name : 0 as _,
        }
    }
}
impl ::std::default::Default for ExportSemaphoreWin32HandleInfoKHR {
    fn default() -> ExportSemaphoreWin32HandleInfoKHR {
        ExportSemaphoreWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            pAttributes : 0 as _,
            dwAccess : 0 as _,
            name : 0 as _,
        }
    }
}
impl ::std::default::Default for D3D12FenceSubmitInfoKHR {
    fn default() -> D3D12FenceSubmitInfoKHR {
        D3D12FenceSubmitInfoKHR {
            sType : STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR,
            pNext : 0 as _,
            waitSemaphoreValuesCount : 0 as _,
            pWaitSemaphoreValues : 0 as _,
            signalSemaphoreValuesCount : 0 as _,
            pSignalSemaphoreValues : 0 as _,
        }
    }
}
impl ::std::default::Default for SemaphoreGetWin32HandleInfoKHR {
    fn default() -> SemaphoreGetWin32HandleInfoKHR {
        SemaphoreGetWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            semaphore : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ImportFenceWin32HandleInfoKHR {
    fn default() -> ImportFenceWin32HandleInfoKHR {
        ImportFenceWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            fence : Default::default(),
            flags : Default::default(),
            handleType : Default::default(),
            handle : 0 as _,
            name : 0 as _,
        }
    }
}
impl ::std::default::Default for ExportFenceWin32HandleInfoKHR {
    fn default() -> ExportFenceWin32HandleInfoKHR {
        ExportFenceWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            pAttributes : 0 as _,
            dwAccess : 0 as _,
            name : 0 as _,
        }
    }
}
impl ::std::default::Default for FenceGetWin32HandleInfoKHR {
    fn default() -> FenceGetWin32HandleInfoKHR {
        FenceGetWin32HandleInfoKHR {
            sType : STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR,
            pNext : 0 as _,
            fence : Default::default(),
            handleType : Default::default(),
        }
    }
}
impl ::std::default::Default for ImportMemoryWin32HandleInfoNV {
    fn default() -> ImportMemoryWin32HandleInfoNV {
        ImportMemoryWin32HandleInfoNV {
            sType : STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV,
            pNext : 0 as _,
            handleType : Default::default(),
            handle : 0 as _,
        }
    }
}
impl ::std::default::Default for ExportMemoryWin32HandleInfoNV {
    fn default() -> ExportMemoryWin32HandleInfoNV {
        ExportMemoryWin32HandleInfoNV {
            sType : STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV,
            pNext : 0 as _,
            pAttributes : 0 as _,
            dwAccess : 0 as _,
        }
    }
}
impl ::std::default::Default for Win32KeyedMutexAcquireReleaseInfoNV {
    fn default() -> Win32KeyedMutexAcquireReleaseInfoNV {
        Win32KeyedMutexAcquireReleaseInfoNV {
            sType : STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV,
            pNext : 0 as _,
            acquireCount : 0 as _,
            pAcquireSyncs : 0 as _,
            pAcquireKeys : 0 as _,
            pAcquireTimeoutMilliseconds : 0 as _,
            releaseCount : 0 as _,
            pReleaseSyncs : 0 as _,
            pReleaseKeys : 0 as _,
        }
    }
}
impl ::std::default::Default for SurfaceFullScreenExclusiveInfoEXT {
    fn default() -> SurfaceFullScreenExclusiveInfoEXT {
        SurfaceFullScreenExclusiveInfoEXT {
            sType : STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT,
            pNext : 0 as _,
            fullScreenExclusive : Default::default(),
        }
    }
}
impl ::std::default::Default for SurfaceCapabilitiesFullScreenExclusiveEXT {
    fn default() -> SurfaceCapabilitiesFullScreenExclusiveEXT {
        SurfaceCapabilitiesFullScreenExclusiveEXT {
            sType : STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT,
            pNext : 0 as _,
            fullScreenExclusiveSupported : 0 as _,
        }
    }
}
impl ::std::default::Default for SurfaceFullScreenExclusiveWin32InfoEXT {
    fn default() -> SurfaceFullScreenExclusiveWin32InfoEXT {
        SurfaceFullScreenExclusiveWin32InfoEXT {
            sType : STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT,
            pNext : 0 as _,
            hmonitor : 0 as _,
        }
    }
}

extern "C" {
	pub fn InitVulkanSimple(surface_extension : *const i8);

	pub fn CreateInstance(pCreateInfo :*const InstanceCreateInfo) -> VkResult;

	pub fn SetPhysicalDevice(physicalDevice : PhysicalDevice);

	pub fn SetDeviceQueue(queueFamilyIndex : u32, queueIndex : u32);

	pub fn CreateDevice(pCreateInfo : *const DeviceCreateInfo) -> VkResult;

	pub fn DestroyInstance();
	
	pub fn DestroyDevice();
	
	pub fn DeviceWaitIdle();
	
	pub fn EnumeratePhysicalDevices(
		pPhysicalDeviceCount : *mut u32,
		pPhysicalDevices : *mut PhysicalDevice) -> VkResult;
	
	pub fn GetPhysicalDeviceFeatures(
		pFeatures : *mut PhysicalDeviceFeatures);
	
	pub fn GetPhysicalDeviceFormatProperties(
		format : Format,
		pFormatProperties : *mut FormatProperties);
	
	pub fn GetPhysicalDeviceImageFormatProperties(
		format : Format,
		r#type : ImageType,
		tiling : ImageTiling,
		usage : ImageUsageFlags,
		flags : ImageCreateFlags,
		pImageFormatProperties : *mut ImageFormatProperties) -> VkResult;
	
	pub fn GetPhysicalDeviceProperties(
		pProperties : *mut PhysicalDeviceProperties);
	
	pub fn GetPhysicalDeviceQueueFamilyProperties(
		pQueueFamilyPropertyCount : *mut u32,
		pQueueFamilyProperties : *mut QueueFamilyProperties);
	
	pub fn GetPhysicalDeviceMemoryProperties(
		pMemoryProperties : *mut PhysicalDeviceMemoryProperties);
	
	pub fn GetInstanceProcAddr(
		pName : *const i8) -> u64;
	
	pub fn GetDeviceProcAddr(
		pName : *const i8) -> u64;
	
	pub fn EnumerateInstanceExtensionProperties(
		pLayerName : *const i8,
		pPropertyCount : *mut u32,
		pProperties : *mut ExtensionProperties) -> VkResult;
	
	pub fn EnumerateDeviceExtensionProperties(
		pLayerName : *const i8,
		pPropertyCount : *mut u32,
		pProperties : *mut ExtensionProperties) -> VkResult;
	
	pub fn EnumerateInstanceLayerProperties(
		pPropertyCount : *mut u32,
		pProperties : *mut LayerProperties) -> VkResult;
	
	pub fn EnumerateDeviceLayerProperties(
		pPropertyCount : *mut u32,
		pProperties : *mut LayerProperties) -> VkResult;
	
	pub fn GetDeviceQueue(
		queueFamilyIndex : u32,
		queueIndex : u32,
		pQueue : *mut Queue);
	
	pub fn QueueSubmit(
		submitCount : u32,
		pSubmits : *const SubmitInfo,
		fence : Fence) -> VkResult;
	
	pub fn QueueWaitIdle(
		queue : Queue) -> VkResult;
	
	pub fn AllocateMemory(
		pAllocateInfo : *const MemoryAllocateInfo,
		pMemory : *mut DeviceMemory) -> VkResult;
	
	pub fn FreeMemory(
		memory : DeviceMemory);
	
	pub fn MapMemory(
		memory : DeviceMemory,
		offset : DeviceSize,
		size : DeviceSize,
		flags : MemoryMapFlags,
		ppData : &mut*mut f32) -> VkResult;
	
	pub fn UnmapMemory(
		memory : DeviceMemory);
	
	pub fn FlushMappedMemoryRanges(
		memoryRangeCount : u32,
		pMemoryRanges : *const MappedMemoryRange) -> VkResult;
	
	pub fn InvalidateMappedMemoryRanges(
		memoryRangeCount : u32,
		pMemoryRanges : *const MappedMemoryRange) -> VkResult;
	
	pub fn GetDeviceMemoryCommitment(
		memory : DeviceMemory,
		pCommittedMemoryInBytes : *mut DeviceSize);
	
	pub fn BindBufferMemory(
		buffer : Buffer,
		memory : DeviceMemory,
		memoryOffset : DeviceSize) -> VkResult;
	
	pub fn BindImageMemory(
		image : Image,
		memory : DeviceMemory,
		memoryOffset : DeviceSize) -> VkResult;
	
	pub fn GetBufferMemoryRequirements(
		buffer : Buffer,
		pMemoryRequirements : *mut MemoryRequirements);
	
	pub fn GetImageMemoryRequirements(
		image : Image,
		pMemoryRequirements : *mut MemoryRequirements);
	
	pub fn GetImageSparseMemoryRequirements(
		image : Image,
		pSparseMemoryRequirementCount : *mut u32,
		pSparseMemoryRequirements : *mut SparseImageMemoryRequirements);
	
	pub fn GetPhysicalDeviceSparseImageFormatProperties(
		format : Format,
		r#type : ImageType,
		samples : SampleCountFlagBits,
		usage : ImageUsageFlags,
		tiling : ImageTiling,
		pPropertyCount : *mut u32,
		pProperties : *mut SparseImageFormatProperties);
	
	pub fn QueueBindSparse(
		bindInfoCount : u32,
		pBindInfo : *const BindSparseInfo,
		fence : Fence) -> VkResult;
	
	pub fn CreateFence(
		pCreateInfo : *const FenceCreateInfo,
		pFence : *mut Fence) -> VkResult;
	
	pub fn DestroyFence(
		fence : Fence);
	
	pub fn ResetFences(
		fenceCount : u32,
		pFences : *const Fence) -> VkResult;
	
	pub fn GetFenceStatus(
		fence : Fence) -> VkResult;
	
	pub fn WaitForFences(
		fenceCount : u32,
		pFences : *const Fence,
		waitAll : Bool32,
		timeout : u64) -> VkResult;
	
	pub fn CreateSemaphore(
		pCreateInfo : *const SemaphoreCreateInfo,
		pSemaphore : *mut Semaphore) -> VkResult;
	
	pub fn DestroySemaphore(
		semaphore : Semaphore);
	
	pub fn CreateEvent(
		pCreateInfo : *const EventCreateInfo,
		pEvent : *mut Event) -> VkResult;
	
	pub fn DestroyEvent(
		event : Event);
	
	pub fn GetEventStatus(
		event : Event) -> VkResult;
	
	pub fn SetEvent(
		event : Event) -> VkResult;
	
	pub fn ResetEvent(
		event : Event) -> VkResult;
	
	pub fn CreateQueryPool(
		pCreateInfo : *const QueryPoolCreateInfo,
		pQueryPool : *mut QueryPool) -> VkResult;
	
	pub fn DestroyQueryPool(
		queryPool : QueryPool);
	
	pub fn GetQueryPoolResults(
		queryPool : QueryPool,
		firstQuery : u32,
		queryCount : u32,
		dataSize : usize,
		pData : u64,
		stride : DeviceSize,
		flags : QueryResultFlags) -> VkResult;
	
	pub fn CreateBuffer(
		pCreateInfo : *const BufferCreateInfo,
		pBuffer : *mut Buffer) -> VkResult;
	
	pub fn DestroyBuffer(
		buffer : Buffer);
	
	pub fn CreateBufferView(
		pCreateInfo : *const BufferViewCreateInfo,
		pView : *mut BufferView) -> VkResult;
	
	pub fn DestroyBufferView(
		bufferView : BufferView);
	
	pub fn CreateImage(
		pCreateInfo : *const ImageCreateInfo,
		pImage : *mut Image) -> VkResult;
	
	pub fn DestroyImage(
		image : Image);
	
	pub fn GetImageSubresourceLayout(
		image : Image,
		pSubresource : *const ImageSubresource,
		pLayout : *mut SubresourceLayout);
	
	pub fn CreateImageView(
		pCreateInfo : *const ImageViewCreateInfo,
		pView : *mut ImageView) -> VkResult;
	
	pub fn DestroyImageView(
		imageView : ImageView);
	
	pub fn CreateShaderModule(
		pCreateInfo : *const ShaderModuleCreateInfo,
		pShaderModule : *mut ShaderModule) -> VkResult;
	
	pub fn DestroyShaderModule(
		shaderModule : ShaderModule);
	
	pub fn CreatePipelineCache(
		pCreateInfo : *const PipelineCacheCreateInfo,
		pPipelineCache : *mut PipelineCache) -> VkResult;
	
	pub fn DestroyPipelineCache(
		pipelineCache : PipelineCache);
	
	pub fn GetPipelineCacheData(
		pipelineCache : PipelineCache,
		pDataSize : *mut usize,
		pData : u64) -> VkResult;
	
	pub fn MergePipelineCaches(
		dstCache : PipelineCache,
		srcCacheCount : u32,
		pSrcCaches : *const PipelineCache) -> VkResult;
	
	pub fn CreateGraphicsPipelines(
		pipelineCache : PipelineCache,
		createInfoCount : u32,
		pCreateInfos : *const GraphicsPipelineCreateInfo,
		pPipelines : *mut Pipeline) -> VkResult;
	
	pub fn CreateComputePipelines(
		pipelineCache : PipelineCache,
		createInfoCount : u32,
		pCreateInfos : *const ComputePipelineCreateInfo,
		pPipelines : *mut Pipeline) -> VkResult;
	
	pub fn DestroyPipeline(
		pipeline : Pipeline);
	
	pub fn CreatePipelineLayout(
		pCreateInfo : *const PipelineLayoutCreateInfo,
		pPipelineLayout : *mut PipelineLayout) -> VkResult;
	
	pub fn DestroyPipelineLayout(
		pipelineLayout : PipelineLayout);
	
	pub fn CreateSampler(
		pCreateInfo : *const SamplerCreateInfo,
		pSampler : *mut Sampler) -> VkResult;
	
	pub fn DestroySampler(
		sampler : Sampler);
	
	pub fn CreateDescriptorSetLayout(
		pCreateInfo : *const DescriptorSetLayoutCreateInfo,
		pSetLayout : *mut DescriptorSetLayout) -> VkResult;
	
	pub fn DestroyDescriptorSetLayout(
		descriptorSetLayout : DescriptorSetLayout);
	
	pub fn CreateDescriptorPool(
		pCreateInfo : *const DescriptorPoolCreateInfo,
		pDescriptorPool : *mut DescriptorPool) -> VkResult;
	
	pub fn DestroyDescriptorPool(
		descriptorPool : DescriptorPool);
	
	pub fn ResetDescriptorPool(
		descriptorPool : DescriptorPool,
		flags : DescriptorPoolResetFlags) -> VkResult;
	
	pub fn AllocateDescriptorSets(
		pAllocateInfo : *const DescriptorSetAllocateInfo,
		pDescriptorSets : *mut DescriptorSet) -> VkResult;
	
	pub fn FreeDescriptorSets(
		descriptorPool : DescriptorPool,
		descriptorSetCount : u32,
		pDescriptorSets : *const DescriptorSet) -> VkResult;
	
	pub fn UpdateDescriptorSets(
		descriptorWriteCount : u32,
		pDescriptorWrites : *const WriteDescriptorSet,
		descriptorCopyCount : u32,
		pDescriptorCopies : *const CopyDescriptorSet);
	
	pub fn CreateFramebuffer(
		pCreateInfo : *const FramebufferCreateInfo,
		pFramebuffer : *mut Framebuffer) -> VkResult;
	
	pub fn DestroyFramebuffer(
		framebuffer : Framebuffer);
	
	pub fn CreateRenderPass(
		pCreateInfo : *const RenderPassCreateInfo,
		pRenderPass : *mut RenderPass) -> VkResult;
	
	pub fn DestroyRenderPass(
		renderPass : RenderPass);
	
	pub fn GetRenderAreaGranularity(
		renderPass : RenderPass,
		pGranularity : *mut Extent2D);
	
	pub fn CreateCommandPool(
		pCreateInfo : *const CommandPoolCreateInfo,
		pCommandPool : *mut CommandPool) -> VkResult;
	
	pub fn DestroyCommandPool(
		commandPool : CommandPool);
	
	pub fn ResetCommandPool(
		commandPool : CommandPool,
		flags : CommandPoolResetFlags) -> VkResult;
	
	pub fn AllocateCommandBuffers(
		pAllocateInfo : *const CommandBufferAllocateInfo,
		pCommandBuffers : *mut CommandBuffer) -> VkResult;
	
	pub fn FreeCommandBuffers(
		commandPool : CommandPool,
		commandBufferCount : u32,
		pCommandBuffers : *const CommandBuffer);
	
	pub fn BeginCommandBuffer(
		commandBuffer : CommandBuffer,
		pBeginInfo : *const CommandBufferBeginInfo) -> VkResult;
	
	pub fn EndCommandBuffer(
		commandBuffer : CommandBuffer) -> VkResult;
	
	pub fn ResetCommandBuffer(
		commandBuffer : CommandBuffer,
		flags : CommandBufferResetFlags) -> VkResult;
	
	pub fn CmdBindPipeline(
		commandBuffer : CommandBuffer,
		pipelineBindPoint : PipelineBindPoint,
		pipeline : Pipeline);
	
	pub fn CmdSetViewport(
		commandBuffer : CommandBuffer,
		firstViewport : u32,
		viewportCount : u32,
		pViewports : *const Viewport);
	
	pub fn CmdSetScissor(
		commandBuffer : CommandBuffer,
		firstScissor : u32,
		scissorCount : u32,
		pScissors : *const Rect2D);
	
	pub fn CmdSetLineWidth(
		commandBuffer : CommandBuffer,
		lineWidth : f32);
	
	pub fn CmdSetDepthBias(
		commandBuffer : CommandBuffer,
		depthBiasConstantFactor : f32,
		depthBiasClamp : f32,
		depthBiasSlopeFactor : f32);
	
	pub fn CmdSetBlendConstants(
		commandBuffer : CommandBuffer,
		blendConstants : [f32;4]);
	
	pub fn CmdSetDepthBounds(
		commandBuffer : CommandBuffer,
		minDepthBounds : f32,
		maxDepthBounds : f32);
	
	pub fn CmdSetStencilCompareMask(
		commandBuffer : CommandBuffer,
		faceMask : StencilFaceFlags,
		compareMask : u32);
	
	pub fn CmdSetStencilWriteMask(
		commandBuffer : CommandBuffer,
		faceMask : StencilFaceFlags,
		writeMask : u32);
	
	pub fn CmdSetStencilReference(
		commandBuffer : CommandBuffer,
		faceMask : StencilFaceFlags,
		reference : u32);
	
	pub fn CmdBindDescriptorSets(
		commandBuffer : CommandBuffer,
		pipelineBindPoint : PipelineBindPoint,
		layout : PipelineLayout,
		firstSet : u32,
		descriptorSetCount : u32,
		pDescriptorSets : *const DescriptorSet,
		dynamicOffsetCount : u32,
		pDynamicOffsets : *const u32);
	
	pub fn CmdBindIndexBuffer(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		indexType : IndexType);
	
	pub fn CmdBindVertexBuffers(
		commandBuffer : CommandBuffer,
		firstBinding : u32,
		bindingCount : u32,
		pBuffers : *const Buffer,
		pOffsets : *const DeviceSize);
	
	pub fn CmdDraw(
		commandBuffer : CommandBuffer,
		vertexCount : u32,
		instanceCount : u32,
		firstVertex : u32,
		firstInstance : u32);
	
	pub fn CmdDrawIndexed(
		commandBuffer : CommandBuffer,
		indexCount : u32,
		instanceCount : u32,
		firstIndex : u32,
		vertexOffset : i32,
		firstInstance : u32);
	
	pub fn CmdDrawIndirect(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		drawCount : u32,
		stride : u32);
	
	pub fn CmdDrawIndexedIndirect(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		drawCount : u32,
		stride : u32);
	
	pub fn CmdDispatch(
		commandBuffer : CommandBuffer,
		groupCountX : u32,
		groupCountY : u32,
		groupCountZ : u32);
	
	pub fn CmdDispatchIndirect(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize);
	
	pub fn CmdCopyBuffer(
		commandBuffer : CommandBuffer,
		srcBuffer : Buffer,
		dstBuffer : Buffer,
		regionCount : u32,
		pRegions : *const BufferCopy);
	
	pub fn CmdCopyImage(
		commandBuffer : CommandBuffer,
		srcImage : Image,
		srcImageLayout : ImageLayout,
		dstImage : Image,
		dstImageLayout : ImageLayout,
		regionCount : u32,
		pRegions : *const ImageCopy);
	
	pub fn CmdBlitImage(
		commandBuffer : CommandBuffer,
		srcImage : Image,
		srcImageLayout : ImageLayout,
		dstImage : Image,
		dstImageLayout : ImageLayout,
		regionCount : u32,
		pRegions : *const ImageBlit,
		filter : Filter);
	
	pub fn CmdCopyBufferToImage(
		commandBuffer : CommandBuffer,
		srcBuffer : Buffer,
		dstImage : Image,
		dstImageLayout : ImageLayout,
		regionCount : u32,
		pRegions : *const BufferImageCopy);
	
	pub fn CmdCopyImageToBuffer(
		commandBuffer : CommandBuffer,
		srcImage : Image,
		srcImageLayout : ImageLayout,
		dstBuffer : Buffer,
		regionCount : u32,
		pRegions : *const BufferImageCopy);
	
	pub fn CmdUpdateBuffer(
		commandBuffer : CommandBuffer,
		dstBuffer : Buffer,
		dstOffset : DeviceSize,
		dataSize : DeviceSize,
		pData : u64);
	
	pub fn CmdFillBuffer(
		commandBuffer : CommandBuffer,
		dstBuffer : Buffer,
		dstOffset : DeviceSize,
		size : DeviceSize,
		data : u32);
	
	pub fn CmdClearColorImage(
		commandBuffer : CommandBuffer,
		image : Image,
		imageLayout : ImageLayout,
		pColor : *const ClearColorValue,
		rangeCount : u32,
		pRanges : *const ImageSubresourceRange);
	
	pub fn CmdClearDepthStencilImage(
		commandBuffer : CommandBuffer,
		image : Image,
		imageLayout : ImageLayout,
		pDepthStencil : *const ClearDepthStencilValue,
		rangeCount : u32,
		pRanges : *const ImageSubresourceRange);
	
	pub fn CmdClearAttachments(
		commandBuffer : CommandBuffer,
		attachmentCount : u32,
		pAttachments : *const ClearAttachment,
		rectCount : u32,
		pRects : *const ClearRect);
	
	pub fn CmdResolveImage(
		commandBuffer : CommandBuffer,
		srcImage : Image,
		srcImageLayout : ImageLayout,
		dstImage : Image,
		dstImageLayout : ImageLayout,
		regionCount : u32,
		pRegions : *const ImageResolve);
	
	pub fn CmdSetEvent(
		commandBuffer : CommandBuffer,
		event : Event,
		stageMask : PipelineStageFlags);
	
	pub fn CmdResetEvent(
		commandBuffer : CommandBuffer,
		event : Event,
		stageMask : PipelineStageFlags);
	
	pub fn CmdWaitEvents(
		commandBuffer : CommandBuffer,
		eventCount : u32,
		pEvents : *const Event,
		srcStageMask : PipelineStageFlags,
		dstStageMask : PipelineStageFlags,
		memoryBarrierCount : u32,
		pMemoryBarriers : *const MemoryBarrier,
		bufferMemoryBarrierCount : u32,
		pBufferMemoryBarriers : *const BufferMemoryBarrier,
		imageMemoryBarrierCount : u32,
		pImageMemoryBarriers : *const ImageMemoryBarrier);
	
	pub fn CmdPipelineBarrier(
		commandBuffer : CommandBuffer,
		srcStageMask : PipelineStageFlags,
		dstStageMask : PipelineStageFlags,
		dependencyFlags : DependencyFlags,
		memoryBarrierCount : u32,
		pMemoryBarriers : *const MemoryBarrier,
		bufferMemoryBarrierCount : u32,
		pBufferMemoryBarriers : *const BufferMemoryBarrier,
		imageMemoryBarrierCount : u32,
		pImageMemoryBarriers : *const ImageMemoryBarrier);
	
	pub fn CmdBeginQuery(
		commandBuffer : CommandBuffer,
		queryPool : QueryPool,
		query : u32,
		flags : QueryControlFlags);
	
	pub fn CmdEndQuery(
		commandBuffer : CommandBuffer,
		queryPool : QueryPool,
		query : u32);
	
	pub fn CmdResetQueryPool(
		commandBuffer : CommandBuffer,
		queryPool : QueryPool,
		firstQuery : u32,
		queryCount : u32);
	
	pub fn CmdWriteTimestamp(
		commandBuffer : CommandBuffer,
		pipelineStage : PipelineStageFlagBits,
		queryPool : QueryPool,
		query : u32);
	
	pub fn CmdCopyQueryPoolResults(
		commandBuffer : CommandBuffer,
		queryPool : QueryPool,
		firstQuery : u32,
		queryCount : u32,
		dstBuffer : Buffer,
		dstOffset : DeviceSize,
		stride : DeviceSize,
		flags : QueryResultFlags);
	
	pub fn CmdPushConstants(
		commandBuffer : CommandBuffer,
		layout : PipelineLayout,
		stageFlags : ShaderStageFlags,
		offset : u32,
		size : u32,
		pValues : u64);
	
	pub fn CmdBeginRenderPass(
		commandBuffer : CommandBuffer,
		pRenderPassBegin : *const RenderPassBeginInfo,
		contents : SubpassContents);
	
	pub fn CmdNextSubpass(
		commandBuffer : CommandBuffer,
		contents : SubpassContents);
	
	pub fn CmdEndRenderPass(
		commandBuffer : CommandBuffer);
	
	pub fn CmdExecuteCommands(
		commandBuffer : CommandBuffer,
		commandBufferCount : u32,
		pCommandBuffers : *const CommandBuffer);
	
	pub fn EnumerateInstanceVersion(
		pApiVersion : *mut u32) -> VkResult;
	
	pub fn BindBufferMemory2(
		bindInfoCount : u32,
		pBindInfos : *const BindBufferMemoryInfo) -> VkResult;
	
	pub fn BindImageMemory2(
		bindInfoCount : u32,
		pBindInfos : *const BindImageMemoryInfo) -> VkResult;
	
	pub fn GetDeviceGroupPeerMemoryFeatures(
		heapIndex : u32,
		localDeviceIndex : u32,
		remoteDeviceIndex : u32,
		pPeerMemoryFeatures : *mut PeerMemoryFeatureFlags);
	
	pub fn CmdSetDeviceMask(
		commandBuffer : CommandBuffer,
		deviceMask : u32);
	
	pub fn CmdDispatchBase(
		commandBuffer : CommandBuffer,
		baseGroupX : u32,
		baseGroupY : u32,
		baseGroupZ : u32,
		groupCountX : u32,
		groupCountY : u32,
		groupCountZ : u32);
	
	pub fn EnumeratePhysicalDeviceGroups(
		pPhysicalDeviceGroupCount : *mut u32,
		pPhysicalDeviceGroupProperties : *mut PhysicalDeviceGroupProperties) -> VkResult;
	
	pub fn GetImageMemoryRequirements2(
		pInfo : *const ImageMemoryRequirementsInfo2,
		pMemoryRequirements : *mut MemoryRequirements2);
	
	pub fn GetBufferMemoryRequirements2(
		pInfo : *const BufferMemoryRequirementsInfo2,
		pMemoryRequirements : *mut MemoryRequirements2);
	
	pub fn GetImageSparseMemoryRequirements2(
		pInfo : *const ImageSparseMemoryRequirementsInfo2,
		pSparseMemoryRequirementCount : *mut u32,
		pSparseMemoryRequirements : *mut SparseImageMemoryRequirements2);
	
	pub fn GetPhysicalDeviceFeatures2(
		pFeatures : *mut PhysicalDeviceFeatures2);
	
	pub fn GetPhysicalDeviceProperties2(
		pProperties : *mut PhysicalDeviceProperties2);
	
	pub fn GetPhysicalDeviceFormatProperties2(
		format : Format,
		pFormatProperties : *mut FormatProperties2);
	
	pub fn GetPhysicalDeviceImageFormatProperties2(
		pImageFormatInfo : *const PhysicalDeviceImageFormatInfo2,
		pImageFormatProperties : *mut ImageFormatProperties2) -> VkResult;
	
	pub fn GetPhysicalDeviceQueueFamilyProperties2(
		pQueueFamilyPropertyCount : *mut u32,
		pQueueFamilyProperties : *mut QueueFamilyProperties2);
	
	pub fn GetPhysicalDeviceMemoryProperties2(
		pMemoryProperties : *mut PhysicalDeviceMemoryProperties2);
	
	pub fn GetPhysicalDeviceSparseImageFormatProperties2(
		pFormatInfo : *const PhysicalDeviceSparseImageFormatInfo2,
		pPropertyCount : *mut u32,
		pProperties : *mut SparseImageFormatProperties2);
	
	pub fn TrimCommandPool(
		commandPool : CommandPool,
		flags : CommandPoolTrimFlags);
	
	pub fn GetDeviceQueue2(
		pQueueInfo : *const DeviceQueueInfo2,
		pQueue : *mut Queue);
	
	pub fn CreateSamplerYcbcrConversion(
		pCreateInfo : *const SamplerYcbcrConversionCreateInfo,
		pYcbcrConversion : *mut SamplerYcbcrConversion) -> VkResult;
	
	pub fn DestroySamplerYcbcrConversion(
		ycbcrConversion : SamplerYcbcrConversion);
	
	pub fn CreateDescriptorUpdateTemplate(
		pCreateInfo : *const DescriptorUpdateTemplateCreateInfo,
		pDescriptorUpdateTemplate : *mut DescriptorUpdateTemplate) -> VkResult;
	
	pub fn DestroyDescriptorUpdateTemplate(
		descriptorUpdateTemplate : DescriptorUpdateTemplate);
	
	pub fn UpdateDescriptorSetWithTemplate(
		descriptorSet : DescriptorSet,
		descriptorUpdateTemplate : DescriptorUpdateTemplate,
		pData : u64);
	
	pub fn GetPhysicalDeviceExternalBufferProperties(
		pExternalBufferInfo : *const PhysicalDeviceExternalBufferInfo,
		pExternalBufferProperties : *mut ExternalBufferProperties);
	
	pub fn GetPhysicalDeviceExternalFenceProperties(
		pExternalFenceInfo : *const PhysicalDeviceExternalFenceInfo,
		pExternalFenceProperties : *mut ExternalFenceProperties);
	
	pub fn GetPhysicalDeviceExternalSemaphoreProperties(
		pExternalSemaphoreInfo : *const PhysicalDeviceExternalSemaphoreInfo,
		pExternalSemaphoreProperties : *mut ExternalSemaphoreProperties);
	
	pub fn GetDescriptorSetLayoutSupport(
		pCreateInfo : *const DescriptorSetLayoutCreateInfo,
		pSupport : *mut DescriptorSetLayoutSupport);
	
	pub fn CmdDrawIndirectCount(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn CmdDrawIndexedIndirectCount(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn CreateRenderPass2(
		pCreateInfo : *const RenderPassCreateInfo2,
		pRenderPass : *mut RenderPass) -> VkResult;
	
	pub fn CmdBeginRenderPass2(
		commandBuffer : CommandBuffer,
		pRenderPassBegin : *const RenderPassBeginInfo,
		pSubpassBeginInfo : *const SubpassBeginInfo);
	
	pub fn CmdNextSubpass2(
		commandBuffer : CommandBuffer,
		pSubpassBeginInfo : *const SubpassBeginInfo,
		pSubpassEndInfo : *const SubpassEndInfo);
	
	pub fn CmdEndRenderPass2(
		commandBuffer : CommandBuffer,
		pSubpassEndInfo : *const SubpassEndInfo);
	
	pub fn ResetQueryPool(
		queryPool : QueryPool,
		firstQuery : u32,
		queryCount : u32);
	
	pub fn GetSemaphoreCounterValue(
		semaphore : Semaphore,
		pValue : *mut u64) -> VkResult;
	
	pub fn WaitSemaphores(
		pWaitInfo : *const SemaphoreWaitInfo,
		timeout : u64) -> VkResult;
	
	pub fn SignalSemaphore(
		pSignalInfo : *const SemaphoreSignalInfo) -> VkResult;
	
	pub fn GetBufferDeviceAddress(
		pInfo : *const BufferDeviceAddressInfo) -> DeviceAddress;
	
	pub fn GetBufferOpaqueCaptureAddress(
		pInfo : *const BufferDeviceAddressInfo) -> u64;
	
	pub fn GetDeviceMemoryOpaqueCaptureAddress(
		pInfo : *const DeviceMemoryOpaqueCaptureAddressInfo) -> u64;
	
	pub fn DestroySurfaceKHR(
		surface : SurfaceKHR);
	
	pub fn GetPhysicalDeviceSurfaceSupportKHR(
		queueFamilyIndex : u32,
		surface : SurfaceKHR,
		pSupported : *mut Bool32) -> VkResult;
	
	pub fn GetPhysicalDeviceSurfaceCapabilitiesKHR(
		surface : SurfaceKHR,
		pSurfaceCapabilities : *mut SurfaceCapabilitiesKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceSurfaceFormatsKHR(
		surface : SurfaceKHR,
		pSurfaceFormatCount : *mut u32,
		pSurfaceFormats : *mut SurfaceFormatKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceSurfacePresentModesKHR(
		surface : SurfaceKHR,
		pPresentModeCount : *mut u32,
		pPresentModes : *mut PresentModeKHR) -> VkResult;
	
	pub fn CreateSwapchainKHR(
		pCreateInfo : *const SwapchainCreateInfoKHR,
		pSwapchain : *mut SwapchainKHR) -> VkResult;
	
	pub fn DestroySwapchainKHR(
		swapchain : SwapchainKHR);
	
	pub fn GetSwapchainImagesKHR(
		swapchain : SwapchainKHR,
		pSwapchainImageCount : *mut u32,
		pSwapchainImages : *mut Image) -> VkResult;
	
	pub fn AcquireNextImageKHR(
		swapchain : SwapchainKHR,
		timeout : u64,
		semaphore : Semaphore,
		fence : Fence,
		pImageIndex : *mut u32) -> VkResult;
	
	pub fn QueuePresentKHR(
		pPresentInfo : *const PresentInfoKHR) -> VkResult;
	
	pub fn GetDeviceGroupPresentCapabilitiesKHR(
		pDeviceGroupPresentCapabilities : *mut DeviceGroupPresentCapabilitiesKHR) -> VkResult;
	
	pub fn GetDeviceGroupSurfacePresentModesKHR(
		surface : SurfaceKHR,
		pModes : *mut DeviceGroupPresentModeFlagsKHR) -> VkResult;
	
	pub fn GetPhysicalDevicePresentRectanglesKHR(
		surface : SurfaceKHR,
		pRectCount : *mut u32,
		pRects : *mut Rect2D) -> VkResult;
	
	pub fn AcquireNextImage2KHR(
		pAcquireInfo : *const AcquireNextImageInfoKHR,
		pImageIndex : *mut u32) -> VkResult;
	
	pub fn GetPhysicalDeviceDisplayPropertiesKHR(
		pPropertyCount : *mut u32,
		pProperties : *mut DisplayPropertiesKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceDisplayPlanePropertiesKHR(
		pPropertyCount : *mut u32,
		pProperties : *mut DisplayPlanePropertiesKHR) -> VkResult;
	
	pub fn GetDisplayPlaneSupportedDisplaysKHR(
		planeIndex : u32,
		pDisplayCount : *mut u32,
		pDisplays : *mut DisplayKHR) -> VkResult;
	
	pub fn GetDisplayModePropertiesKHR(
		display : DisplayKHR,
		pPropertyCount : *mut u32,
		pProperties : *mut DisplayModePropertiesKHR) -> VkResult;
	
	pub fn CreateDisplayModeKHR(
		display : DisplayKHR,
		pCreateInfo : *const DisplayModeCreateInfoKHR,
		pMode : *mut DisplayModeKHR) -> VkResult;
	
	pub fn GetDisplayPlaneCapabilitiesKHR(
		mode : DisplayModeKHR,
		planeIndex : u32,
		pCapabilities : *mut DisplayPlaneCapabilitiesKHR) -> VkResult;
	
	pub fn CreateDisplayPlaneSurfaceKHR(
		pCreateInfo : *const DisplaySurfaceCreateInfoKHR,
		pSurface : *mut SurfaceKHR) -> VkResult;
	
	pub fn CreateSharedSwapchainsKHR(
		swapchainCount : u32,
		pCreateInfos : *const SwapchainCreateInfoKHR,
		pSwapchains : *mut SwapchainKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceFeatures2KHR(
		pFeatures : *mut PhysicalDeviceFeatures2);
	
	pub fn GetPhysicalDeviceProperties2KHR(
		pProperties : *mut PhysicalDeviceProperties2);
	
	pub fn GetPhysicalDeviceFormatProperties2KHR(
		format : Format,
		pFormatProperties : *mut FormatProperties2);
	
	pub fn GetPhysicalDeviceImageFormatProperties2KHR(
		pImageFormatInfo : *const PhysicalDeviceImageFormatInfo2,
		pImageFormatProperties : *mut ImageFormatProperties2) -> VkResult;
	
	pub fn GetPhysicalDeviceQueueFamilyProperties2KHR(
		pQueueFamilyPropertyCount : *mut u32,
		pQueueFamilyProperties : *mut QueueFamilyProperties2);
	
	pub fn GetPhysicalDeviceMemoryProperties2KHR(
		pMemoryProperties : *mut PhysicalDeviceMemoryProperties2);
	
	pub fn GetPhysicalDeviceSparseImageFormatProperties2KHR(
		pFormatInfo : *const PhysicalDeviceSparseImageFormatInfo2,
		pPropertyCount : *mut u32,
		pProperties : *mut SparseImageFormatProperties2);
	
	pub fn GetDeviceGroupPeerMemoryFeaturesKHR(
		heapIndex : u32,
		localDeviceIndex : u32,
		remoteDeviceIndex : u32,
		pPeerMemoryFeatures : *mut PeerMemoryFeatureFlags);
	
	pub fn CmdSetDeviceMaskKHR(
		commandBuffer : CommandBuffer,
		deviceMask : u32);
	
	pub fn CmdDispatchBaseKHR(
		commandBuffer : CommandBuffer,
		baseGroupX : u32,
		baseGroupY : u32,
		baseGroupZ : u32,
		groupCountX : u32,
		groupCountY : u32,
		groupCountZ : u32);
	
	pub fn TrimCommandPoolKHR(
		commandPool : CommandPool,
		flags : CommandPoolTrimFlags);
	
	pub fn EnumeratePhysicalDeviceGroupsKHR(
		pPhysicalDeviceGroupCount : *mut u32,
		pPhysicalDeviceGroupProperties : *mut PhysicalDeviceGroupProperties) -> VkResult;
	
	pub fn GetPhysicalDeviceExternalBufferPropertiesKHR(
		pExternalBufferInfo : *const PhysicalDeviceExternalBufferInfo,
		pExternalBufferProperties : *mut ExternalBufferProperties);
	
	pub fn GetMemoryFdKHR(
		pGetFdInfo : *const MemoryGetFdInfoKHR,
		pFd : *mut i32) -> VkResult;
	
	pub fn GetMemoryFdPropertiesKHR(
		handleType : ExternalMemoryHandleTypeFlagBits,
		fd : i32,
		pMemoryFdProperties : *mut MemoryFdPropertiesKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceExternalSemaphorePropertiesKHR(
		pExternalSemaphoreInfo : *const PhysicalDeviceExternalSemaphoreInfo,
		pExternalSemaphoreProperties : *mut ExternalSemaphoreProperties);
	
	pub fn ImportSemaphoreFdKHR(
		pImportSemaphoreFdInfo : *const ImportSemaphoreFdInfoKHR) -> VkResult;
	
	pub fn GetSemaphoreFdKHR(
		pGetFdInfo : *const SemaphoreGetFdInfoKHR,
		pFd : *mut i32) -> VkResult;
	
	pub fn CmdPushDescriptorSetKHR(
		commandBuffer : CommandBuffer,
		pipelineBindPoint : PipelineBindPoint,
		layout : PipelineLayout,
		set : u32,
		descriptorWriteCount : u32,
		pDescriptorWrites : *const WriteDescriptorSet);
	
	pub fn CmdPushDescriptorSetWithTemplateKHR(
		commandBuffer : CommandBuffer,
		descriptorUpdateTemplate : DescriptorUpdateTemplate,
		layout : PipelineLayout,
		set : u32,
		pData : u64);
	
	pub fn CreateDescriptorUpdateTemplateKHR(
		pCreateInfo : *const DescriptorUpdateTemplateCreateInfo,
		pDescriptorUpdateTemplate : *mut DescriptorUpdateTemplate) -> VkResult;
	
	pub fn DestroyDescriptorUpdateTemplateKHR(
		descriptorUpdateTemplate : DescriptorUpdateTemplate);
	
	pub fn UpdateDescriptorSetWithTemplateKHR(
		descriptorSet : DescriptorSet,
		descriptorUpdateTemplate : DescriptorUpdateTemplate,
		pData : u64);
	
	pub fn CreateRenderPass2KHR(
		pCreateInfo : *const RenderPassCreateInfo2,
		pRenderPass : *mut RenderPass) -> VkResult;
	
	pub fn CmdBeginRenderPass2KHR(
		commandBuffer : CommandBuffer,
		pRenderPassBegin : *const RenderPassBeginInfo,
		pSubpassBeginInfo : *const SubpassBeginInfo);
	
	pub fn CmdNextSubpass2KHR(
		commandBuffer : CommandBuffer,
		pSubpassBeginInfo : *const SubpassBeginInfo,
		pSubpassEndInfo : *const SubpassEndInfo);
	
	pub fn CmdEndRenderPass2KHR(
		commandBuffer : CommandBuffer,
		pSubpassEndInfo : *const SubpassEndInfo);
	
	pub fn GetSwapchainStatusKHR(
		swapchain : SwapchainKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceExternalFencePropertiesKHR(
		pExternalFenceInfo : *const PhysicalDeviceExternalFenceInfo,
		pExternalFenceProperties : *mut ExternalFenceProperties);
	
	pub fn ImportFenceFdKHR(
		pImportFenceFdInfo : *const ImportFenceFdInfoKHR) -> VkResult;
	
	pub fn GetFenceFdKHR(
		pGetFdInfo : *const FenceGetFdInfoKHR,
		pFd : *mut i32) -> VkResult;
	
	pub fn EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
		queueFamilyIndex : u32,
		pCounterCount : *mut u32,
		pCounters : *mut PerformanceCounterKHR,
		pCounterDescriptions : *mut PerformanceCounterDescriptionKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
		pPerformanceQueryCreateInfo : *const QueryPoolPerformanceCreateInfoKHR,
		pNumPasses : *mut u32);
	
	pub fn AcquireProfilingLockKHR(
		pInfo : *const AcquireProfilingLockInfoKHR) -> VkResult;
	
	pub fn ReleaseProfilingLockKHR();
	
	pub fn GetPhysicalDeviceSurfaceCapabilities2KHR(
		pSurfaceInfo : *const PhysicalDeviceSurfaceInfo2KHR,
		pSurfaceCapabilities : *mut SurfaceCapabilities2KHR) -> VkResult;
	
	pub fn GetPhysicalDeviceSurfaceFormats2KHR(
		pSurfaceInfo : *const PhysicalDeviceSurfaceInfo2KHR,
		pSurfaceFormatCount : *mut u32,
		pSurfaceFormats : *mut SurfaceFormat2KHR) -> VkResult;
	
	pub fn GetPhysicalDeviceDisplayProperties2KHR(
		pPropertyCount : *mut u32,
		pProperties : *mut DisplayProperties2KHR) -> VkResult;
	
	pub fn GetPhysicalDeviceDisplayPlaneProperties2KHR(
		pPropertyCount : *mut u32,
		pProperties : *mut DisplayPlaneProperties2KHR) -> VkResult;
	
	pub fn GetDisplayModeProperties2KHR(
		display : DisplayKHR,
		pPropertyCount : *mut u32,
		pProperties : *mut DisplayModeProperties2KHR) -> VkResult;
	
	pub fn GetDisplayPlaneCapabilities2KHR(
		pDisplayPlaneInfo : *const DisplayPlaneInfo2KHR,
		pCapabilities : *mut DisplayPlaneCapabilities2KHR) -> VkResult;
	
	pub fn GetImageMemoryRequirements2KHR(
		pInfo : *const ImageMemoryRequirementsInfo2,
		pMemoryRequirements : *mut MemoryRequirements2);
	
	pub fn GetBufferMemoryRequirements2KHR(
		pInfo : *const BufferMemoryRequirementsInfo2,
		pMemoryRequirements : *mut MemoryRequirements2);
	
	pub fn GetImageSparseMemoryRequirements2KHR(
		pInfo : *const ImageSparseMemoryRequirementsInfo2,
		pSparseMemoryRequirementCount : *mut u32,
		pSparseMemoryRequirements : *mut SparseImageMemoryRequirements2);
	
	pub fn CreateSamplerYcbcrConversionKHR(
		pCreateInfo : *const SamplerYcbcrConversionCreateInfo,
		pYcbcrConversion : *mut SamplerYcbcrConversion) -> VkResult;
	
	pub fn DestroySamplerYcbcrConversionKHR(
		ycbcrConversion : SamplerYcbcrConversion);
	
	pub fn BindBufferMemory2KHR(
		bindInfoCount : u32,
		pBindInfos : *const BindBufferMemoryInfo) -> VkResult;
	
	pub fn BindImageMemory2KHR(
		bindInfoCount : u32,
		pBindInfos : *const BindImageMemoryInfo) -> VkResult;
	
	pub fn GetDescriptorSetLayoutSupportKHR(
		pCreateInfo : *const DescriptorSetLayoutCreateInfo,
		pSupport : *mut DescriptorSetLayoutSupport);
	
	pub fn CmdDrawIndirectCountKHR(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn CmdDrawIndexedIndirectCountKHR(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn GetSemaphoreCounterValueKHR(
		semaphore : Semaphore,
		pValue : *mut u64) -> VkResult;
	
	pub fn WaitSemaphoresKHR(
		pWaitInfo : *const SemaphoreWaitInfo,
		timeout : u64) -> VkResult;
	
	pub fn SignalSemaphoreKHR(
		pSignalInfo : *const SemaphoreSignalInfo) -> VkResult;
	
	pub fn GetBufferDeviceAddressKHR(
		pInfo : *const BufferDeviceAddressInfo) -> DeviceAddress;
	
	pub fn GetBufferOpaqueCaptureAddressKHR(
		pInfo : *const BufferDeviceAddressInfo) -> u64;
	
	pub fn GetDeviceMemoryOpaqueCaptureAddressKHR(
		pInfo : *const DeviceMemoryOpaqueCaptureAddressInfo) -> u64;
	
	pub fn GetPipelineExecutablePropertiesKHR(
		pPipelineInfo : *const PipelineInfoKHR,
		pExecutableCount : *mut u32,
		pProperties : *mut PipelineExecutablePropertiesKHR) -> VkResult;
	
	// pub fn GetPipelineExecutableStatisticsKHR(
	//     pExecutableInfo : *const PipelineExecutableInfoKHR,
	//     pStatisticCount : *mut u32,
	//     pStatistics : *mut PipelineExecutableStatisticKHR) -> VkResult;
	
	pub fn GetPipelineExecutableInternalRepresentationsKHR(
		pExecutableInfo : *const PipelineExecutableInfoKHR,
		pInternalRepresentationCount : *mut u32,
		pInternalRepresentations : *mut PipelineExecutableInternalRepresentationKHR) -> VkResult;
	
	pub fn CreateDebugReportCallbackEXT(
		pCreateInfo : *const DebugReportCallbackCreateInfoEXT,
		pCallback : *mut DebugReportCallbackEXT) -> VkResult;
	
	pub fn DestroyDebugReportCallbackEXT(
		callback : DebugReportCallbackEXT);
	
	pub fn DebugReportMessageEXT(
		flags : DebugReportFlagsEXT,
		objectType : DebugReportObjectTypeEXT,
		object : u64,
		location : usize,
		messageCode : i32,
		pLayerPrefix : *const i8,
		pMessage : *const i8);
	
	pub fn DebugMarkerSetObjectTagEXT(
		pTagInfo : *const DebugMarkerObjectTagInfoEXT) -> VkResult;
	
	pub fn DebugMarkerSetObjectNameEXT(
		pNameInfo : *const DebugMarkerObjectNameInfoEXT) -> VkResult;
	
	pub fn CmdDebugMarkerBeginEXT(
		commandBuffer : CommandBuffer,
		pMarkerInfo : *const DebugMarkerMarkerInfoEXT);
	
	pub fn CmdDebugMarkerEndEXT(
		commandBuffer : CommandBuffer);
	
	pub fn CmdDebugMarkerInsertEXT(
		commandBuffer : CommandBuffer,
		pMarkerInfo : *const DebugMarkerMarkerInfoEXT);
	
	pub fn CmdBindTransformFeedbackBuffersEXT(
		commandBuffer : CommandBuffer,
		firstBinding : u32,
		bindingCount : u32,
		pBuffers : *const Buffer,
		pOffsets : *const DeviceSize,
		pSizes : *const DeviceSize);
	
	pub fn CmdBeginTransformFeedbackEXT(
		commandBuffer : CommandBuffer,
		firstCounterBuffer : u32,
		counterBufferCount : u32,
		pCounterBuffers : *const Buffer,
		pCounterBufferOffsets : *const DeviceSize);
	
	pub fn CmdEndTransformFeedbackEXT(
		commandBuffer : CommandBuffer,
		firstCounterBuffer : u32,
		counterBufferCount : u32,
		pCounterBuffers : *const Buffer,
		pCounterBufferOffsets : *const DeviceSize);
	
	pub fn CmdBeginQueryIndexedEXT(
		commandBuffer : CommandBuffer,
		queryPool : QueryPool,
		query : u32,
		flags : QueryControlFlags,
		index : u32);
	
	pub fn CmdEndQueryIndexedEXT(
		commandBuffer : CommandBuffer,
		queryPool : QueryPool,
		query : u32,
		index : u32);
	
	pub fn CmdDrawIndirectByteCountEXT(
		commandBuffer : CommandBuffer,
		instanceCount : u32,
		firstInstance : u32,
		counterBuffer : Buffer,
		counterBufferOffset : DeviceSize,
		counterOffset : u32,
		vertexStride : u32);
	
	pub fn GetImageViewHandleNVX(
		pInfo : *const ImageViewHandleInfoNVX) -> u32;
	
	pub fn GetImageViewAddressNVX(
		imageView : ImageView,
		pProperties : *mut ImageViewAddressPropertiesNVX) -> VkResult;
	
	pub fn CmdDrawIndirectCountAMD(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn CmdDrawIndexedIndirectCountAMD(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn GetShaderInfoAMD(
		pipeline : Pipeline,
		shaderStage : ShaderStageFlagBits,
		infoType : ShaderInfoTypeAMD,
		pInfoSize : *mut usize,
		pInfo : u64) -> VkResult;
	
	pub fn GetPhysicalDeviceExternalImageFormatPropertiesNV(
		format : Format,
		r#type : ImageType,
		tiling : ImageTiling,
		usage : ImageUsageFlags,
		flags : ImageCreateFlags,
		externalHandleType : ExternalMemoryHandleTypeFlagsNV,
		pExternalImageFormatProperties : *mut ExternalImageFormatPropertiesNV) -> VkResult;
	
	pub fn CmdBeginConditionalRenderingEXT(
		commandBuffer : CommandBuffer,
		pConditionalRenderingBegin : *const ConditionalRenderingBeginInfoEXT);
	
	pub fn CmdEndConditionalRenderingEXT(
		commandBuffer : CommandBuffer);
	
	pub fn CmdSetViewportWScalingNV(
		commandBuffer : CommandBuffer,
		firstViewport : u32,
		viewportCount : u32,
		pViewportWScalings : *const ViewportWScalingNV);
	
	pub fn ReleaseDisplayEXT(
		display : DisplayKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceSurfaceCapabilities2EXT(
		surface : SurfaceKHR,
		pSurfaceCapabilities : *mut SurfaceCapabilities2EXT) -> VkResult;
	
	pub fn DisplayPowerControlEXT(
		display : DisplayKHR,
		pDisplayPowerInfo : *const DisplayPowerInfoEXT) -> VkResult;
	
	pub fn RegisterDeviceEventEXT(
		pDeviceEventInfo : *const DeviceEventInfoEXT,
		pFence : *mut Fence) -> VkResult;
	
	pub fn RegisterDisplayEventEXT(
		display : DisplayKHR,
		pDisplayEventInfo : *const DisplayEventInfoEXT,
		pFence : *mut Fence) -> VkResult;
	
	pub fn GetSwapchainCounterEXT(
		swapchain : SwapchainKHR,
		counter : SurfaceCounterFlagBitsEXT,
		pCounterValue : *mut u64) -> VkResult;
	
	pub fn GetRefreshCycleDurationGOOGLE(
		swapchain : SwapchainKHR,
		pDisplayTimingProperties : *mut RefreshCycleDurationGOOGLE) -> VkResult;
	
	pub fn GetPastPresentationTimingGOOGLE(
		swapchain : SwapchainKHR,
		pPresentationTimingCount : *mut u32,
		pPresentationTimings : *mut PastPresentationTimingGOOGLE) -> VkResult;
	
	pub fn CmdSetDiscardRectangleEXT(
		commandBuffer : CommandBuffer,
		firstDiscardRectangle : u32,
		discardRectangleCount : u32,
		pDiscardRectangles : *const Rect2D);
	
	pub fn SetHdrMetadataEXT(
		swapchainCount : u32,
		pSwapchains : *const SwapchainKHR,
		pMetadata : *const HdrMetadataEXT);
	
	pub fn SetDebugUtilsObjectNameEXT(
		pNameInfo : *const DebugUtilsObjectNameInfoEXT) -> VkResult;
	
	pub fn SetDebugUtilsObjectTagEXT(
		pTagInfo : *const DebugUtilsObjectTagInfoEXT) -> VkResult;
	
	pub fn QueueBeginDebugUtilsLabelEXT(
		pLabelInfo : *const DebugUtilsLabelEXT);
	
	pub fn QueueEndDebugUtilsLabelEXT(
		queue : Queue);
	
	pub fn QueueInsertDebugUtilsLabelEXT(
		pLabelInfo : *const DebugUtilsLabelEXT);
	
	pub fn CmdBeginDebugUtilsLabelEXT(
		commandBuffer : CommandBuffer,
		pLabelInfo : *const DebugUtilsLabelEXT);
	
	pub fn CmdEndDebugUtilsLabelEXT(
		commandBuffer : CommandBuffer);
	
	pub fn CmdInsertDebugUtilsLabelEXT(
		commandBuffer : CommandBuffer,
		pLabelInfo : *const DebugUtilsLabelEXT);
	
	pub fn CreateDebugUtilsMessengerEXT(
		pCreateInfo : *const DebugUtilsMessengerCreateInfoEXT,
		pMessenger : *mut DebugUtilsMessengerEXT) -> VkResult;
	
	pub fn DestroyDebugUtilsMessengerEXT(
		messenger : DebugUtilsMessengerEXT);
	
	pub fn SubmitDebugUtilsMessageEXT(
		messageSeverity : DebugUtilsMessageSeverityFlagBitsEXT,
		messageTypes : DebugUtilsMessageTypeFlagsEXT,
		pCallbackData : *const DebugUtilsMessengerCallbackDataEXT);
	
	pub fn CmdSetSampleLocationsEXT(
		commandBuffer : CommandBuffer,
		pSampleLocationsInfo : *const SampleLocationsInfoEXT);
	
	pub fn GetPhysicalDeviceMultisamplePropertiesEXT(
		samples : SampleCountFlagBits,
		pMultisampleProperties : *mut MultisamplePropertiesEXT);
	
	pub fn GetImageDrmFormatModifierPropertiesEXT(
		image : Image,
		pProperties : *mut ImageDrmFormatModifierPropertiesEXT) -> VkResult;
	
	pub fn CreateValidationCacheEXT(
		pCreateInfo : *const ValidationCacheCreateInfoEXT,
		pValidationCache : *mut ValidationCacheEXT) -> VkResult;
	
	pub fn DestroyValidationCacheEXT(
		validationCache : ValidationCacheEXT);
	
	pub fn MergeValidationCachesEXT(
		dstCache : ValidationCacheEXT,
		srcCacheCount : u32,
		pSrcCaches : *const ValidationCacheEXT) -> VkResult;
	
	pub fn GetValidationCacheDataEXT(
		validationCache : ValidationCacheEXT,
		pDataSize : *mut usize,
		pData : u64) -> VkResult;
	
	pub fn CmdBindShadingRateImageNV(
		commandBuffer : CommandBuffer,
		imageView : ImageView,
		imageLayout : ImageLayout);
	
	pub fn CmdSetViewportShadingRatePaletteNV(
		commandBuffer : CommandBuffer,
		firstViewport : u32,
		viewportCount : u32,
		pShadingRatePalettes : *const ShadingRatePaletteNV);
	
	pub fn CmdSetCoarseSampleOrderNV(
		commandBuffer : CommandBuffer,
		sampleOrderType : CoarseSampleOrderTypeNV,
		customSampleOrderCount : u32,
		pCustomSampleOrders : *const CoarseSampleOrderCustomNV);
	
	pub fn CreateAccelerationStructureNV(
		pCreateInfo : *const AccelerationStructureCreateInfoNV,
		pAccelerationStructure : *mut AccelerationStructureNV) -> VkResult;
	
	pub fn DestroyAccelerationStructureKHR(
		accelerationStructure : AccelerationStructureKHR);
	
	pub fn DestroyAccelerationStructureNV(
		accelerationStructure : AccelerationStructureKHR);
	
	pub fn GetAccelerationStructureMemoryRequirementsNV(
		pInfo : *const AccelerationStructureMemoryRequirementsInfoNV,
		pMemoryRequirements : *mut MemoryRequirements2KHR);
	
	pub fn BindAccelerationStructureMemoryKHR(
		bindInfoCount : u32,
		pBindInfos : *const BindAccelerationStructureMemoryInfoKHR) -> VkResult;
	
	pub fn BindAccelerationStructureMemoryNV(
		bindInfoCount : u32,
		pBindInfos : *const BindAccelerationStructureMemoryInfoKHR) -> VkResult;
	
	pub fn CmdBuildAccelerationStructureNV(
		commandBuffer : CommandBuffer,
		pInfo : *const AccelerationStructureInfoNV,
		instanceData : Buffer,
		instanceOffset : DeviceSize,
		update : Bool32,
		dst : AccelerationStructureKHR,
		src : AccelerationStructureKHR,
		scratch : Buffer,
		scratchOffset : DeviceSize);
	
	pub fn CmdCopyAccelerationStructureNV(
		commandBuffer : CommandBuffer,
		dst : AccelerationStructureKHR,
		src : AccelerationStructureKHR,
		mode : CopyAccelerationStructureModeKHR);
	
	pub fn CmdTraceRaysNV(
		commandBuffer : CommandBuffer,
		raygenShaderBindingTableBuffer : Buffer,
		raygenShaderBindingOffset : DeviceSize,
		missShaderBindingTableBuffer : Buffer,
		missShaderBindingOffset : DeviceSize,
		missShaderBindingStride : DeviceSize,
		hitShaderBindingTableBuffer : Buffer,
		hitShaderBindingOffset : DeviceSize,
		hitShaderBindingStride : DeviceSize,
		callableShaderBindingTableBuffer : Buffer,
		callableShaderBindingOffset : DeviceSize,
		callableShaderBindingStride : DeviceSize,
		width : u32,
		height : u32,
		depth : u32);
	
	pub fn CreateRayTracingPipelinesNV(
		pipelineCache : PipelineCache,
		createInfoCount : u32,
		pCreateInfos : *const RayTracingPipelineCreateInfoNV,
		pPipelines : *mut Pipeline) -> VkResult;
	
	pub fn GetRayTracingShaderGroupHandlesKHR(
		pipeline : Pipeline,
		firstGroup : u32,
		groupCount : u32,
		dataSize : usize,
		pData : u64) -> VkResult;
	
	pub fn GetRayTracingShaderGroupHandlesNV(
		pipeline : Pipeline,
		firstGroup : u32,
		groupCount : u32,
		dataSize : usize,
		pData : u64) -> VkResult;
	
	pub fn GetAccelerationStructureHandleNV(
		accelerationStructure : AccelerationStructureKHR,
		dataSize : usize,
		pData : u64) -> VkResult;
	
	pub fn CmdWriteAccelerationStructuresPropertiesKHR(
		commandBuffer : CommandBuffer,
		accelerationStructureCount : u32,
		pAccelerationStructures : *const AccelerationStructureKHR,
		queryType : QueryType,
		queryPool : QueryPool,
		firstQuery : u32);
	
	pub fn CmdWriteAccelerationStructuresPropertiesNV(
		commandBuffer : CommandBuffer,
		accelerationStructureCount : u32,
		pAccelerationStructures : *const AccelerationStructureKHR,
		queryType : QueryType,
		queryPool : QueryPool,
		firstQuery : u32);
	
	pub fn CompileDeferredNV(
		pipeline : Pipeline,
		shader : u32) -> VkResult;
	
	pub fn GetMemoryHostPointerPropertiesEXT(
		handleType : ExternalMemoryHandleTypeFlagBits,
		pHostPointer : u64,
		pMemoryHostPointerProperties : *mut MemoryHostPointerPropertiesEXT) -> VkResult;
	
	pub fn CmdWriteBufferMarkerAMD(
		commandBuffer : CommandBuffer,
		pipelineStage : PipelineStageFlagBits,
		dstBuffer : Buffer,
		dstOffset : DeviceSize,
		marker : u32);
	
	pub fn GetPhysicalDeviceCalibrateableTimeDomainsEXT(
		pTimeDomainCount : *mut u32,
		pTimeDomains : *mut TimeDomainEXT) -> VkResult;
	
	pub fn GetCalibratedTimestampsEXT(
		timestampCount : u32,
		pTimestampInfos : *const CalibratedTimestampInfoEXT,
		pTimestamps : *mut u64,
		pMaxDeviation : *mut u64) -> VkResult;
	
	pub fn CmdDrawMeshTasksNV(
		commandBuffer : CommandBuffer,
		taskCount : u32,
		firstTask : u32);
	
	pub fn CmdDrawMeshTasksIndirectNV(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		drawCount : u32,
		stride : u32);
	
	pub fn CmdDrawMeshTasksIndirectCountNV(
		commandBuffer : CommandBuffer,
		buffer : Buffer,
		offset : DeviceSize,
		countBuffer : Buffer,
		countBufferOffset : DeviceSize,
		maxDrawCount : u32,
		stride : u32);
	
	pub fn CmdSetExclusiveScissorNV(
		commandBuffer : CommandBuffer,
		firstExclusiveScissor : u32,
		exclusiveScissorCount : u32,
		pExclusiveScissors : *const Rect2D);
	
	pub fn CmdSetCheckpointNV(
		commandBuffer : CommandBuffer,
		pCheckpointMarker : u64);
	
	pub fn GetQueueCheckpointDataNV(
		pCheckpointDataCount : *mut u32,
		pCheckpointData : *mut CheckpointDataNV);
	
	pub fn InitializePerformanceApiINTEL(
		pInitializeInfo : *const InitializePerformanceApiInfoINTEL) -> VkResult;
	
	pub fn UninitializePerformanceApiINTEL();
	
	pub fn CmdSetPerformanceMarkerINTEL(
		commandBuffer : CommandBuffer,
		pMarkerInfo : *const PerformanceMarkerInfoINTEL) -> VkResult;
	
	pub fn CmdSetPerformanceStreamMarkerINTEL(
		commandBuffer : CommandBuffer,
		pMarkerInfo : *const PerformanceStreamMarkerInfoINTEL) -> VkResult;
	
	pub fn CmdSetPerformanceOverrideINTEL(
		commandBuffer : CommandBuffer,
		pOverrideInfo : *const PerformanceOverrideInfoINTEL) -> VkResult;
	
	pub fn AcquirePerformanceConfigurationINTEL(
		pAcquireInfo : *const PerformanceConfigurationAcquireInfoINTEL,
		pConfiguration : *mut PerformanceConfigurationINTEL) -> VkResult;
	
	pub fn ReleasePerformanceConfigurationINTEL(
		configuration : PerformanceConfigurationINTEL) -> VkResult;
	
	pub fn QueueSetPerformanceConfigurationINTEL(
		configuration : PerformanceConfigurationINTEL) -> VkResult;
	
	// pub fn GetPerformanceParameterINTEL(
	//     parameter : PerformanceParameterTypeINTEL,
	//     pValue : *mut PerformanceValueINTEL) -> VkResult;
	
	pub fn SetLocalDimmingAMD(
		swapChain : SwapchainKHR,
		localDimmingEnable : Bool32);
	
	pub fn GetBufferDeviceAddressEXT(
		pInfo : *const BufferDeviceAddressInfo) -> DeviceAddress;
	
	pub fn GetPhysicalDeviceToolPropertiesEXT(
		pToolCount : *mut u32,
		pToolProperties : *mut PhysicalDeviceToolPropertiesEXT) -> VkResult;
	
	pub fn GetPhysicalDeviceCooperativeMatrixPropertiesNV(
		pPropertyCount : *mut u32,
		pProperties : *mut CooperativeMatrixPropertiesNV) -> VkResult;
	
	pub fn GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
		pCombinationCount : *mut u32,
		pCombinations : *mut FramebufferMixedSamplesCombinationNV) -> VkResult;
	
	pub fn CreateHeadlessSurfaceEXT(
		pCreateInfo : *const HeadlessSurfaceCreateInfoEXT,
		pSurface : *mut SurfaceKHR) -> VkResult;
	
	pub fn CmdSetLineStippleEXT(
		commandBuffer : CommandBuffer,
		lineStippleFactor : u32,
		lineStipplePattern : u16);
	
	pub fn ResetQueryPoolEXT(
		queryPool : QueryPool,
		firstQuery : u32,
		queryCount : u32);
	
	pub fn GetGeneratedCommandsMemoryRequirementsNV(
		pInfo : *const GeneratedCommandsMemoryRequirementsInfoNV,
		pMemoryRequirements : *mut MemoryRequirements2);
	
	pub fn CmdPreprocessGeneratedCommandsNV(
		commandBuffer : CommandBuffer,
		pGeneratedCommandsInfo : *const GeneratedCommandsInfoNV);
	
	pub fn CmdExecuteGeneratedCommandsNV(
		commandBuffer : CommandBuffer,
		isPreprocessed : Bool32,
		pGeneratedCommandsInfo : *const GeneratedCommandsInfoNV);
	
	pub fn CmdBindPipelineShaderGroupNV(
		commandBuffer : CommandBuffer,
		pipelineBindPoint : PipelineBindPoint,
		pipeline : Pipeline,
		groupIndex : u32);
	
	pub fn CreateIndirectCommandsLayoutNV(
		pCreateInfo : *const IndirectCommandsLayoutCreateInfoNV,
		pIndirectCommandsLayout : *mut IndirectCommandsLayoutNV) -> VkResult;
	
	pub fn DestroyIndirectCommandsLayoutNV(
		indirectCommandsLayout : IndirectCommandsLayoutNV);
	
	pub fn CreatePrivateDataSlotEXT(
		pCreateInfo : *const PrivateDataSlotCreateInfoEXT,
		pPrivateDataSlot : *mut PrivateDataSlotEXT) -> VkResult;
	
	pub fn DestroyPrivateDataSlotEXT(
		privateDataSlot : PrivateDataSlotEXT);
	
	pub fn SetPrivateDataEXT(
		objectType : ObjectType,
		objectHandle : u64,
		privateDataSlot : PrivateDataSlotEXT,
		data : u64) -> VkResult;
	
	pub fn GetPrivateDataEXT(
		objectType : ObjectType,
		objectHandle : u64,
		privateDataSlot : PrivateDataSlotEXT,
		pData : *mut u64);	
	}
	
extern "C" {
	pub fn CreateWin32SurfaceKHR(
		pCreateInfo : *const Win32SurfaceCreateInfoKHR,
		pSurface : *mut SurfaceKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceWin32PresentationSupportKHR() -> Bool32;
	
	pub fn GetMemoryWin32HandleKHR(
		pGetWin32HandleInfo : *const MemoryGetWin32HandleInfoKHR,
		pHandle : *mut HANDLE) -> VkResult;
	
	pub fn GetMemoryWin32HandlePropertiesKHR(
		handleType : ExternalMemoryHandleTypeFlagBits,
		handle : HANDLE,
		pMemoryWin32HandleProperties : *mut MemoryWin32HandlePropertiesKHR) -> VkResult;
	
	pub fn ImportSemaphoreWin32HandleKHR(
		pImportSemaphoreWin32HandleInfo : *const ImportSemaphoreWin32HandleInfoKHR) -> VkResult;
	
	pub fn GetSemaphoreWin32HandleKHR(
		pGetWin32HandleInfo : *const SemaphoreGetWin32HandleInfoKHR,
		pHandle : *mut HANDLE) -> VkResult;
	
	pub fn ImportFenceWin32HandleKHR(
		pImportFenceWin32HandleInfo : *const ImportFenceWin32HandleInfoKHR) -> VkResult;
	
	pub fn GetFenceWin32HandleKHR(
		pGetWin32HandleInfo : *const FenceGetWin32HandleInfoKHR,
		pHandle : *mut HANDLE) -> VkResult;
	
	pub fn GetMemoryWin32HandleNV(
		memory : DeviceMemory,
		handleType : ExternalMemoryHandleTypeFlagsNV,
		pHandle : *mut HANDLE) -> VkResult;
	
	pub fn GetPhysicalDeviceSurfacePresentModes2EXT(
		pSurfaceInfo : *const PhysicalDeviceSurfaceInfo2KHR,
		pPresentModeCount : *mut u32,
		pPresentModes : *mut PresentModeKHR) -> VkResult;
	
	pub fn AcquireFullScreenExclusiveModeEXT(
		swapchain : SwapchainKHR) -> VkResult;
	
	pub fn ReleaseFullScreenExclusiveModeEXT(
		swapchain : SwapchainKHR) -> VkResult;
	
	pub fn GetDeviceGroupSurfacePresentModes2EXT(
		pSurfaceInfo : *const PhysicalDeviceSurfaceInfo2KHR,
		pModes : *mut DeviceGroupPresentModeFlagsKHR) -> VkResult;
}

pub type XlibSurfaceCreateFlagsKHR = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XlibSurfaceCreateInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub flags : XlibSurfaceCreateFlagsKHR,
        pub dpy : u64,
        pub window : u64,
}

impl ::std::default::Default for XlibSurfaceCreateInfoKHR {
    fn default() -> XlibSurfaceCreateInfoKHR {
        XlibSurfaceCreateInfoKHR {
            sType : STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
			dpy : 0 as _,
			window : 0 as _,
        }
    }
}

extern "C" {
	pub fn CreateXlibSurfaceKHR(
		pCreateInfo : *const XlibSurfaceCreateInfoKHR,
		pSurface : *mut SurfaceKHR) -> VkResult;
		
	pub fn GetPhysicalDeviceXlibPresentationSupportKHR(
		queueFamilyIndex : u32,
		dpy : u64,
		visualID : u64) -> Bool32;
}

pub type XcbSurfaceCreateFlagsKHR = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XcbSurfaceCreateInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub flags : XcbSurfaceCreateFlagsKHR,
        pub connection : u64,
        pub window : u64,
}

impl ::std::default::Default for XcbSurfaceCreateInfoKHR {
    fn default() -> XcbSurfaceCreateInfoKHR {
        XcbSurfaceCreateInfoKHR {
            sType : STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
			connection : 0 as _,
			window : 0 as _,
        }
    }
}

extern "C" {
	pub fn CreateXcbSurfaceKHR(
		pCreateInfo : *const XcbSurfaceCreateInfoKHR,
		pSurface : *mut SurfaceKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceXcbPresentationSupportKHR(
		queueFamilyIndex : u32,
		connection : u64,
		visual_id : u32) -> Bool32;
}

pub type WaylandSurfaceCreateFlagsKHR = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WaylandSurfaceCreateInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub flags : WaylandSurfaceCreateFlagsKHR,
        pub display : u64,
        pub surface : u64,
}

impl ::std::default::Default for WaylandSurfaceCreateInfoKHR {
    fn default() -> WaylandSurfaceCreateInfoKHR {
        WaylandSurfaceCreateInfoKHR {
            sType : STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR,
            pNext : 0 as _,
            flags : Default::default(),
			display : 0 as _,
			surface : 0 as _,
        }
    }
}

extern "C" {
	pub fn CreateWaylandSurfaceKHR(
		pCreateInfo : *const WaylandSurfaceCreateInfoKHR,
		pSurface : *const SurfaceKHR) -> VkResult;
	
	pub fn GetPhysicalDeviceWaylandPresentationSupportKHR(
		queueFamilyIndex : u32,
		display : u64) -> Bool32;
}

pub type AndroidSurfaceCreateFlagsKHR = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AndroidSurfaceCreateInfoKHR {
        pub sType : StructureType,
        pub pNext : *const void,
        pub flags : AndroidSurfaceCreateFlagsKHR,
        pub window : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AndroidHardwareBufferUsageANDROID {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub androidHardwareBufferUsage : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AndroidHardwareBufferPropertiesANDROID {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub allocationSize : DeviceSize,
        pub memoryTypeBits : u32,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AndroidHardwareBufferFormatPropertiesANDROID {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub format : Format,
        pub externalFormat : u64,
        pub formatFeatures : FormatFeatureFlags,
        pub samplerYcbcrConversionComponents : ComponentMapping,
        pub suggestedYcbcrModel : SamplerYcbcrModelConversion,
        pub suggestedYcbcrRange : SamplerYcbcrRange,
        pub suggestedXChromaOffset : ChromaLocation,
        pub suggestedYChromaOffset : ChromaLocation,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImportAndroidHardwareBufferInfoANDROID {
        pub sType : StructureType,
        pub pNext : *const void,
        pub buffer : u64,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryGetAndroidHardwareBufferInfoANDROID {
        pub sType : StructureType,
        pub pNext : *const void,
        pub memory : DeviceMemory,
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalFormatANDROID {
        pub sType : StructureType,
        pub pNext : *mut void,
        pub externalFormat : u64,
}


extern "C" {
	pub fn CreateAndroidSurfaceKHR(
		pCreateInfo : *const AndroidSurfaceCreateInfoKHR,
		pSurface : *mut SurfaceKHR) -> VkResult;
	
	pub fn GetAndroidHardwareBufferPropertiesANDROID(
		buffer : u64,
		pProperties : *mut AndroidHardwareBufferPropertiesANDROID) -> VkResult;
	
	pub fn GetMemoryAndroidHardwareBufferANDROID(
		pInfo : *const MemoryGetAndroidHardwareBufferInfoANDROID,
		pBuffer : u64) -> VkResult;
}